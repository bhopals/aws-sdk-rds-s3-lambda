var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@aws-sdk/client-rds/node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/@aws-sdk/client-rds/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-serde/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next(__spreadProps(__spreadValues({}, args), {
        request
      }));
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/smithy-client/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  "node_modules/@aws-sdk/smithy-client/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-stack/node_modules/tslib/tslib.js
var require_tslib4 = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, __spreadValues({}, entry));
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, __spreadValues({}, entry));
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = () => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain.map((entry) => entry.middleware);
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = __spreadValues({
            step: "initialize",
            priority: "normal",
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = __spreadValues({
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib4();
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      throw new TypeError(`Expected object, got ${typeof value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      throw new TypeError(`Expected string, got ${typeof value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([_, v]) => v !== null && v !== void 0).map(([k, _]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) {
        warningEmitted = true;
        process.emitWarning(`The AWS SDK for JavaScript (v3) will
no longer support Node.js ${version} on November 1, 2022.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to Node.js 14.x or later.

For details, please refer our blog post: https://a.co/48dbdYz`, `NodeDeprecationWarning`);
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib3();
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/models/RDSServiceException.js
var require_RDSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/models/RDSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RDSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var RDSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, RDSServiceException.prototype);
      }
    };
    exports.RDSServiceException = RDSServiceException;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DBClusterSnapshot = exports.CopyDBClusterSnapshotMessage = exports.DBParameterGroupQuotaExceededFault = exports.DBParameterGroupNotFoundFault = exports.DBParameterGroupAlreadyExistsFault = exports.CopyDBClusterParameterGroupResult = exports.DBClusterParameterGroup = exports.CopyDBClusterParameterGroupMessage = exports.InvalidExportTaskStateFault = exports.ExportTaskNotFoundFault = exports.ExportTask = exports.CancelExportTaskMessage = exports.DBClusterBacktrack = exports.BacktrackDBClusterMessage = exports.InvalidDBSecurityGroupStateFault = exports.DBSecurityGroupNotFoundFault = exports.AuthorizeDBSecurityGroupIngressResult = exports.DBSecurityGroup = exports.IPRange = exports.EC2SecurityGroup = exports.AuthorizeDBSecurityGroupIngressMessage = exports.AuthorizationQuotaExceededFault = exports.AuthorizationAlreadyExistsFault = exports.ResourceNotFoundFault = exports.ApplyPendingMaintenanceActionResult = exports.ResourcePendingMaintenanceActions = exports.PendingMaintenanceAction = exports.ApplyPendingMaintenanceActionMessage = exports.DBSnapshotNotFoundFault = exports.DBProxyTargetGroupNotFoundFault = exports.DBProxyNotFoundFault = exports.AddTagsToResourceMessage = exports.Tag = exports.SubscriptionNotFoundFault = exports.SourceNotFoundFault = exports.AddSourceIdentifierToSubscriptionResult = exports.EventSubscription = exports.AddSourceIdentifierToSubscriptionMessage = exports.InvalidDBInstanceStateFault = exports.DBInstanceRoleQuotaExceededFault = exports.DBInstanceRoleAlreadyExistsFault = exports.DBInstanceNotFoundFault = exports.AddRoleToDBInstanceMessage = exports.InvalidDBClusterStateFault = exports.DBClusterRoleQuotaExceededFault = exports.DBClusterRoleAlreadyExistsFault = exports.DBClusterNotFoundFault = exports.AddRoleToDBClusterMessage = exports.AccountAttributesMessage = exports.AccountQuota = void 0;
    exports.DBClusterQuotaExceededFault = exports.DBClusterParameterGroupNotFoundFault = exports.DBClusterAlreadyExistsFault = exports.CreateDBClusterResult = exports.DBCluster = exports.ServerlessV2ScalingConfigurationInfo = exports.ScalingConfigurationInfo = exports.ClusterPendingModifiedValues = exports.PendingCloudwatchLogsExports = exports.WriteForwardingStatus = exports.DomainMembership = exports.DBClusterOptionGroupStatus = exports.DBClusterMember = exports.DBClusterRole = exports.CreateDBClusterMessage = exports.ServerlessV2ScalingConfiguration = exports.ScalingConfiguration = exports.DBEngineVersion = exports.UpgradeTarget = exports.Timezone = exports.CharacterSet = exports.CustomDBEngineVersionQuotaExceededFault = exports.CustomDBEngineVersionAlreadyExistsFault = exports.CreateCustomDBEngineVersionMessage = exports.OptionGroupQuotaExceededFault = exports.OptionGroupNotFoundFault = exports.OptionGroupAlreadyExistsFault = exports.CopyOptionGroupResult = exports.OptionGroup = exports.Option = exports.VpcSecurityGroupMembership = exports.OptionSetting = exports.DBSecurityGroupMembership = exports.CopyOptionGroupMessage = exports.InvalidDBSnapshotStateFault = exports.DBSnapshotAlreadyExistsFault = exports.CustomAvailabilityZoneNotFoundFault = exports.CopyDBSnapshotResult = exports.DBSnapshot = exports.ProcessorFeature = exports.CopyDBSnapshotMessage = exports.CopyDBParameterGroupResult = exports.DBParameterGroup = exports.CopyDBParameterGroupMessage = exports.SnapshotQuotaExceededFault = exports.KMSKeyNotAccessibleFault = exports.InvalidDBClusterSnapshotStateFault = exports.DBClusterSnapshotNotFoundFault = exports.DBClusterSnapshotAlreadyExistsFault = exports.CopyDBClusterSnapshotResult = void 0;
    exports.IAMAuthMode = exports.AuthScheme = exports.CreateDBParameterGroupResult = exports.CreateDBParameterGroupMessage = exports.InvalidDBSubnetGroupFault = exports.DBSubnetGroupNotAllowedFault = exports.CreateDBInstanceReadReplicaResult = exports.CreateDBInstanceReadReplicaMessage = exports.StorageTypeNotSupportedFault = exports.ProvisionedIopsNotAvailableInAZFault = exports.NetworkTypeNotSupported = exports.InsufficientDBInstanceCapacityFault = exports.InstanceQuotaExceededFault = exports.DBInstanceAlreadyExistsFault = exports.CreateDBInstanceResult = exports.DBInstance = exports.DBInstanceStatusInfo = exports.ReplicaMode = exports.PendingModifiedValues = exports.OptionGroupMembership = exports.Endpoint = exports.DBSubnetGroup = exports.Subnet = exports.Outpost = exports.AvailabilityZone = exports.DBParameterGroupStatus = exports.DBInstanceAutomatedBackupsReplication = exports.AutomationMode = exports.DBInstanceRole = exports.CreateDBInstanceMessage = exports.BackupPolicyNotFoundFault = exports.AuthorizationNotFoundFault = exports.CreateDBClusterSnapshotResult = exports.CreateDBClusterSnapshotMessage = exports.CreateDBClusterParameterGroupResult = exports.CreateDBClusterParameterGroupMessage = exports.DBClusterEndpointQuotaExceededFault = exports.DBClusterEndpointAlreadyExistsFault = exports.DBClusterEndpoint = exports.CreateDBClusterEndpointMessage = exports.StorageQuotaExceededFault = exports.InvalidVPCNetworkStateFault = exports.InvalidSubnet = exports.InvalidGlobalClusterStateFault = exports.InvalidDBSubnetGroupStateFault = exports.InsufficientStorageClusterCapacityFault = exports.GlobalClusterNotFoundFault = exports.DomainNotFoundFault = exports.DBSubnetGroupNotFoundFault = exports.DBSubnetGroupDoesNotCoverEnoughAZs = void 0;
    exports.InvalidCustomDBEngineVersionStateFault = exports.DeleteCustomDBEngineVersionMessage = exports.CustomDBEngineVersionNotFoundFault = exports.CreateOptionGroupResult = exports.CreateOptionGroupMessage = exports.GlobalClusterQuotaExceededFault = exports.GlobalClusterAlreadyExistsFault = exports.CreateGlobalClusterResult = exports.GlobalCluster = exports.GlobalClusterMember = exports.FailoverState = exports.FailoverStatus = exports.CreateGlobalClusterMessage = exports.SubscriptionCategoryNotFoundFault = exports.SubscriptionAlreadyExistFault = exports.SNSTopicArnNotFoundFault = exports.SNSNoAuthorizationFault = exports.SNSInvalidTopicFault = exports.EventSubscriptionQuotaExceededFault = exports.CreateEventSubscriptionResult = exports.CreateEventSubscriptionMessage = exports.DBSubnetQuotaExceededFault = exports.DBSubnetGroupQuotaExceededFault = exports.DBSubnetGroupAlreadyExistsFault = exports.CreateDBSubnetGroupResult = exports.CreateDBSubnetGroupMessage = exports.CreateDBSnapshotResult = exports.CreateDBSnapshotMessage = exports.DBSecurityGroupQuotaExceededFault = exports.DBSecurityGroupNotSupportedFault = exports.DBSecurityGroupAlreadyExistsFault = exports.CreateDBSecurityGroupResult = exports.CreateDBSecurityGroupMessage = exports.InvalidDBProxyStateFault = exports.DBProxyEndpointQuotaExceededFault = exports.DBProxyEndpointAlreadyExistsFault = exports.CreateDBProxyEndpointResponse = exports.DBProxyEndpoint = exports.DBProxyEndpointStatus = exports.CreateDBProxyEndpointRequest = exports.DBProxyEndpointTargetRole = exports.DBProxyQuotaExceededFault = exports.DBProxyAlreadyExistsFault = exports.CreateDBProxyResponse = exports.DBProxy = exports.DBProxyStatus = exports.UserAuthConfigInfo = exports.CreateDBProxyRequest = exports.EngineFamily = exports.UserAuthConfig = void 0;
    exports.DBClusterEndpointMessage = exports.DescribeDBClusterBacktracksMessage = exports.DBClusterBacktrackNotFoundFault = exports.DBClusterBacktrackMessage = exports.DescribeCertificatesMessage = exports.Filter = exports.CertificateNotFoundFault = exports.CertificateMessage = exports.Certificate = exports.DescribeAccountAttributesMessage = exports.DeregisterDBProxyTargetsResponse = exports.DeregisterDBProxyTargetsRequest = exports.DBProxyTargetNotFoundFault = exports.InvalidOptionGroupStateFault = exports.DeleteOptionGroupMessage = exports.DeleteGlobalClusterResult = exports.DeleteGlobalClusterMessage = exports.InvalidEventSubscriptionStateFault = exports.DeleteEventSubscriptionResult = exports.DeleteEventSubscriptionMessage = exports.InvalidDBSubnetStateFault = exports.DeleteDBSubnetGroupMessage = exports.DeleteDBSnapshotResult = exports.DeleteDBSnapshotMessage = exports.DeleteDBSecurityGroupMessage = exports.InvalidDBProxyEndpointStateFault = exports.DeleteDBProxyEndpointResponse = exports.DeleteDBProxyEndpointRequest = exports.DBProxyEndpointNotFoundFault = exports.DeleteDBProxyResponse = exports.DeleteDBProxyRequest = exports.DeleteDBParameterGroupMessage = exports.InvalidDBInstanceAutomatedBackupStateFault = exports.DeleteDBInstanceAutomatedBackupResult = exports.DBInstanceAutomatedBackup = exports.RestoreWindow = exports.DeleteDBInstanceAutomatedBackupMessage = exports.DBInstanceAutomatedBackupNotFoundFault = exports.DeleteDBInstanceResult = exports.DeleteDBInstanceMessage = exports.DBInstanceAutomatedBackupQuotaExceededFault = exports.DeleteDBClusterSnapshotResult = exports.DeleteDBClusterSnapshotMessage = exports.InvalidDBParameterGroupStateFault = exports.DeleteDBClusterParameterGroupMessage = exports.InvalidDBClusterEndpointStateFault = exports.DeleteDBClusterEndpointMessage = exports.DBClusterEndpointNotFoundFault = exports.DeleteDBClusterResult = exports.DeleteDBClusterMessage = void 0;
    exports.DBSnapshotAttribute = exports.DescribeDBSnapshotAttributesMessage = exports.DescribeDBSecurityGroupsMessage = exports.DBSecurityGroupMessage = exports.DescribeDBProxyTargetsResponse = exports.DBProxyTarget = exports.TargetType = exports.TargetHealth = exports.TargetState = exports.TargetHealthReason = exports.TargetRole = exports.DescribeDBProxyTargetsRequest = exports.DescribeDBProxyTargetGroupsResponse = exports.DBProxyTargetGroup = exports.ConnectionPoolConfigurationInfo = exports.DescribeDBProxyTargetGroupsRequest = exports.DescribeDBProxyEndpointsResponse = exports.DescribeDBProxyEndpointsRequest = exports.DescribeDBProxiesResponse = exports.DescribeDBProxiesRequest = exports.DescribeDBParametersMessage = exports.DBParameterGroupDetails = exports.DescribeDBParameterGroupsMessage = exports.DBParameterGroupsMessage = exports.DescribeDBLogFilesResponse = exports.DescribeDBLogFilesDetails = exports.DescribeDBLogFilesMessage = exports.DescribeDBInstancesMessage = exports.DBInstanceMessage = exports.DescribeDBInstanceAutomatedBackupsMessage = exports.DBInstanceAutomatedBackupMessage = exports.DescribeDBEngineVersionsMessage = exports.DBEngineVersionMessage = exports.DescribeDBClusterSnapshotsMessage = exports.DBClusterSnapshotMessage = exports.DescribeDBClusterSnapshotAttributesResult = exports.DBClusterSnapshotAttributesResult = exports.DBClusterSnapshotAttribute = exports.DescribeDBClusterSnapshotAttributesMessage = exports.DescribeDBClustersMessage = exports.DBClusterMessage = exports.DescribeDBClusterParametersMessage = exports.DBClusterParameterGroupDetails = exports.Parameter = exports.DescribeDBClusterParameterGroupsMessage = exports.DBClusterParameterGroupsMessage = exports.DescribeDBClusterEndpointsMessage = void 0;
    var RDSServiceException_1 = require_RDSServiceException();
    var AccountQuota;
    (function(AccountQuota2) {
      AccountQuota2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AccountQuota = exports.AccountQuota || (exports.AccountQuota = {}));
    var AccountAttributesMessage;
    (function(AccountAttributesMessage2) {
      AccountAttributesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AccountAttributesMessage = exports.AccountAttributesMessage || (exports.AccountAttributesMessage = {}));
    var AddRoleToDBClusterMessage;
    (function(AddRoleToDBClusterMessage2) {
      AddRoleToDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AddRoleToDBClusterMessage = exports.AddRoleToDBClusterMessage || (exports.AddRoleToDBClusterMessage = {}));
    var DBClusterNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterNotFoundFault.prototype);
      }
    };
    exports.DBClusterNotFoundFault = DBClusterNotFoundFault;
    var DBClusterRoleAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterRoleAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterRoleAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleAlreadyExistsFault.prototype);
      }
    };
    exports.DBClusterRoleAlreadyExistsFault = DBClusterRoleAlreadyExistsFault;
    var DBClusterRoleQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterRoleQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterRoleQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleQuotaExceededFault.prototype);
      }
    };
    exports.DBClusterRoleQuotaExceededFault = DBClusterRoleQuotaExceededFault;
    var InvalidDBClusterStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBClusterStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBClusterStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterStateFault.prototype);
      }
    };
    exports.InvalidDBClusterStateFault = InvalidDBClusterStateFault;
    var AddRoleToDBInstanceMessage;
    (function(AddRoleToDBInstanceMessage2) {
      AddRoleToDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AddRoleToDBInstanceMessage = exports.AddRoleToDBInstanceMessage || (exports.AddRoleToDBInstanceMessage = {}));
    var DBInstanceNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBInstanceNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBInstanceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceNotFoundFault.prototype);
      }
    };
    exports.DBInstanceNotFoundFault = DBInstanceNotFoundFault;
    var DBInstanceRoleAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBInstanceRoleAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBInstanceRoleAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleAlreadyExistsFault.prototype);
      }
    };
    exports.DBInstanceRoleAlreadyExistsFault = DBInstanceRoleAlreadyExistsFault;
    var DBInstanceRoleQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBInstanceRoleQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBInstanceRoleQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleQuotaExceededFault.prototype);
      }
    };
    exports.DBInstanceRoleQuotaExceededFault = DBInstanceRoleQuotaExceededFault;
    var InvalidDBInstanceStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBInstanceStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBInstanceStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBInstanceStateFault.prototype);
      }
    };
    exports.InvalidDBInstanceStateFault = InvalidDBInstanceStateFault;
    var AddSourceIdentifierToSubscriptionMessage;
    (function(AddSourceIdentifierToSubscriptionMessage2) {
      AddSourceIdentifierToSubscriptionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AddSourceIdentifierToSubscriptionMessage = exports.AddSourceIdentifierToSubscriptionMessage || (exports.AddSourceIdentifierToSubscriptionMessage = {}));
    var EventSubscription;
    (function(EventSubscription2) {
      EventSubscription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EventSubscription = exports.EventSubscription || (exports.EventSubscription = {}));
    var AddSourceIdentifierToSubscriptionResult;
    (function(AddSourceIdentifierToSubscriptionResult2) {
      AddSourceIdentifierToSubscriptionResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AddSourceIdentifierToSubscriptionResult = exports.AddSourceIdentifierToSubscriptionResult || (exports.AddSourceIdentifierToSubscriptionResult = {}));
    var SourceNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SourceNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "SourceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceNotFoundFault.prototype);
      }
    };
    exports.SourceNotFoundFault = SourceNotFoundFault;
    var SubscriptionNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SubscriptionNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "SubscriptionNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionNotFoundFault.prototype);
      }
    };
    exports.SubscriptionNotFoundFault = SubscriptionNotFoundFault;
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Tag = exports.Tag || (exports.Tag = {}));
    var AddTagsToResourceMessage;
    (function(AddTagsToResourceMessage2) {
      AddTagsToResourceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AddTagsToResourceMessage = exports.AddTagsToResourceMessage || (exports.AddTagsToResourceMessage = {}));
    var DBProxyNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyNotFoundFault.prototype);
      }
    };
    exports.DBProxyNotFoundFault = DBProxyNotFoundFault;
    var DBProxyTargetGroupNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyTargetGroupNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyTargetGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetGroupNotFoundFault.prototype);
      }
    };
    exports.DBProxyTargetGroupNotFoundFault = DBProxyTargetGroupNotFoundFault;
    var DBSnapshotNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSnapshotNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBSnapshotNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSnapshotNotFoundFault.prototype);
      }
    };
    exports.DBSnapshotNotFoundFault = DBSnapshotNotFoundFault;
    var ApplyPendingMaintenanceActionMessage;
    (function(ApplyPendingMaintenanceActionMessage2) {
      ApplyPendingMaintenanceActionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ApplyPendingMaintenanceActionMessage = exports.ApplyPendingMaintenanceActionMessage || (exports.ApplyPendingMaintenanceActionMessage = {}));
    var PendingMaintenanceAction;
    (function(PendingMaintenanceAction2) {
      PendingMaintenanceAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PendingMaintenanceAction = exports.PendingMaintenanceAction || (exports.PendingMaintenanceAction = {}));
    var ResourcePendingMaintenanceActions;
    (function(ResourcePendingMaintenanceActions2) {
      ResourcePendingMaintenanceActions2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ResourcePendingMaintenanceActions = exports.ResourcePendingMaintenanceActions || (exports.ResourcePendingMaintenanceActions = {}));
    var ApplyPendingMaintenanceActionResult;
    (function(ApplyPendingMaintenanceActionResult2) {
      ApplyPendingMaintenanceActionResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ApplyPendingMaintenanceActionResult = exports.ApplyPendingMaintenanceActionResult || (exports.ApplyPendingMaintenanceActionResult = {}));
    var ResourceNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ResourceNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "ResourceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundFault.prototype);
      }
    };
    exports.ResourceNotFoundFault = ResourceNotFoundFault;
    var AuthorizationAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "AuthorizationAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "AuthorizationAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationAlreadyExistsFault.prototype);
      }
    };
    exports.AuthorizationAlreadyExistsFault = AuthorizationAlreadyExistsFault;
    var AuthorizationQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "AuthorizationQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "AuthorizationQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationQuotaExceededFault.prototype);
      }
    };
    exports.AuthorizationQuotaExceededFault = AuthorizationQuotaExceededFault;
    var AuthorizeDBSecurityGroupIngressMessage;
    (function(AuthorizeDBSecurityGroupIngressMessage2) {
      AuthorizeDBSecurityGroupIngressMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AuthorizeDBSecurityGroupIngressMessage = exports.AuthorizeDBSecurityGroupIngressMessage || (exports.AuthorizeDBSecurityGroupIngressMessage = {}));
    var EC2SecurityGroup;
    (function(EC2SecurityGroup2) {
      EC2SecurityGroup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EC2SecurityGroup = exports.EC2SecurityGroup || (exports.EC2SecurityGroup = {}));
    var IPRange;
    (function(IPRange2) {
      IPRange2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(IPRange = exports.IPRange || (exports.IPRange = {}));
    var DBSecurityGroup;
    (function(DBSecurityGroup2) {
      DBSecurityGroup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSecurityGroup = exports.DBSecurityGroup || (exports.DBSecurityGroup = {}));
    var AuthorizeDBSecurityGroupIngressResult;
    (function(AuthorizeDBSecurityGroupIngressResult2) {
      AuthorizeDBSecurityGroupIngressResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AuthorizeDBSecurityGroupIngressResult = exports.AuthorizeDBSecurityGroupIngressResult || (exports.AuthorizeDBSecurityGroupIngressResult = {}));
    var DBSecurityGroupNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSecurityGroupNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBSecurityGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupNotFoundFault.prototype);
      }
    };
    exports.DBSecurityGroupNotFoundFault = DBSecurityGroupNotFoundFault;
    var InvalidDBSecurityGroupStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBSecurityGroupStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBSecurityGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSecurityGroupStateFault.prototype);
      }
    };
    exports.InvalidDBSecurityGroupStateFault = InvalidDBSecurityGroupStateFault;
    var BacktrackDBClusterMessage;
    (function(BacktrackDBClusterMessage2) {
      BacktrackDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BacktrackDBClusterMessage = exports.BacktrackDBClusterMessage || (exports.BacktrackDBClusterMessage = {}));
    var DBClusterBacktrack;
    (function(DBClusterBacktrack2) {
      DBClusterBacktrack2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterBacktrack = exports.DBClusterBacktrack || (exports.DBClusterBacktrack = {}));
    var CancelExportTaskMessage;
    (function(CancelExportTaskMessage2) {
      CancelExportTaskMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CancelExportTaskMessage = exports.CancelExportTaskMessage || (exports.CancelExportTaskMessage = {}));
    var ExportTask;
    (function(ExportTask2) {
      ExportTask2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ExportTask = exports.ExportTask || (exports.ExportTask = {}));
    var ExportTaskNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExportTaskNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "ExportTaskNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportTaskNotFoundFault.prototype);
      }
    };
    exports.ExportTaskNotFoundFault = ExportTaskNotFoundFault;
    var InvalidExportTaskStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidExportTaskStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidExportTaskStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportTaskStateFault.prototype);
      }
    };
    exports.InvalidExportTaskStateFault = InvalidExportTaskStateFault;
    var CopyDBClusterParameterGroupMessage;
    (function(CopyDBClusterParameterGroupMessage2) {
      CopyDBClusterParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBClusterParameterGroupMessage = exports.CopyDBClusterParameterGroupMessage || (exports.CopyDBClusterParameterGroupMessage = {}));
    var DBClusterParameterGroup;
    (function(DBClusterParameterGroup2) {
      DBClusterParameterGroup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterParameterGroup = exports.DBClusterParameterGroup || (exports.DBClusterParameterGroup = {}));
    var CopyDBClusterParameterGroupResult;
    (function(CopyDBClusterParameterGroupResult2) {
      CopyDBClusterParameterGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBClusterParameterGroupResult = exports.CopyDBClusterParameterGroupResult || (exports.CopyDBClusterParameterGroupResult = {}));
    var DBParameterGroupAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBParameterGroupAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBParameterGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupAlreadyExistsFault.prototype);
      }
    };
    exports.DBParameterGroupAlreadyExistsFault = DBParameterGroupAlreadyExistsFault;
    var DBParameterGroupNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBParameterGroupNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBParameterGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupNotFoundFault.prototype);
      }
    };
    exports.DBParameterGroupNotFoundFault = DBParameterGroupNotFoundFault;
    var DBParameterGroupQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBParameterGroupQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBParameterGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupQuotaExceededFault.prototype);
      }
    };
    exports.DBParameterGroupQuotaExceededFault = DBParameterGroupQuotaExceededFault;
    var CopyDBClusterSnapshotMessage;
    (function(CopyDBClusterSnapshotMessage2) {
      CopyDBClusterSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBClusterSnapshotMessage = exports.CopyDBClusterSnapshotMessage || (exports.CopyDBClusterSnapshotMessage = {}));
    var DBClusterSnapshot;
    (function(DBClusterSnapshot2) {
      DBClusterSnapshot2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterSnapshot = exports.DBClusterSnapshot || (exports.DBClusterSnapshot = {}));
    var CopyDBClusterSnapshotResult;
    (function(CopyDBClusterSnapshotResult2) {
      CopyDBClusterSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBClusterSnapshotResult = exports.CopyDBClusterSnapshotResult || (exports.CopyDBClusterSnapshotResult = {}));
    var DBClusterSnapshotAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterSnapshotAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterSnapshotAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterSnapshotAlreadyExistsFault.prototype);
      }
    };
    exports.DBClusterSnapshotAlreadyExistsFault = DBClusterSnapshotAlreadyExistsFault;
    var DBClusterSnapshotNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterSnapshotNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterSnapshotNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterSnapshotNotFoundFault.prototype);
      }
    };
    exports.DBClusterSnapshotNotFoundFault = DBClusterSnapshotNotFoundFault;
    var InvalidDBClusterSnapshotStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBClusterSnapshotStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBClusterSnapshotStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterSnapshotStateFault.prototype);
      }
    };
    exports.InvalidDBClusterSnapshotStateFault = InvalidDBClusterSnapshotStateFault;
    var KMSKeyNotAccessibleFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "KMSKeyNotAccessibleFault",
          $fault: "client"
        }, opts));
        this.name = "KMSKeyNotAccessibleFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, KMSKeyNotAccessibleFault.prototype);
      }
    };
    exports.KMSKeyNotAccessibleFault = KMSKeyNotAccessibleFault;
    var SnapshotQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SnapshotQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "SnapshotQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SnapshotQuotaExceededFault.prototype);
      }
    };
    exports.SnapshotQuotaExceededFault = SnapshotQuotaExceededFault;
    var CopyDBParameterGroupMessage;
    (function(CopyDBParameterGroupMessage2) {
      CopyDBParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBParameterGroupMessage = exports.CopyDBParameterGroupMessage || (exports.CopyDBParameterGroupMessage = {}));
    var DBParameterGroup;
    (function(DBParameterGroup2) {
      DBParameterGroup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBParameterGroup = exports.DBParameterGroup || (exports.DBParameterGroup = {}));
    var CopyDBParameterGroupResult;
    (function(CopyDBParameterGroupResult2) {
      CopyDBParameterGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBParameterGroupResult = exports.CopyDBParameterGroupResult || (exports.CopyDBParameterGroupResult = {}));
    var CopyDBSnapshotMessage;
    (function(CopyDBSnapshotMessage2) {
      CopyDBSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBSnapshotMessage = exports.CopyDBSnapshotMessage || (exports.CopyDBSnapshotMessage = {}));
    var ProcessorFeature;
    (function(ProcessorFeature2) {
      ProcessorFeature2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ProcessorFeature = exports.ProcessorFeature || (exports.ProcessorFeature = {}));
    var DBSnapshot;
    (function(DBSnapshot2) {
      DBSnapshot2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSnapshot = exports.DBSnapshot || (exports.DBSnapshot = {}));
    var CopyDBSnapshotResult;
    (function(CopyDBSnapshotResult2) {
      CopyDBSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyDBSnapshotResult = exports.CopyDBSnapshotResult || (exports.CopyDBSnapshotResult = {}));
    var CustomAvailabilityZoneNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CustomAvailabilityZoneNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "CustomAvailabilityZoneNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomAvailabilityZoneNotFoundFault.prototype);
      }
    };
    exports.CustomAvailabilityZoneNotFoundFault = CustomAvailabilityZoneNotFoundFault;
    var DBSnapshotAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSnapshotAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBSnapshotAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSnapshotAlreadyExistsFault.prototype);
      }
    };
    exports.DBSnapshotAlreadyExistsFault = DBSnapshotAlreadyExistsFault;
    var InvalidDBSnapshotStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBSnapshotStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBSnapshotStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSnapshotStateFault.prototype);
      }
    };
    exports.InvalidDBSnapshotStateFault = InvalidDBSnapshotStateFault;
    var CopyOptionGroupMessage;
    (function(CopyOptionGroupMessage2) {
      CopyOptionGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyOptionGroupMessage = exports.CopyOptionGroupMessage || (exports.CopyOptionGroupMessage = {}));
    var DBSecurityGroupMembership;
    (function(DBSecurityGroupMembership2) {
      DBSecurityGroupMembership2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSecurityGroupMembership = exports.DBSecurityGroupMembership || (exports.DBSecurityGroupMembership = {}));
    var OptionSetting;
    (function(OptionSetting2) {
      OptionSetting2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionSetting = exports.OptionSetting || (exports.OptionSetting = {}));
    var VpcSecurityGroupMembership;
    (function(VpcSecurityGroupMembership2) {
      VpcSecurityGroupMembership2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(VpcSecurityGroupMembership = exports.VpcSecurityGroupMembership || (exports.VpcSecurityGroupMembership = {}));
    var Option;
    (function(Option2) {
      Option2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Option = exports.Option || (exports.Option = {}));
    var OptionGroup;
    (function(OptionGroup2) {
      OptionGroup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionGroup = exports.OptionGroup || (exports.OptionGroup = {}));
    var CopyOptionGroupResult;
    (function(CopyOptionGroupResult2) {
      CopyOptionGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CopyOptionGroupResult = exports.CopyOptionGroupResult || (exports.CopyOptionGroupResult = {}));
    var OptionGroupAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "OptionGroupAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "OptionGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupAlreadyExistsFault.prototype);
      }
    };
    exports.OptionGroupAlreadyExistsFault = OptionGroupAlreadyExistsFault;
    var OptionGroupNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "OptionGroupNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "OptionGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupNotFoundFault.prototype);
      }
    };
    exports.OptionGroupNotFoundFault = OptionGroupNotFoundFault;
    var OptionGroupQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "OptionGroupQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "OptionGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupQuotaExceededFault.prototype);
      }
    };
    exports.OptionGroupQuotaExceededFault = OptionGroupQuotaExceededFault;
    var CreateCustomDBEngineVersionMessage;
    (function(CreateCustomDBEngineVersionMessage2) {
      CreateCustomDBEngineVersionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateCustomDBEngineVersionMessage = exports.CreateCustomDBEngineVersionMessage || (exports.CreateCustomDBEngineVersionMessage = {}));
    var CustomDBEngineVersionAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CustomDBEngineVersionAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "CustomDBEngineVersionAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionAlreadyExistsFault.prototype);
      }
    };
    exports.CustomDBEngineVersionAlreadyExistsFault = CustomDBEngineVersionAlreadyExistsFault;
    var CustomDBEngineVersionQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CustomDBEngineVersionQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "CustomDBEngineVersionQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionQuotaExceededFault.prototype);
      }
    };
    exports.CustomDBEngineVersionQuotaExceededFault = CustomDBEngineVersionQuotaExceededFault;
    var CharacterSet;
    (function(CharacterSet2) {
      CharacterSet2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CharacterSet = exports.CharacterSet || (exports.CharacterSet = {}));
    var Timezone;
    (function(Timezone2) {
      Timezone2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Timezone = exports.Timezone || (exports.Timezone = {}));
    var UpgradeTarget;
    (function(UpgradeTarget2) {
      UpgradeTarget2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpgradeTarget = exports.UpgradeTarget || (exports.UpgradeTarget = {}));
    var DBEngineVersion;
    (function(DBEngineVersion2) {
      DBEngineVersion2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBEngineVersion = exports.DBEngineVersion || (exports.DBEngineVersion = {}));
    var ScalingConfiguration;
    (function(ScalingConfiguration2) {
      ScalingConfiguration2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ScalingConfiguration = exports.ScalingConfiguration || (exports.ScalingConfiguration = {}));
    var ServerlessV2ScalingConfiguration;
    (function(ServerlessV2ScalingConfiguration2) {
      ServerlessV2ScalingConfiguration2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ServerlessV2ScalingConfiguration = exports.ServerlessV2ScalingConfiguration || (exports.ServerlessV2ScalingConfiguration = {}));
    var CreateDBClusterMessage;
    (function(CreateDBClusterMessage2) {
      CreateDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBClusterMessage = exports.CreateDBClusterMessage || (exports.CreateDBClusterMessage = {}));
    var DBClusterRole;
    (function(DBClusterRole2) {
      DBClusterRole2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterRole = exports.DBClusterRole || (exports.DBClusterRole = {}));
    var DBClusterMember;
    (function(DBClusterMember2) {
      DBClusterMember2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterMember = exports.DBClusterMember || (exports.DBClusterMember = {}));
    var DBClusterOptionGroupStatus;
    (function(DBClusterOptionGroupStatus2) {
      DBClusterOptionGroupStatus2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterOptionGroupStatus = exports.DBClusterOptionGroupStatus || (exports.DBClusterOptionGroupStatus = {}));
    var DomainMembership;
    (function(DomainMembership2) {
      DomainMembership2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DomainMembership = exports.DomainMembership || (exports.DomainMembership = {}));
    var WriteForwardingStatus;
    (function(WriteForwardingStatus2) {
      WriteForwardingStatus2["DISABLED"] = "disabled";
      WriteForwardingStatus2["DISABLING"] = "disabling";
      WriteForwardingStatus2["ENABLED"] = "enabled";
      WriteForwardingStatus2["ENABLING"] = "enabling";
      WriteForwardingStatus2["UNKNOWN"] = "unknown";
    })(WriteForwardingStatus = exports.WriteForwardingStatus || (exports.WriteForwardingStatus = {}));
    var PendingCloudwatchLogsExports;
    (function(PendingCloudwatchLogsExports2) {
      PendingCloudwatchLogsExports2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PendingCloudwatchLogsExports = exports.PendingCloudwatchLogsExports || (exports.PendingCloudwatchLogsExports = {}));
    var ClusterPendingModifiedValues;
    (function(ClusterPendingModifiedValues2) {
      ClusterPendingModifiedValues2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ClusterPendingModifiedValues = exports.ClusterPendingModifiedValues || (exports.ClusterPendingModifiedValues = {}));
    var ScalingConfigurationInfo;
    (function(ScalingConfigurationInfo2) {
      ScalingConfigurationInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ScalingConfigurationInfo = exports.ScalingConfigurationInfo || (exports.ScalingConfigurationInfo = {}));
    var ServerlessV2ScalingConfigurationInfo;
    (function(ServerlessV2ScalingConfigurationInfo2) {
      ServerlessV2ScalingConfigurationInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ServerlessV2ScalingConfigurationInfo = exports.ServerlessV2ScalingConfigurationInfo || (exports.ServerlessV2ScalingConfigurationInfo = {}));
    var DBCluster;
    (function(DBCluster2) {
      DBCluster2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBCluster = exports.DBCluster || (exports.DBCluster = {}));
    var CreateDBClusterResult;
    (function(CreateDBClusterResult2) {
      CreateDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBClusterResult = exports.CreateDBClusterResult || (exports.CreateDBClusterResult = {}));
    var DBClusterAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterAlreadyExistsFault.prototype);
      }
    };
    exports.DBClusterAlreadyExistsFault = DBClusterAlreadyExistsFault;
    var DBClusterParameterGroupNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterParameterGroupNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterParameterGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterParameterGroupNotFoundFault.prototype);
      }
    };
    exports.DBClusterParameterGroupNotFoundFault = DBClusterParameterGroupNotFoundFault;
    var DBClusterQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterQuotaExceededFault.prototype);
      }
    };
    exports.DBClusterQuotaExceededFault = DBClusterQuotaExceededFault;
    var DBSubnetGroupDoesNotCoverEnoughAZs = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSubnetGroupDoesNotCoverEnoughAZs",
          $fault: "client"
        }, opts));
        this.name = "DBSubnetGroupDoesNotCoverEnoughAZs";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupDoesNotCoverEnoughAZs.prototype);
      }
    };
    exports.DBSubnetGroupDoesNotCoverEnoughAZs = DBSubnetGroupDoesNotCoverEnoughAZs;
    var DBSubnetGroupNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSubnetGroupNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBSubnetGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupNotFoundFault.prototype);
      }
    };
    exports.DBSubnetGroupNotFoundFault = DBSubnetGroupNotFoundFault;
    var DomainNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DomainNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DomainNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DomainNotFoundFault.prototype);
      }
    };
    exports.DomainNotFoundFault = DomainNotFoundFault;
    var GlobalClusterNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "GlobalClusterNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "GlobalClusterNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterNotFoundFault.prototype);
      }
    };
    exports.GlobalClusterNotFoundFault = GlobalClusterNotFoundFault;
    var InsufficientStorageClusterCapacityFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InsufficientStorageClusterCapacityFault",
          $fault: "client"
        }, opts));
        this.name = "InsufficientStorageClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientStorageClusterCapacityFault.prototype);
      }
    };
    exports.InsufficientStorageClusterCapacityFault = InsufficientStorageClusterCapacityFault;
    var InvalidDBSubnetGroupStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBSubnetGroupStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBSubnetGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetGroupStateFault.prototype);
      }
    };
    exports.InvalidDBSubnetGroupStateFault = InvalidDBSubnetGroupStateFault;
    var InvalidGlobalClusterStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidGlobalClusterStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidGlobalClusterStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGlobalClusterStateFault.prototype);
      }
    };
    exports.InvalidGlobalClusterStateFault = InvalidGlobalClusterStateFault;
    var InvalidSubnet = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidSubnet",
          $fault: "client"
        }, opts));
        this.name = "InvalidSubnet";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSubnet.prototype);
      }
    };
    exports.InvalidSubnet = InvalidSubnet;
    var InvalidVPCNetworkStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidVPCNetworkStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidVPCNetworkStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidVPCNetworkStateFault.prototype);
      }
    };
    exports.InvalidVPCNetworkStateFault = InvalidVPCNetworkStateFault;
    var StorageQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "StorageQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "StorageQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageQuotaExceededFault.prototype);
      }
    };
    exports.StorageQuotaExceededFault = StorageQuotaExceededFault;
    var CreateDBClusterEndpointMessage;
    (function(CreateDBClusterEndpointMessage2) {
      CreateDBClusterEndpointMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBClusterEndpointMessage = exports.CreateDBClusterEndpointMessage || (exports.CreateDBClusterEndpointMessage = {}));
    var DBClusterEndpoint;
    (function(DBClusterEndpoint2) {
      DBClusterEndpoint2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterEndpoint = exports.DBClusterEndpoint || (exports.DBClusterEndpoint = {}));
    var DBClusterEndpointAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterEndpointAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterEndpointAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointAlreadyExistsFault.prototype);
      }
    };
    exports.DBClusterEndpointAlreadyExistsFault = DBClusterEndpointAlreadyExistsFault;
    var DBClusterEndpointQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterEndpointQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterEndpointQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointQuotaExceededFault.prototype);
      }
    };
    exports.DBClusterEndpointQuotaExceededFault = DBClusterEndpointQuotaExceededFault;
    var CreateDBClusterParameterGroupMessage;
    (function(CreateDBClusterParameterGroupMessage2) {
      CreateDBClusterParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBClusterParameterGroupMessage = exports.CreateDBClusterParameterGroupMessage || (exports.CreateDBClusterParameterGroupMessage = {}));
    var CreateDBClusterParameterGroupResult;
    (function(CreateDBClusterParameterGroupResult2) {
      CreateDBClusterParameterGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBClusterParameterGroupResult = exports.CreateDBClusterParameterGroupResult || (exports.CreateDBClusterParameterGroupResult = {}));
    var CreateDBClusterSnapshotMessage;
    (function(CreateDBClusterSnapshotMessage2) {
      CreateDBClusterSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBClusterSnapshotMessage = exports.CreateDBClusterSnapshotMessage || (exports.CreateDBClusterSnapshotMessage = {}));
    var CreateDBClusterSnapshotResult;
    (function(CreateDBClusterSnapshotResult2) {
      CreateDBClusterSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBClusterSnapshotResult = exports.CreateDBClusterSnapshotResult || (exports.CreateDBClusterSnapshotResult = {}));
    var AuthorizationNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "AuthorizationNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "AuthorizationNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationNotFoundFault.prototype);
      }
    };
    exports.AuthorizationNotFoundFault = AuthorizationNotFoundFault;
    var BackupPolicyNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "BackupPolicyNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "BackupPolicyNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupPolicyNotFoundFault.prototype);
      }
    };
    exports.BackupPolicyNotFoundFault = BackupPolicyNotFoundFault;
    var CreateDBInstanceMessage;
    (function(CreateDBInstanceMessage2) {
      CreateDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBInstanceMessage = exports.CreateDBInstanceMessage || (exports.CreateDBInstanceMessage = {}));
    var DBInstanceRole;
    (function(DBInstanceRole2) {
      DBInstanceRole2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBInstanceRole = exports.DBInstanceRole || (exports.DBInstanceRole = {}));
    var AutomationMode;
    (function(AutomationMode2) {
      AutomationMode2["ALL_PAUSED"] = "all-paused";
      AutomationMode2["FULL"] = "full";
    })(AutomationMode = exports.AutomationMode || (exports.AutomationMode = {}));
    var DBInstanceAutomatedBackupsReplication;
    (function(DBInstanceAutomatedBackupsReplication2) {
      DBInstanceAutomatedBackupsReplication2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBInstanceAutomatedBackupsReplication = exports.DBInstanceAutomatedBackupsReplication || (exports.DBInstanceAutomatedBackupsReplication = {}));
    var DBParameterGroupStatus;
    (function(DBParameterGroupStatus2) {
      DBParameterGroupStatus2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBParameterGroupStatus = exports.DBParameterGroupStatus || (exports.DBParameterGroupStatus = {}));
    var AvailabilityZone;
    (function(AvailabilityZone2) {
      AvailabilityZone2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AvailabilityZone = exports.AvailabilityZone || (exports.AvailabilityZone = {}));
    var Outpost;
    (function(Outpost2) {
      Outpost2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Outpost = exports.Outpost || (exports.Outpost = {}));
    var Subnet;
    (function(Subnet2) {
      Subnet2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Subnet = exports.Subnet || (exports.Subnet = {}));
    var DBSubnetGroup;
    (function(DBSubnetGroup2) {
      DBSubnetGroup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSubnetGroup = exports.DBSubnetGroup || (exports.DBSubnetGroup = {}));
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
    var OptionGroupMembership;
    (function(OptionGroupMembership2) {
      OptionGroupMembership2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionGroupMembership = exports.OptionGroupMembership || (exports.OptionGroupMembership = {}));
    var PendingModifiedValues;
    (function(PendingModifiedValues2) {
      PendingModifiedValues2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PendingModifiedValues = exports.PendingModifiedValues || (exports.PendingModifiedValues = {}));
    var ReplicaMode;
    (function(ReplicaMode2) {
      ReplicaMode2["MOUNTED"] = "mounted";
      ReplicaMode2["OPEN_READ_ONLY"] = "open-read-only";
    })(ReplicaMode = exports.ReplicaMode || (exports.ReplicaMode = {}));
    var DBInstanceStatusInfo;
    (function(DBInstanceStatusInfo2) {
      DBInstanceStatusInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBInstanceStatusInfo = exports.DBInstanceStatusInfo || (exports.DBInstanceStatusInfo = {}));
    var DBInstance;
    (function(DBInstance2) {
      DBInstance2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBInstance = exports.DBInstance || (exports.DBInstance = {}));
    var CreateDBInstanceResult;
    (function(CreateDBInstanceResult2) {
      CreateDBInstanceResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBInstanceResult = exports.CreateDBInstanceResult || (exports.CreateDBInstanceResult = {}));
    var DBInstanceAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBInstanceAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBInstanceAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAlreadyExistsFault.prototype);
      }
    };
    exports.DBInstanceAlreadyExistsFault = DBInstanceAlreadyExistsFault;
    var InstanceQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InstanceQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "InstanceQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceQuotaExceededFault.prototype);
      }
    };
    exports.InstanceQuotaExceededFault = InstanceQuotaExceededFault;
    var InsufficientDBInstanceCapacityFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InsufficientDBInstanceCapacityFault",
          $fault: "client"
        }, opts));
        this.name = "InsufficientDBInstanceCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientDBInstanceCapacityFault.prototype);
      }
    };
    exports.InsufficientDBInstanceCapacityFault = InsufficientDBInstanceCapacityFault;
    var NetworkTypeNotSupported = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "NetworkTypeNotSupported",
          $fault: "client"
        }, opts));
        this.name = "NetworkTypeNotSupported";
        this.$fault = "client";
        Object.setPrototypeOf(this, NetworkTypeNotSupported.prototype);
      }
    };
    exports.NetworkTypeNotSupported = NetworkTypeNotSupported;
    var ProvisionedIopsNotAvailableInAZFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ProvisionedIopsNotAvailableInAZFault",
          $fault: "client"
        }, opts));
        this.name = "ProvisionedIopsNotAvailableInAZFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedIopsNotAvailableInAZFault.prototype);
      }
    };
    exports.ProvisionedIopsNotAvailableInAZFault = ProvisionedIopsNotAvailableInAZFault;
    var StorageTypeNotSupportedFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "StorageTypeNotSupportedFault",
          $fault: "client"
        }, opts));
        this.name = "StorageTypeNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageTypeNotSupportedFault.prototype);
      }
    };
    exports.StorageTypeNotSupportedFault = StorageTypeNotSupportedFault;
    var CreateDBInstanceReadReplicaMessage;
    (function(CreateDBInstanceReadReplicaMessage2) {
      CreateDBInstanceReadReplicaMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBInstanceReadReplicaMessage = exports.CreateDBInstanceReadReplicaMessage || (exports.CreateDBInstanceReadReplicaMessage = {}));
    var CreateDBInstanceReadReplicaResult;
    (function(CreateDBInstanceReadReplicaResult2) {
      CreateDBInstanceReadReplicaResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBInstanceReadReplicaResult = exports.CreateDBInstanceReadReplicaResult || (exports.CreateDBInstanceReadReplicaResult = {}));
    var DBSubnetGroupNotAllowedFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSubnetGroupNotAllowedFault",
          $fault: "client"
        }, opts));
        this.name = "DBSubnetGroupNotAllowedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupNotAllowedFault.prototype);
      }
    };
    exports.DBSubnetGroupNotAllowedFault = DBSubnetGroupNotAllowedFault;
    var InvalidDBSubnetGroupFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBSubnetGroupFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBSubnetGroupFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetGroupFault.prototype);
      }
    };
    exports.InvalidDBSubnetGroupFault = InvalidDBSubnetGroupFault;
    var CreateDBParameterGroupMessage;
    (function(CreateDBParameterGroupMessage2) {
      CreateDBParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBParameterGroupMessage = exports.CreateDBParameterGroupMessage || (exports.CreateDBParameterGroupMessage = {}));
    var CreateDBParameterGroupResult;
    (function(CreateDBParameterGroupResult2) {
      CreateDBParameterGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBParameterGroupResult = exports.CreateDBParameterGroupResult || (exports.CreateDBParameterGroupResult = {}));
    var AuthScheme;
    (function(AuthScheme2) {
      AuthScheme2["SECRETS"] = "SECRETS";
    })(AuthScheme = exports.AuthScheme || (exports.AuthScheme = {}));
    var IAMAuthMode;
    (function(IAMAuthMode2) {
      IAMAuthMode2["DISABLED"] = "DISABLED";
      IAMAuthMode2["REQUIRED"] = "REQUIRED";
    })(IAMAuthMode = exports.IAMAuthMode || (exports.IAMAuthMode = {}));
    var UserAuthConfig;
    (function(UserAuthConfig2) {
      UserAuthConfig2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UserAuthConfig = exports.UserAuthConfig || (exports.UserAuthConfig = {}));
    var EngineFamily;
    (function(EngineFamily2) {
      EngineFamily2["MYSQL"] = "MYSQL";
      EngineFamily2["POSTGRESQL"] = "POSTGRESQL";
    })(EngineFamily = exports.EngineFamily || (exports.EngineFamily = {}));
    var CreateDBProxyRequest;
    (function(CreateDBProxyRequest2) {
      CreateDBProxyRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBProxyRequest = exports.CreateDBProxyRequest || (exports.CreateDBProxyRequest = {}));
    var UserAuthConfigInfo;
    (function(UserAuthConfigInfo2) {
      UserAuthConfigInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UserAuthConfigInfo = exports.UserAuthConfigInfo || (exports.UserAuthConfigInfo = {}));
    var DBProxyStatus;
    (function(DBProxyStatus2) {
      DBProxyStatus2["AVAILABLE"] = "available";
      DBProxyStatus2["CREATING"] = "creating";
      DBProxyStatus2["DELETING"] = "deleting";
      DBProxyStatus2["INCOMPATIBLE_NETWORK"] = "incompatible-network";
      DBProxyStatus2["INSUFFICIENT_RESOURCE_LIMITS"] = "insufficient-resource-limits";
      DBProxyStatus2["MODIFYING"] = "modifying";
      DBProxyStatus2["REACTIVATING"] = "reactivating";
      DBProxyStatus2["SUSPENDED"] = "suspended";
      DBProxyStatus2["SUSPENDING"] = "suspending";
    })(DBProxyStatus = exports.DBProxyStatus || (exports.DBProxyStatus = {}));
    var DBProxy;
    (function(DBProxy2) {
      DBProxy2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBProxy = exports.DBProxy || (exports.DBProxy = {}));
    var CreateDBProxyResponse;
    (function(CreateDBProxyResponse2) {
      CreateDBProxyResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBProxyResponse = exports.CreateDBProxyResponse || (exports.CreateDBProxyResponse = {}));
    var DBProxyAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyAlreadyExistsFault.prototype);
      }
    };
    exports.DBProxyAlreadyExistsFault = DBProxyAlreadyExistsFault;
    var DBProxyQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyQuotaExceededFault.prototype);
      }
    };
    exports.DBProxyQuotaExceededFault = DBProxyQuotaExceededFault;
    var DBProxyEndpointTargetRole;
    (function(DBProxyEndpointTargetRole2) {
      DBProxyEndpointTargetRole2["READ_ONLY"] = "READ_ONLY";
      DBProxyEndpointTargetRole2["READ_WRITE"] = "READ_WRITE";
    })(DBProxyEndpointTargetRole = exports.DBProxyEndpointTargetRole || (exports.DBProxyEndpointTargetRole = {}));
    var CreateDBProxyEndpointRequest;
    (function(CreateDBProxyEndpointRequest2) {
      CreateDBProxyEndpointRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBProxyEndpointRequest = exports.CreateDBProxyEndpointRequest || (exports.CreateDBProxyEndpointRequest = {}));
    var DBProxyEndpointStatus;
    (function(DBProxyEndpointStatus2) {
      DBProxyEndpointStatus2["AVAILABLE"] = "available";
      DBProxyEndpointStatus2["CREATING"] = "creating";
      DBProxyEndpointStatus2["DELETING"] = "deleting";
      DBProxyEndpointStatus2["INCOMPATIBLE_NETWORK"] = "incompatible-network";
      DBProxyEndpointStatus2["INSUFFICIENT_RESOURCE_LIMITS"] = "insufficient-resource-limits";
      DBProxyEndpointStatus2["MODIFYING"] = "modifying";
    })(DBProxyEndpointStatus = exports.DBProxyEndpointStatus || (exports.DBProxyEndpointStatus = {}));
    var DBProxyEndpoint;
    (function(DBProxyEndpoint2) {
      DBProxyEndpoint2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBProxyEndpoint = exports.DBProxyEndpoint || (exports.DBProxyEndpoint = {}));
    var CreateDBProxyEndpointResponse;
    (function(CreateDBProxyEndpointResponse2) {
      CreateDBProxyEndpointResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBProxyEndpointResponse = exports.CreateDBProxyEndpointResponse || (exports.CreateDBProxyEndpointResponse = {}));
    var DBProxyEndpointAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyEndpointAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyEndpointAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointAlreadyExistsFault.prototype);
      }
    };
    exports.DBProxyEndpointAlreadyExistsFault = DBProxyEndpointAlreadyExistsFault;
    var DBProxyEndpointQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyEndpointQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyEndpointQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointQuotaExceededFault.prototype);
      }
    };
    exports.DBProxyEndpointQuotaExceededFault = DBProxyEndpointQuotaExceededFault;
    var InvalidDBProxyStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBProxyStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBProxyStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBProxyStateFault.prototype);
      }
    };
    exports.InvalidDBProxyStateFault = InvalidDBProxyStateFault;
    var CreateDBSecurityGroupMessage;
    (function(CreateDBSecurityGroupMessage2) {
      CreateDBSecurityGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBSecurityGroupMessage = exports.CreateDBSecurityGroupMessage || (exports.CreateDBSecurityGroupMessage = {}));
    var CreateDBSecurityGroupResult;
    (function(CreateDBSecurityGroupResult2) {
      CreateDBSecurityGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBSecurityGroupResult = exports.CreateDBSecurityGroupResult || (exports.CreateDBSecurityGroupResult = {}));
    var DBSecurityGroupAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSecurityGroupAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBSecurityGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupAlreadyExistsFault.prototype);
      }
    };
    exports.DBSecurityGroupAlreadyExistsFault = DBSecurityGroupAlreadyExistsFault;
    var DBSecurityGroupNotSupportedFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSecurityGroupNotSupportedFault",
          $fault: "client"
        }, opts));
        this.name = "DBSecurityGroupNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupNotSupportedFault.prototype);
      }
    };
    exports.DBSecurityGroupNotSupportedFault = DBSecurityGroupNotSupportedFault;
    var DBSecurityGroupQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSecurityGroupQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBSecurityGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupQuotaExceededFault.prototype);
      }
    };
    exports.DBSecurityGroupQuotaExceededFault = DBSecurityGroupQuotaExceededFault;
    var CreateDBSnapshotMessage;
    (function(CreateDBSnapshotMessage2) {
      CreateDBSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBSnapshotMessage = exports.CreateDBSnapshotMessage || (exports.CreateDBSnapshotMessage = {}));
    var CreateDBSnapshotResult;
    (function(CreateDBSnapshotResult2) {
      CreateDBSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBSnapshotResult = exports.CreateDBSnapshotResult || (exports.CreateDBSnapshotResult = {}));
    var CreateDBSubnetGroupMessage;
    (function(CreateDBSubnetGroupMessage2) {
      CreateDBSubnetGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBSubnetGroupMessage = exports.CreateDBSubnetGroupMessage || (exports.CreateDBSubnetGroupMessage = {}));
    var CreateDBSubnetGroupResult;
    (function(CreateDBSubnetGroupResult2) {
      CreateDBSubnetGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateDBSubnetGroupResult = exports.CreateDBSubnetGroupResult || (exports.CreateDBSubnetGroupResult = {}));
    var DBSubnetGroupAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSubnetGroupAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "DBSubnetGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupAlreadyExistsFault.prototype);
      }
    };
    exports.DBSubnetGroupAlreadyExistsFault = DBSubnetGroupAlreadyExistsFault;
    var DBSubnetGroupQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSubnetGroupQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBSubnetGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupQuotaExceededFault.prototype);
      }
    };
    exports.DBSubnetGroupQuotaExceededFault = DBSubnetGroupQuotaExceededFault;
    var DBSubnetQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBSubnetQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBSubnetQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetQuotaExceededFault.prototype);
      }
    };
    exports.DBSubnetQuotaExceededFault = DBSubnetQuotaExceededFault;
    var CreateEventSubscriptionMessage;
    (function(CreateEventSubscriptionMessage2) {
      CreateEventSubscriptionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateEventSubscriptionMessage = exports.CreateEventSubscriptionMessage || (exports.CreateEventSubscriptionMessage = {}));
    var CreateEventSubscriptionResult;
    (function(CreateEventSubscriptionResult2) {
      CreateEventSubscriptionResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateEventSubscriptionResult = exports.CreateEventSubscriptionResult || (exports.CreateEventSubscriptionResult = {}));
    var EventSubscriptionQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "EventSubscriptionQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "EventSubscriptionQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, EventSubscriptionQuotaExceededFault.prototype);
      }
    };
    exports.EventSubscriptionQuotaExceededFault = EventSubscriptionQuotaExceededFault;
    var SNSInvalidTopicFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SNSInvalidTopicFault",
          $fault: "client"
        }, opts));
        this.name = "SNSInvalidTopicFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSInvalidTopicFault.prototype);
      }
    };
    exports.SNSInvalidTopicFault = SNSInvalidTopicFault;
    var SNSNoAuthorizationFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SNSNoAuthorizationFault",
          $fault: "client"
        }, opts));
        this.name = "SNSNoAuthorizationFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSNoAuthorizationFault.prototype);
      }
    };
    exports.SNSNoAuthorizationFault = SNSNoAuthorizationFault;
    var SNSTopicArnNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SNSTopicArnNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "SNSTopicArnNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSTopicArnNotFoundFault.prototype);
      }
    };
    exports.SNSTopicArnNotFoundFault = SNSTopicArnNotFoundFault;
    var SubscriptionAlreadyExistFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SubscriptionAlreadyExistFault",
          $fault: "client"
        }, opts));
        this.name = "SubscriptionAlreadyExistFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionAlreadyExistFault.prototype);
      }
    };
    exports.SubscriptionAlreadyExistFault = SubscriptionAlreadyExistFault;
    var SubscriptionCategoryNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SubscriptionCategoryNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "SubscriptionCategoryNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionCategoryNotFoundFault.prototype);
      }
    };
    exports.SubscriptionCategoryNotFoundFault = SubscriptionCategoryNotFoundFault;
    var CreateGlobalClusterMessage;
    (function(CreateGlobalClusterMessage2) {
      CreateGlobalClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateGlobalClusterMessage = exports.CreateGlobalClusterMessage || (exports.CreateGlobalClusterMessage = {}));
    var FailoverStatus;
    (function(FailoverStatus2) {
      FailoverStatus2["CANCELLING"] = "cancelling";
      FailoverStatus2["FAILING_OVER"] = "failing-over";
      FailoverStatus2["PENDING"] = "pending";
    })(FailoverStatus = exports.FailoverStatus || (exports.FailoverStatus = {}));
    var FailoverState;
    (function(FailoverState2) {
      FailoverState2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FailoverState = exports.FailoverState || (exports.FailoverState = {}));
    var GlobalClusterMember;
    (function(GlobalClusterMember2) {
      GlobalClusterMember2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalClusterMember = exports.GlobalClusterMember || (exports.GlobalClusterMember = {}));
    var GlobalCluster;
    (function(GlobalCluster2) {
      GlobalCluster2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalCluster = exports.GlobalCluster || (exports.GlobalCluster = {}));
    var CreateGlobalClusterResult;
    (function(CreateGlobalClusterResult2) {
      CreateGlobalClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateGlobalClusterResult = exports.CreateGlobalClusterResult || (exports.CreateGlobalClusterResult = {}));
    var GlobalClusterAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "GlobalClusterAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "GlobalClusterAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterAlreadyExistsFault.prototype);
      }
    };
    exports.GlobalClusterAlreadyExistsFault = GlobalClusterAlreadyExistsFault;
    var GlobalClusterQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "GlobalClusterQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "GlobalClusterQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterQuotaExceededFault.prototype);
      }
    };
    exports.GlobalClusterQuotaExceededFault = GlobalClusterQuotaExceededFault;
    var CreateOptionGroupMessage;
    (function(CreateOptionGroupMessage2) {
      CreateOptionGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateOptionGroupMessage = exports.CreateOptionGroupMessage || (exports.CreateOptionGroupMessage = {}));
    var CreateOptionGroupResult;
    (function(CreateOptionGroupResult2) {
      CreateOptionGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateOptionGroupResult = exports.CreateOptionGroupResult || (exports.CreateOptionGroupResult = {}));
    var CustomDBEngineVersionNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CustomDBEngineVersionNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "CustomDBEngineVersionNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionNotFoundFault.prototype);
      }
    };
    exports.CustomDBEngineVersionNotFoundFault = CustomDBEngineVersionNotFoundFault;
    var DeleteCustomDBEngineVersionMessage;
    (function(DeleteCustomDBEngineVersionMessage2) {
      DeleteCustomDBEngineVersionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteCustomDBEngineVersionMessage = exports.DeleteCustomDBEngineVersionMessage || (exports.DeleteCustomDBEngineVersionMessage = {}));
    var InvalidCustomDBEngineVersionStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidCustomDBEngineVersionStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidCustomDBEngineVersionStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCustomDBEngineVersionStateFault.prototype);
      }
    };
    exports.InvalidCustomDBEngineVersionStateFault = InvalidCustomDBEngineVersionStateFault;
    var DeleteDBClusterMessage;
    (function(DeleteDBClusterMessage2) {
      DeleteDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBClusterMessage = exports.DeleteDBClusterMessage || (exports.DeleteDBClusterMessage = {}));
    var DeleteDBClusterResult;
    (function(DeleteDBClusterResult2) {
      DeleteDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBClusterResult = exports.DeleteDBClusterResult || (exports.DeleteDBClusterResult = {}));
    var DBClusterEndpointNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterEndpointNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterEndpointNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointNotFoundFault.prototype);
      }
    };
    exports.DBClusterEndpointNotFoundFault = DBClusterEndpointNotFoundFault;
    var DeleteDBClusterEndpointMessage;
    (function(DeleteDBClusterEndpointMessage2) {
      DeleteDBClusterEndpointMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBClusterEndpointMessage = exports.DeleteDBClusterEndpointMessage || (exports.DeleteDBClusterEndpointMessage = {}));
    var InvalidDBClusterEndpointStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBClusterEndpointStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBClusterEndpointStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterEndpointStateFault.prototype);
      }
    };
    exports.InvalidDBClusterEndpointStateFault = InvalidDBClusterEndpointStateFault;
    var DeleteDBClusterParameterGroupMessage;
    (function(DeleteDBClusterParameterGroupMessage2) {
      DeleteDBClusterParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBClusterParameterGroupMessage = exports.DeleteDBClusterParameterGroupMessage || (exports.DeleteDBClusterParameterGroupMessage = {}));
    var InvalidDBParameterGroupStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBParameterGroupStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBParameterGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBParameterGroupStateFault.prototype);
      }
    };
    exports.InvalidDBParameterGroupStateFault = InvalidDBParameterGroupStateFault;
    var DeleteDBClusterSnapshotMessage;
    (function(DeleteDBClusterSnapshotMessage2) {
      DeleteDBClusterSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBClusterSnapshotMessage = exports.DeleteDBClusterSnapshotMessage || (exports.DeleteDBClusterSnapshotMessage = {}));
    var DeleteDBClusterSnapshotResult;
    (function(DeleteDBClusterSnapshotResult2) {
      DeleteDBClusterSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBClusterSnapshotResult = exports.DeleteDBClusterSnapshotResult || (exports.DeleteDBClusterSnapshotResult = {}));
    var DBInstanceAutomatedBackupQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBInstanceAutomatedBackupQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "DBInstanceAutomatedBackupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAutomatedBackupQuotaExceededFault.prototype);
      }
    };
    exports.DBInstanceAutomatedBackupQuotaExceededFault = DBInstanceAutomatedBackupQuotaExceededFault;
    var DeleteDBInstanceMessage;
    (function(DeleteDBInstanceMessage2) {
      DeleteDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBInstanceMessage = exports.DeleteDBInstanceMessage || (exports.DeleteDBInstanceMessage = {}));
    var DeleteDBInstanceResult;
    (function(DeleteDBInstanceResult2) {
      DeleteDBInstanceResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBInstanceResult = exports.DeleteDBInstanceResult || (exports.DeleteDBInstanceResult = {}));
    var DBInstanceAutomatedBackupNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBInstanceAutomatedBackupNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBInstanceAutomatedBackupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAutomatedBackupNotFoundFault.prototype);
      }
    };
    exports.DBInstanceAutomatedBackupNotFoundFault = DBInstanceAutomatedBackupNotFoundFault;
    var DeleteDBInstanceAutomatedBackupMessage;
    (function(DeleteDBInstanceAutomatedBackupMessage2) {
      DeleteDBInstanceAutomatedBackupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBInstanceAutomatedBackupMessage = exports.DeleteDBInstanceAutomatedBackupMessage || (exports.DeleteDBInstanceAutomatedBackupMessage = {}));
    var RestoreWindow;
    (function(RestoreWindow2) {
      RestoreWindow2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreWindow = exports.RestoreWindow || (exports.RestoreWindow = {}));
    var DBInstanceAutomatedBackup;
    (function(DBInstanceAutomatedBackup2) {
      DBInstanceAutomatedBackup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBInstanceAutomatedBackup = exports.DBInstanceAutomatedBackup || (exports.DBInstanceAutomatedBackup = {}));
    var DeleteDBInstanceAutomatedBackupResult;
    (function(DeleteDBInstanceAutomatedBackupResult2) {
      DeleteDBInstanceAutomatedBackupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBInstanceAutomatedBackupResult = exports.DeleteDBInstanceAutomatedBackupResult || (exports.DeleteDBInstanceAutomatedBackupResult = {}));
    var InvalidDBInstanceAutomatedBackupStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBInstanceAutomatedBackupStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBInstanceAutomatedBackupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBInstanceAutomatedBackupStateFault.prototype);
      }
    };
    exports.InvalidDBInstanceAutomatedBackupStateFault = InvalidDBInstanceAutomatedBackupStateFault;
    var DeleteDBParameterGroupMessage;
    (function(DeleteDBParameterGroupMessage2) {
      DeleteDBParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBParameterGroupMessage = exports.DeleteDBParameterGroupMessage || (exports.DeleteDBParameterGroupMessage = {}));
    var DeleteDBProxyRequest;
    (function(DeleteDBProxyRequest2) {
      DeleteDBProxyRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBProxyRequest = exports.DeleteDBProxyRequest || (exports.DeleteDBProxyRequest = {}));
    var DeleteDBProxyResponse;
    (function(DeleteDBProxyResponse2) {
      DeleteDBProxyResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBProxyResponse = exports.DeleteDBProxyResponse || (exports.DeleteDBProxyResponse = {}));
    var DBProxyEndpointNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyEndpointNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyEndpointNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointNotFoundFault.prototype);
      }
    };
    exports.DBProxyEndpointNotFoundFault = DBProxyEndpointNotFoundFault;
    var DeleteDBProxyEndpointRequest;
    (function(DeleteDBProxyEndpointRequest2) {
      DeleteDBProxyEndpointRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBProxyEndpointRequest = exports.DeleteDBProxyEndpointRequest || (exports.DeleteDBProxyEndpointRequest = {}));
    var DeleteDBProxyEndpointResponse;
    (function(DeleteDBProxyEndpointResponse2) {
      DeleteDBProxyEndpointResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBProxyEndpointResponse = exports.DeleteDBProxyEndpointResponse || (exports.DeleteDBProxyEndpointResponse = {}));
    var InvalidDBProxyEndpointStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBProxyEndpointStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBProxyEndpointStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBProxyEndpointStateFault.prototype);
      }
    };
    exports.InvalidDBProxyEndpointStateFault = InvalidDBProxyEndpointStateFault;
    var DeleteDBSecurityGroupMessage;
    (function(DeleteDBSecurityGroupMessage2) {
      DeleteDBSecurityGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBSecurityGroupMessage = exports.DeleteDBSecurityGroupMessage || (exports.DeleteDBSecurityGroupMessage = {}));
    var DeleteDBSnapshotMessage;
    (function(DeleteDBSnapshotMessage2) {
      DeleteDBSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBSnapshotMessage = exports.DeleteDBSnapshotMessage || (exports.DeleteDBSnapshotMessage = {}));
    var DeleteDBSnapshotResult;
    (function(DeleteDBSnapshotResult2) {
      DeleteDBSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBSnapshotResult = exports.DeleteDBSnapshotResult || (exports.DeleteDBSnapshotResult = {}));
    var DeleteDBSubnetGroupMessage;
    (function(DeleteDBSubnetGroupMessage2) {
      DeleteDBSubnetGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteDBSubnetGroupMessage = exports.DeleteDBSubnetGroupMessage || (exports.DeleteDBSubnetGroupMessage = {}));
    var InvalidDBSubnetStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBSubnetStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBSubnetStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetStateFault.prototype);
      }
    };
    exports.InvalidDBSubnetStateFault = InvalidDBSubnetStateFault;
    var DeleteEventSubscriptionMessage;
    (function(DeleteEventSubscriptionMessage2) {
      DeleteEventSubscriptionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteEventSubscriptionMessage = exports.DeleteEventSubscriptionMessage || (exports.DeleteEventSubscriptionMessage = {}));
    var DeleteEventSubscriptionResult;
    (function(DeleteEventSubscriptionResult2) {
      DeleteEventSubscriptionResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteEventSubscriptionResult = exports.DeleteEventSubscriptionResult || (exports.DeleteEventSubscriptionResult = {}));
    var InvalidEventSubscriptionStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidEventSubscriptionStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidEventSubscriptionStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEventSubscriptionStateFault.prototype);
      }
    };
    exports.InvalidEventSubscriptionStateFault = InvalidEventSubscriptionStateFault;
    var DeleteGlobalClusterMessage;
    (function(DeleteGlobalClusterMessage2) {
      DeleteGlobalClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteGlobalClusterMessage = exports.DeleteGlobalClusterMessage || (exports.DeleteGlobalClusterMessage = {}));
    var DeleteGlobalClusterResult;
    (function(DeleteGlobalClusterResult2) {
      DeleteGlobalClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteGlobalClusterResult = exports.DeleteGlobalClusterResult || (exports.DeleteGlobalClusterResult = {}));
    var DeleteOptionGroupMessage;
    (function(DeleteOptionGroupMessage2) {
      DeleteOptionGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteOptionGroupMessage = exports.DeleteOptionGroupMessage || (exports.DeleteOptionGroupMessage = {}));
    var InvalidOptionGroupStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidOptionGroupStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidOptionGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOptionGroupStateFault.prototype);
      }
    };
    exports.InvalidOptionGroupStateFault = InvalidOptionGroupStateFault;
    var DBProxyTargetNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyTargetNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyTargetNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetNotFoundFault.prototype);
      }
    };
    exports.DBProxyTargetNotFoundFault = DBProxyTargetNotFoundFault;
    var DeregisterDBProxyTargetsRequest;
    (function(DeregisterDBProxyTargetsRequest2) {
      DeregisterDBProxyTargetsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeregisterDBProxyTargetsRequest = exports.DeregisterDBProxyTargetsRequest || (exports.DeregisterDBProxyTargetsRequest = {}));
    var DeregisterDBProxyTargetsResponse;
    (function(DeregisterDBProxyTargetsResponse2) {
      DeregisterDBProxyTargetsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeregisterDBProxyTargetsResponse = exports.DeregisterDBProxyTargetsResponse || (exports.DeregisterDBProxyTargetsResponse = {}));
    var DescribeAccountAttributesMessage;
    (function(DescribeAccountAttributesMessage2) {
      DescribeAccountAttributesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeAccountAttributesMessage = exports.DescribeAccountAttributesMessage || (exports.DescribeAccountAttributesMessage = {}));
    var Certificate;
    (function(Certificate2) {
      Certificate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Certificate = exports.Certificate || (exports.Certificate = {}));
    var CertificateMessage;
    (function(CertificateMessage2) {
      CertificateMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CertificateMessage = exports.CertificateMessage || (exports.CertificateMessage = {}));
    var CertificateNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "CertificateNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "CertificateNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CertificateNotFoundFault.prototype);
      }
    };
    exports.CertificateNotFoundFault = CertificateNotFoundFault;
    var Filter;
    (function(Filter2) {
      Filter2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Filter = exports.Filter || (exports.Filter = {}));
    var DescribeCertificatesMessage;
    (function(DescribeCertificatesMessage2) {
      DescribeCertificatesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeCertificatesMessage = exports.DescribeCertificatesMessage || (exports.DescribeCertificatesMessage = {}));
    var DBClusterBacktrackMessage;
    (function(DBClusterBacktrackMessage2) {
      DBClusterBacktrackMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterBacktrackMessage = exports.DBClusterBacktrackMessage || (exports.DBClusterBacktrackMessage = {}));
    var DBClusterBacktrackNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterBacktrackNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterBacktrackNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterBacktrackNotFoundFault.prototype);
      }
    };
    exports.DBClusterBacktrackNotFoundFault = DBClusterBacktrackNotFoundFault;
    var DescribeDBClusterBacktracksMessage;
    (function(DescribeDBClusterBacktracksMessage2) {
      DescribeDBClusterBacktracksMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClusterBacktracksMessage = exports.DescribeDBClusterBacktracksMessage || (exports.DescribeDBClusterBacktracksMessage = {}));
    var DBClusterEndpointMessage;
    (function(DBClusterEndpointMessage2) {
      DBClusterEndpointMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterEndpointMessage = exports.DBClusterEndpointMessage || (exports.DBClusterEndpointMessage = {}));
    var DescribeDBClusterEndpointsMessage;
    (function(DescribeDBClusterEndpointsMessage2) {
      DescribeDBClusterEndpointsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClusterEndpointsMessage = exports.DescribeDBClusterEndpointsMessage || (exports.DescribeDBClusterEndpointsMessage = {}));
    var DBClusterParameterGroupsMessage;
    (function(DBClusterParameterGroupsMessage2) {
      DBClusterParameterGroupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterParameterGroupsMessage = exports.DBClusterParameterGroupsMessage || (exports.DBClusterParameterGroupsMessage = {}));
    var DescribeDBClusterParameterGroupsMessage;
    (function(DescribeDBClusterParameterGroupsMessage2) {
      DescribeDBClusterParameterGroupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClusterParameterGroupsMessage = exports.DescribeDBClusterParameterGroupsMessage || (exports.DescribeDBClusterParameterGroupsMessage = {}));
    var Parameter;
    (function(Parameter2) {
      Parameter2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Parameter = exports.Parameter || (exports.Parameter = {}));
    var DBClusterParameterGroupDetails;
    (function(DBClusterParameterGroupDetails2) {
      DBClusterParameterGroupDetails2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterParameterGroupDetails = exports.DBClusterParameterGroupDetails || (exports.DBClusterParameterGroupDetails = {}));
    var DescribeDBClusterParametersMessage;
    (function(DescribeDBClusterParametersMessage2) {
      DescribeDBClusterParametersMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClusterParametersMessage = exports.DescribeDBClusterParametersMessage || (exports.DescribeDBClusterParametersMessage = {}));
    var DBClusterMessage;
    (function(DBClusterMessage2) {
      DBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterMessage = exports.DBClusterMessage || (exports.DBClusterMessage = {}));
    var DescribeDBClustersMessage;
    (function(DescribeDBClustersMessage2) {
      DescribeDBClustersMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClustersMessage = exports.DescribeDBClustersMessage || (exports.DescribeDBClustersMessage = {}));
    var DescribeDBClusterSnapshotAttributesMessage;
    (function(DescribeDBClusterSnapshotAttributesMessage2) {
      DescribeDBClusterSnapshotAttributesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClusterSnapshotAttributesMessage = exports.DescribeDBClusterSnapshotAttributesMessage || (exports.DescribeDBClusterSnapshotAttributesMessage = {}));
    var DBClusterSnapshotAttribute;
    (function(DBClusterSnapshotAttribute2) {
      DBClusterSnapshotAttribute2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterSnapshotAttribute = exports.DBClusterSnapshotAttribute || (exports.DBClusterSnapshotAttribute = {}));
    var DBClusterSnapshotAttributesResult;
    (function(DBClusterSnapshotAttributesResult2) {
      DBClusterSnapshotAttributesResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterSnapshotAttributesResult = exports.DBClusterSnapshotAttributesResult || (exports.DBClusterSnapshotAttributesResult = {}));
    var DescribeDBClusterSnapshotAttributesResult;
    (function(DescribeDBClusterSnapshotAttributesResult2) {
      DescribeDBClusterSnapshotAttributesResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClusterSnapshotAttributesResult = exports.DescribeDBClusterSnapshotAttributesResult || (exports.DescribeDBClusterSnapshotAttributesResult = {}));
    var DBClusterSnapshotMessage;
    (function(DBClusterSnapshotMessage2) {
      DBClusterSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterSnapshotMessage = exports.DBClusterSnapshotMessage || (exports.DBClusterSnapshotMessage = {}));
    var DescribeDBClusterSnapshotsMessage;
    (function(DescribeDBClusterSnapshotsMessage2) {
      DescribeDBClusterSnapshotsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBClusterSnapshotsMessage = exports.DescribeDBClusterSnapshotsMessage || (exports.DescribeDBClusterSnapshotsMessage = {}));
    var DBEngineVersionMessage;
    (function(DBEngineVersionMessage2) {
      DBEngineVersionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBEngineVersionMessage = exports.DBEngineVersionMessage || (exports.DBEngineVersionMessage = {}));
    var DescribeDBEngineVersionsMessage;
    (function(DescribeDBEngineVersionsMessage2) {
      DescribeDBEngineVersionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBEngineVersionsMessage = exports.DescribeDBEngineVersionsMessage || (exports.DescribeDBEngineVersionsMessage = {}));
    var DBInstanceAutomatedBackupMessage;
    (function(DBInstanceAutomatedBackupMessage2) {
      DBInstanceAutomatedBackupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBInstanceAutomatedBackupMessage = exports.DBInstanceAutomatedBackupMessage || (exports.DBInstanceAutomatedBackupMessage = {}));
    var DescribeDBInstanceAutomatedBackupsMessage;
    (function(DescribeDBInstanceAutomatedBackupsMessage2) {
      DescribeDBInstanceAutomatedBackupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBInstanceAutomatedBackupsMessage = exports.DescribeDBInstanceAutomatedBackupsMessage || (exports.DescribeDBInstanceAutomatedBackupsMessage = {}));
    var DBInstanceMessage;
    (function(DBInstanceMessage2) {
      DBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBInstanceMessage = exports.DBInstanceMessage || (exports.DBInstanceMessage = {}));
    var DescribeDBInstancesMessage;
    (function(DescribeDBInstancesMessage2) {
      DescribeDBInstancesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBInstancesMessage = exports.DescribeDBInstancesMessage || (exports.DescribeDBInstancesMessage = {}));
    var DescribeDBLogFilesMessage;
    (function(DescribeDBLogFilesMessage2) {
      DescribeDBLogFilesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBLogFilesMessage = exports.DescribeDBLogFilesMessage || (exports.DescribeDBLogFilesMessage = {}));
    var DescribeDBLogFilesDetails;
    (function(DescribeDBLogFilesDetails2) {
      DescribeDBLogFilesDetails2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBLogFilesDetails = exports.DescribeDBLogFilesDetails || (exports.DescribeDBLogFilesDetails = {}));
    var DescribeDBLogFilesResponse;
    (function(DescribeDBLogFilesResponse2) {
      DescribeDBLogFilesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBLogFilesResponse = exports.DescribeDBLogFilesResponse || (exports.DescribeDBLogFilesResponse = {}));
    var DBParameterGroupsMessage;
    (function(DBParameterGroupsMessage2) {
      DBParameterGroupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBParameterGroupsMessage = exports.DBParameterGroupsMessage || (exports.DBParameterGroupsMessage = {}));
    var DescribeDBParameterGroupsMessage;
    (function(DescribeDBParameterGroupsMessage2) {
      DescribeDBParameterGroupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBParameterGroupsMessage = exports.DescribeDBParameterGroupsMessage || (exports.DescribeDBParameterGroupsMessage = {}));
    var DBParameterGroupDetails;
    (function(DBParameterGroupDetails2) {
      DBParameterGroupDetails2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBParameterGroupDetails = exports.DBParameterGroupDetails || (exports.DBParameterGroupDetails = {}));
    var DescribeDBParametersMessage;
    (function(DescribeDBParametersMessage2) {
      DescribeDBParametersMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBParametersMessage = exports.DescribeDBParametersMessage || (exports.DescribeDBParametersMessage = {}));
    var DescribeDBProxiesRequest;
    (function(DescribeDBProxiesRequest2) {
      DescribeDBProxiesRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxiesRequest = exports.DescribeDBProxiesRequest || (exports.DescribeDBProxiesRequest = {}));
    var DescribeDBProxiesResponse;
    (function(DescribeDBProxiesResponse2) {
      DescribeDBProxiesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxiesResponse = exports.DescribeDBProxiesResponse || (exports.DescribeDBProxiesResponse = {}));
    var DescribeDBProxyEndpointsRequest;
    (function(DescribeDBProxyEndpointsRequest2) {
      DescribeDBProxyEndpointsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxyEndpointsRequest = exports.DescribeDBProxyEndpointsRequest || (exports.DescribeDBProxyEndpointsRequest = {}));
    var DescribeDBProxyEndpointsResponse;
    (function(DescribeDBProxyEndpointsResponse2) {
      DescribeDBProxyEndpointsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxyEndpointsResponse = exports.DescribeDBProxyEndpointsResponse || (exports.DescribeDBProxyEndpointsResponse = {}));
    var DescribeDBProxyTargetGroupsRequest;
    (function(DescribeDBProxyTargetGroupsRequest2) {
      DescribeDBProxyTargetGroupsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxyTargetGroupsRequest = exports.DescribeDBProxyTargetGroupsRequest || (exports.DescribeDBProxyTargetGroupsRequest = {}));
    var ConnectionPoolConfigurationInfo;
    (function(ConnectionPoolConfigurationInfo2) {
      ConnectionPoolConfigurationInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ConnectionPoolConfigurationInfo = exports.ConnectionPoolConfigurationInfo || (exports.ConnectionPoolConfigurationInfo = {}));
    var DBProxyTargetGroup;
    (function(DBProxyTargetGroup2) {
      DBProxyTargetGroup2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBProxyTargetGroup = exports.DBProxyTargetGroup || (exports.DBProxyTargetGroup = {}));
    var DescribeDBProxyTargetGroupsResponse;
    (function(DescribeDBProxyTargetGroupsResponse2) {
      DescribeDBProxyTargetGroupsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxyTargetGroupsResponse = exports.DescribeDBProxyTargetGroupsResponse || (exports.DescribeDBProxyTargetGroupsResponse = {}));
    var DescribeDBProxyTargetsRequest;
    (function(DescribeDBProxyTargetsRequest2) {
      DescribeDBProxyTargetsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxyTargetsRequest = exports.DescribeDBProxyTargetsRequest || (exports.DescribeDBProxyTargetsRequest = {}));
    var TargetRole;
    (function(TargetRole2) {
      TargetRole2["READ_ONLY"] = "READ_ONLY";
      TargetRole2["READ_WRITE"] = "READ_WRITE";
      TargetRole2["UNKNOWN"] = "UNKNOWN";
    })(TargetRole = exports.TargetRole || (exports.TargetRole = {}));
    var TargetHealthReason;
    (function(TargetHealthReason2) {
      TargetHealthReason2["AUTH_FAILURE"] = "AUTH_FAILURE";
      TargetHealthReason2["CONNECTION_FAILED"] = "CONNECTION_FAILED";
      TargetHealthReason2["INVALID_REPLICATION_STATE"] = "INVALID_REPLICATION_STATE";
      TargetHealthReason2["PENDING_PROXY_CAPACITY"] = "PENDING_PROXY_CAPACITY";
      TargetHealthReason2["UNREACHABLE"] = "UNREACHABLE";
    })(TargetHealthReason = exports.TargetHealthReason || (exports.TargetHealthReason = {}));
    var TargetState;
    (function(TargetState2) {
      TargetState2["available"] = "AVAILABLE";
      TargetState2["registering"] = "REGISTERING";
      TargetState2["unavailable"] = "UNAVAILABLE";
    })(TargetState = exports.TargetState || (exports.TargetState = {}));
    var TargetHealth;
    (function(TargetHealth2) {
      TargetHealth2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TargetHealth = exports.TargetHealth || (exports.TargetHealth = {}));
    var TargetType;
    (function(TargetType2) {
      TargetType2["RDS_INSTANCE"] = "RDS_INSTANCE";
      TargetType2["RDS_SERVERLESS_ENDPOINT"] = "RDS_SERVERLESS_ENDPOINT";
      TargetType2["TRACKED_CLUSTER"] = "TRACKED_CLUSTER";
    })(TargetType = exports.TargetType || (exports.TargetType = {}));
    var DBProxyTarget;
    (function(DBProxyTarget2) {
      DBProxyTarget2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBProxyTarget = exports.DBProxyTarget || (exports.DBProxyTarget = {}));
    var DescribeDBProxyTargetsResponse;
    (function(DescribeDBProxyTargetsResponse2) {
      DescribeDBProxyTargetsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBProxyTargetsResponse = exports.DescribeDBProxyTargetsResponse || (exports.DescribeDBProxyTargetsResponse = {}));
    var DBSecurityGroupMessage;
    (function(DBSecurityGroupMessage2) {
      DBSecurityGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSecurityGroupMessage = exports.DBSecurityGroupMessage || (exports.DBSecurityGroupMessage = {}));
    var DescribeDBSecurityGroupsMessage;
    (function(DescribeDBSecurityGroupsMessage2) {
      DescribeDBSecurityGroupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBSecurityGroupsMessage = exports.DescribeDBSecurityGroupsMessage || (exports.DescribeDBSecurityGroupsMessage = {}));
    var DescribeDBSnapshotAttributesMessage;
    (function(DescribeDBSnapshotAttributesMessage2) {
      DescribeDBSnapshotAttributesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBSnapshotAttributesMessage = exports.DescribeDBSnapshotAttributesMessage || (exports.DescribeDBSnapshotAttributesMessage = {}));
    var DBSnapshotAttribute;
    (function(DBSnapshotAttribute2) {
      DBSnapshotAttribute2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSnapshotAttribute = exports.DBSnapshotAttribute || (exports.DBSnapshotAttribute = {}));
  }
});

// node_modules/@aws-sdk/protocol-http/node_modules/tslib/tslib.js
var require_tslib5 = __commonJS({
  "node_modules/@aws-sdk/protocol-http/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest(__spreadProps(__spreadValues({}, this), {
          headers: __spreadValues({}, this.headers)
        }));
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return __spreadProps(__spreadValues({}, carry), {
          [paramName]: Array.isArray(param) ? [...param] : param
        });
      }, {});
    }
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib5();
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  "node_modules/entities/lib/maps/entities.json"(exports, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
  }
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  "node_modules/entities/lib/maps/legacy.json"(exports, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
  }
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  "node_modules/entities/lib/maps/xml.json"(exports, module2) {
    module2.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
  }
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  "node_modules/entities/lib/maps/decode.json"(exports, module2) {
    module2.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
  }
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  "node_modules/entities/lib/decode_codepoint.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var decode_json_1 = __importDefault(require_decode());
    var fromCodePoint = String.fromCodePoint || function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function decodeCodePoint(codePoint) {
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return "\uFFFD";
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports.default = decodeCodePoint;
  }
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  "node_modules/entities/lib/decode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
    var entities_json_1 = __importDefault(require_entities());
    var legacy_json_1 = __importDefault(require_legacy());
    var xml_json_1 = __importDefault(require_xml());
    var decode_codepoint_1 = __importDefault(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports.decodeXML = getStrictDecoder(xml_json_1.default);
    exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function(str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function(a, b) {
      return a < b ? 1 : -1;
    };
    exports.decodeHTML = function() {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ";?";
          j++;
        } else {
          keys[i] += ";";
        }
      }
      var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== ";")
          str += ";";
        return replace(str);
      }
      return function(str) {
        return String(str).replace(re, replacer);
      };
    }();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === "#") {
          var secondChar = str.charAt(2);
          if (secondChar === "X" || secondChar === "x") {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  }
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  "node_modules/entities/lib/encode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
    var xml_json_1 = __importDefault(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj).sort().reduce(function(inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
      }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push("\\" + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3)
          continue;
        single.splice(start, count, single[start] + "-" + single[end]);
      }
      multiple.unshift("[" + single.join("") + "]");
      return new RegExp(multiple.join("|"), "g");
    }
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = String.prototype.codePointAt != null ? function(str) {
      return str.codePointAt(0);
    } : function(c) {
      return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
    };
    function singleCharReplacer(c) {
      return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
      return function(data) {
        return data.replace(re, function(name) {
          return inverse[name];
        }).replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function(data) {
        return data.replace(reEscapeChars, function(c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  }
});

// node_modules/entities/lib/index.js
var require_lib = __commonJS({
  "node_modules/entities/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
      return encode_2.encodeXML;
    } });
    Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
      return encode_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
      return encode_2.escape;
    } });
    Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
      return encode_2.escapeUTF8;
    } });
    Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    var decode_2 = require_decode2();
    Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
    Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.buildOptions = function(options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions;
      }
      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== void 0) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };
    exports.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === "function") {
        return !!arrayMode(tagName, parentTagName);
      }
      return arrayMode === "strict";
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/node2json.js"(exports) {
    "use strict";
    var util = require_util();
    var convertToJson = function(node, options, parentTagName) {
      const jObj = {};
      if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : "";
      }
      if (util.isExist(node.val) && !(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }
      util.merge(jObj, node.attrsMap, options.arrayMode);
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray = options.arrayMode === true && typeof result === "object" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }
      return jObj;
    };
    exports.convertToJson = convertToJson;
  }
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlNode.js"(exports, module2) {
    "use strict";
    module2.exports = function(tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {};
      this.attrsMap = {};
      this.val = val;
      this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };
  }
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlstr2xmlnode.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var xmlNode = require_xmlNode();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      tagValueProcessor: function(a, tagName) {
        return a;
      },
      attrValueProcessor: function(a, attrName) {
        return a;
      },
      stopNodes: []
    };
    exports.defaultOptions = defaultOptions;
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "ignoreNameSpace",
      "allowBooleanAttributes",
      "parseNodeValue",
      "parseAttributeValue",
      "arrayMode",
      "trimValues",
      "cdataTagName",
      "cdataPositionChar",
      "tagValueProcessor",
      "attrValueProcessor",
      "parseTrueNumberOnly",
      "stopNodes"
    ];
    exports.props = props;
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }
      return val;
    }
    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === "string") {
        let parsed;
        if (val.trim() === "" || isNaN(val)) {
          parsed = val === "true" ? true : val === "false" ? false : val;
        } else {
          if (val.indexOf("0x") !== -1) {
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf(".") !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\.?0+$/, "");
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === "string") {
        attrStr = attrStr.replace(/\r?\n/g, " ");
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== void 0) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.parseTrueNumberOnly);
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var getTraversalObj = function(xmlData, options) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      options = buildOptions(options, defaultOptions, props);
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (currentNode) {
              if (currentNode.val) {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
              } else {
                currentNode.val = processTagValue(tagName, textData, options);
              }
            }
            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == void 0) {
                currentNode.attrsMap = {};
              }
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
            const tagExp = xmlData.substring(i, closeIndex);
            if (tagExp.indexOf("[") >= 0) {
              i = xmlData.indexOf("]>", i) + 1;
            } else {
              i = closeIndex;
            }
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            if (textData) {
              currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              textData = "";
            }
            if (options.cdataTagName) {
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || "") + (tagExp || "");
            }
            i = closeIndex + 2;
          } else {
            const result = closingIndexForOpeningTag(xmlData, i + 1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(" ");
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if (separatorIndex !== -1) {
              tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
              tagExp = tagExp.substr(separatorIndex + 1);
            }
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              }
            }
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              const childNode = new xmlNode(tagName, currentNode, "");
              if (tagName !== tagExp) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            } else {
              const childNode = new xmlNode(tagName, currentNode);
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex = closeIndex;
              }
              if (tagName !== tagExp && shouldBuildAttributesMap) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };
    function closingIndexForOpeningTag(data, i) {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === ">") {
          return {
            data: tagExp,
            index
          };
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    exports.getTraversalObj = getTraversalObj;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false
    };
    var props = ["allowBooleanAttributes"];
    exports.validate = function(xmlData, options) {
      options = util.buildOptions(options, defaultOptions, props);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, i));
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject("InvalidTag", "Closing tag '" + otg + "' is expected inplace of '" + tagName + "'.", getLineNumberForPosition(xmlData, i));
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags, null, 4).replace(/\r?\n/g, "") + "' found.", 1);
      }
      return true;
    };
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            continue;
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(attrStr, matches[i][0]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(attrStr, matches[i][0]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\r?\n/);
      return lines.length;
    }
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }
  }
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS({
  "node_modules/fast-xml-parser/src/nimndata.js"(exports) {
    "use strict";
    var char = function(a) {
      return String.fromCharCode(a);
    };
    var chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),
      emptyChar: char(178),
      emptyValue: char(177),
      boundryChar: char(179),
      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185)
    };
    var charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart
    ];
    var _e = function(node, e_schema, options) {
      if (typeof e_schema === "string") {
        if (node && node[0] && node[0].val !== void 0) {
          return getValue(node[0].val, e_schema);
        } else {
          return getValue(node, e_schema);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = "";
          if (Array.isArray(e_schema)) {
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            const arr_len = node.length;
            if (typeof itemSchema === "string") {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val, itemSchema);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd;
          } else {
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e(node.val, e_schema[key], options);
              } else {
                r = _e(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };
    var getValue = function(a) {
      switch (a) {
        case void 0:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case "":
          return chars.emptyValue;
        default:
          return a;
      }
    };
    var processValue = function(str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };
    var isAppChar = function(ch) {
      return charsArr.indexOf(ch) !== -1;
    };
    function hasData(jObj) {
      if (jObj === void 0) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }
    var x2j = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var convert2nimn = function(node, e_schema, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      return _e(node, e_schema, options);
    };
    exports.convert2nimn = convert2nimn;
  }
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS({
  "node_modules/fast-xml-parser/src/node2json_str.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var x2j = require_xmlstr2xmlnode();
    var convertToJsonString = function(node, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      options.indentBy = options.indentBy || "";
      return _cToJsonStr(node, options, 0);
    };
    var _cToJsonStr = function(node, options, level) {
      let jObj = "{";
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '"' + tagname + '" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
          }
          jObj = jObj.substr(0, jObj.length - 1) + " ] ";
        } else {
          jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
        }
      }
      util.merge(jObj, node.attrsMap);
      if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : "";
      } else {
        if (util.isExist(node.val)) {
          if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
            jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
          }
        }
      }
      if (jObj[jObj.length - 1] === ",") {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + "}";
    };
    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '"' + v + '"';
      }
    }
    exports.convertToJsonString = convertToJsonString;
  }
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/json2xml.js"(exports, module2) {
    "use strict";
    var buildOptions = require_util().buildOptions;
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      format: false,
      indentBy: "  ",
      supressEmptyNode: false,
      tagValueProcessor: function(a) {
        return a;
      },
      attrValueProcessor: function(a) {
        return a;
      }
    };
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "cdataTagName",
      "cdataPositionChar",
      "format",
      "indentBy",
      "supressEmptyNode",
      "tagValueProcessor",
      "attrValueProcessor"
    ];
    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function() {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }
    Parser.prototype.parse = function(jObj) {
      return this.j2x(jObj, 0).val;
    };
    Parser.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr("", jObj[key]);
            }
          } else {
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) {
              } else {
                val += this.options.tagValueProcessor("" + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr("", jObj[key]);
            }
          } else {
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === "undefined") {
              } else if (item === null) {
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
              } else if (typeof item === "object") {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, "", level);
              }
            }
          }
        } else {
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return { attrStr, val };
    };
    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
      }
    }
    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
        }
        return str + this.newLine;
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes("<")) {
        return this.indentate(level) + "<" + key + attrStr + ">" + val + "</" + key + this.tagEndChar;
      } else {
        return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + this.indentate(level) + "</" + key + this.tagEndChar;
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    function isCDATA(name) {
      return name === this.options.cdataTagName;
    }
    module2.exports = Parser;
  }
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS({
  "node_modules/fast-xml-parser/src/parser.js"(exports) {
    "use strict";
    var nodeToJson = require_node2json();
    var xmlToNodeobj = require_xmlstr2xmlnode();
    var x2xmlnode = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var validator = require_validator();
    exports.parse = function(xmlData, options, validationOption) {
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(result.err.msg);
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
      return nodeToJson.convertToJson(traversableObj, options);
    };
    exports.convertTonimn = require_nimndata().convert2nimn;
    exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
    exports.convertToJson = nodeToJson.convertToJson;
    exports.convertToJsonString = require_node2json_str().convertToJsonString;
    exports.validate = validator.validate;
    exports.j2xParser = require_json2xml();
    exports.parseToNimn = function(xmlData, schema, options) {
      return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
    };
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/models/models_1.js
var require_models_1 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/models/models_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeValidDBInstanceModificationsMessage = exports.SourceRegionMessage = exports.SourceRegion = exports.DescribeSourceRegionsMessage = exports.ReservedDBInstancesOfferingNotFoundFault = exports.ReservedDBInstancesOfferingMessage = exports.ReservedDBInstancesOffering = exports.DescribeReservedDBInstancesOfferingsMessage = exports.ReservedDBInstanceNotFoundFault = exports.ReservedDBInstanceMessage = exports.ReservedDBInstance = exports.RecurringCharge = exports.DescribeReservedDBInstancesMessage = exports.PendingMaintenanceActionsMessage = exports.DescribePendingMaintenanceActionsMessage = exports.OrderableDBInstanceOptionsMessage = exports.OrderableDBInstanceOption = exports.AvailableProcessorFeature = exports.DescribeOrderableDBInstanceOptionsMessage = exports.OptionGroups = exports.DescribeOptionGroupsMessage = exports.OptionGroupOptionsMessage = exports.OptionGroupOption = exports.OptionVersion = exports.OptionGroupOptionSetting = exports.MinimumEngineVersionPerAllowedValue = exports.DescribeOptionGroupOptionsMessage = exports.GlobalClustersMessage = exports.DescribeGlobalClustersMessage = exports.ExportTasksMessage = exports.DescribeExportTasksMessage = exports.EventSubscriptionsMessage = exports.DescribeEventSubscriptionsMessage = exports.EventsMessage = exports.Event = exports.DescribeEventsMessage = exports.EventCategoriesMessage = exports.EventCategoriesMap = exports.DescribeEventCategoriesMessage = exports.DescribeEngineDefaultParametersResult = exports.DescribeEngineDefaultParametersMessage = exports.DescribeEngineDefaultClusterParametersResult = exports.EngineDefaults = exports.DescribeEngineDefaultClusterParametersMessage = exports.DescribeDBSubnetGroupsMessage = exports.DBSubnetGroupMessage = exports.DescribeDBSnapshotsMessage = exports.DBSnapshotMessage = exports.DescribeDBSnapshotAttributesResult = exports.DBSnapshotAttributesResult = void 0;
    exports.ModifyEventSubscriptionMessage = exports.SubnetAlreadyInUse = exports.ModifyDBSubnetGroupResult = exports.ModifyDBSubnetGroupMessage = exports.ModifyDBSnapshotAttributeResult = exports.ModifyDBSnapshotAttributeMessage = exports.ModifyDBSnapshotResult = exports.ModifyDBSnapshotMessage = exports.ModifyDBProxyTargetGroupResponse = exports.ModifyDBProxyTargetGroupRequest = exports.ConnectionPoolConfiguration = exports.ModifyDBProxyEndpointResponse = exports.ModifyDBProxyEndpointRequest = exports.ModifyDBProxyResponse = exports.ModifyDBProxyRequest = exports.ModifyDBParameterGroupMessage = exports.DBParameterGroupNameMessage = exports.ModifyDBInstanceResult = exports.ModifyDBInstanceMessage = exports.DBUpgradeDependencyFailureFault = exports.SharedSnapshotQuotaExceededFault = exports.ModifyDBClusterSnapshotAttributeResult = exports.ModifyDBClusterSnapshotAttributeMessage = exports.ModifyDBClusterParameterGroupMessage = exports.DBClusterParameterGroupNameMessage = exports.ModifyDBClusterEndpointMessage = exports.ModifyDBClusterResult = exports.ModifyDBClusterMessage = exports.CloudwatchLogsExportConfiguration = exports.ModifyCustomDBEngineVersionMessage = exports.CustomEngineVersionStatus = exports.ModifyCurrentDBClusterCapacityMessage = exports.InvalidDBClusterCapacityFault = exports.DBClusterCapacityInfo = exports.ModifyCertificatesResult = exports.ModifyCertificatesMessage = exports.TagListMessage = exports.ListTagsForResourceMessage = exports.FailoverGlobalClusterResult = exports.FailoverGlobalClusterMessage = exports.FailoverDBClusterResult = exports.FailoverDBClusterMessage = exports.DownloadDBLogFilePortionMessage = exports.DownloadDBLogFilePortionDetails = exports.DBLogFileNotFoundFault = exports.DescribeValidDBInstanceModificationsResult = exports.ValidDBInstanceModificationsMessage = exports.ValidStorageOptions = exports.Range = exports.DoubleRange = void 0;
    exports.RevokeDBSecurityGroupIngressMessage = exports.RestoreDBInstanceToPointInTimeResult = exports.RestoreDBInstanceToPointInTimeMessage = exports.PointInTimeRestoreNotEnabledFault = exports.RestoreDBInstanceFromS3Result = exports.RestoreDBInstanceFromS3Message = exports.RestoreDBInstanceFromDBSnapshotResult = exports.RestoreDBInstanceFromDBSnapshotMessage = exports.RestoreDBClusterToPointInTimeResult = exports.RestoreDBClusterToPointInTimeMessage = exports.RestoreDBClusterFromSnapshotResult = exports.RestoreDBClusterFromSnapshotMessage = exports.InvalidRestoreFault = exports.InsufficientDBClusterCapacityFault = exports.RestoreDBClusterFromS3Result = exports.RestoreDBClusterFromS3Message = exports.InvalidS3BucketFault = exports.ResetDBParameterGroupMessage = exports.ResetDBClusterParameterGroupMessage = exports.RemoveTagsFromResourceMessage = exports.RemoveSourceIdentifierFromSubscriptionResult = exports.RemoveSourceIdentifierFromSubscriptionMessage = exports.RemoveRoleFromDBInstanceMessage = exports.DBInstanceRoleNotFoundFault = exports.RemoveRoleFromDBClusterMessage = exports.DBClusterRoleNotFoundFault = exports.RemoveFromGlobalClusterResult = exports.RemoveFromGlobalClusterMessage = exports.RegisterDBProxyTargetsResponse = exports.RegisterDBProxyTargetsRequest = exports.InsufficientAvailableIPsInSubnetFault = exports.DBProxyTargetAlreadyRegisteredFault = exports.RebootDBInstanceResult = exports.RebootDBInstanceMessage = exports.RebootDBClusterResult = exports.RebootDBClusterMessage = exports.ReservedDBInstanceQuotaExceededFault = exports.ReservedDBInstanceAlreadyExistsFault = exports.PurchaseReservedDBInstancesOfferingResult = exports.PurchaseReservedDBInstancesOfferingMessage = exports.PromoteReadReplicaDBClusterResult = exports.PromoteReadReplicaDBClusterMessage = exports.PromoteReadReplicaResult = exports.PromoteReadReplicaMessage = exports.ModifyOptionGroupResult = exports.ModifyOptionGroupMessage = exports.OptionConfiguration = exports.ModifyGlobalClusterResult = exports.ModifyGlobalClusterMessage = exports.ModifyEventSubscriptionResult = void 0;
    exports.StopDBInstanceAutomatedBackupsReplicationResult = exports.StopDBInstanceAutomatedBackupsReplicationMessage = exports.StopDBInstanceResult = exports.StopDBInstanceMessage = exports.StopDBClusterResult = exports.StopDBClusterMessage = exports.StopActivityStreamResponse = exports.StopActivityStreamRequest = exports.StartExportTaskMessage = exports.InvalidExportSourceStateFault = exports.InvalidExportOnlyFault = exports.IamRoleNotFoundFault = exports.IamRoleMissingPermissionsFault = exports.ExportTaskAlreadyExistsFault = exports.StartDBInstanceAutomatedBackupsReplicationResult = exports.StartDBInstanceAutomatedBackupsReplicationMessage = exports.StartDBInstanceResult = exports.StartDBInstanceMessage = exports.StartDBClusterResult = exports.StartDBClusterMessage = exports.StartActivityStreamResponse = exports.StartActivityStreamRequest = exports.RevokeDBSecurityGroupIngressResult = void 0;
    var RDSServiceException_1 = require_RDSServiceException();
    var DBSnapshotAttributesResult;
    (function(DBSnapshotAttributesResult2) {
      DBSnapshotAttributesResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSnapshotAttributesResult = exports.DBSnapshotAttributesResult || (exports.DBSnapshotAttributesResult = {}));
    var DescribeDBSnapshotAttributesResult;
    (function(DescribeDBSnapshotAttributesResult2) {
      DescribeDBSnapshotAttributesResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBSnapshotAttributesResult = exports.DescribeDBSnapshotAttributesResult || (exports.DescribeDBSnapshotAttributesResult = {}));
    var DBSnapshotMessage;
    (function(DBSnapshotMessage2) {
      DBSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSnapshotMessage = exports.DBSnapshotMessage || (exports.DBSnapshotMessage = {}));
    var DescribeDBSnapshotsMessage;
    (function(DescribeDBSnapshotsMessage2) {
      DescribeDBSnapshotsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBSnapshotsMessage = exports.DescribeDBSnapshotsMessage || (exports.DescribeDBSnapshotsMessage = {}));
    var DBSubnetGroupMessage;
    (function(DBSubnetGroupMessage2) {
      DBSubnetGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBSubnetGroupMessage = exports.DBSubnetGroupMessage || (exports.DBSubnetGroupMessage = {}));
    var DescribeDBSubnetGroupsMessage;
    (function(DescribeDBSubnetGroupsMessage2) {
      DescribeDBSubnetGroupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeDBSubnetGroupsMessage = exports.DescribeDBSubnetGroupsMessage || (exports.DescribeDBSubnetGroupsMessage = {}));
    var DescribeEngineDefaultClusterParametersMessage;
    (function(DescribeEngineDefaultClusterParametersMessage2) {
      DescribeEngineDefaultClusterParametersMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEngineDefaultClusterParametersMessage = exports.DescribeEngineDefaultClusterParametersMessage || (exports.DescribeEngineDefaultClusterParametersMessage = {}));
    var EngineDefaults;
    (function(EngineDefaults2) {
      EngineDefaults2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EngineDefaults = exports.EngineDefaults || (exports.EngineDefaults = {}));
    var DescribeEngineDefaultClusterParametersResult;
    (function(DescribeEngineDefaultClusterParametersResult2) {
      DescribeEngineDefaultClusterParametersResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEngineDefaultClusterParametersResult = exports.DescribeEngineDefaultClusterParametersResult || (exports.DescribeEngineDefaultClusterParametersResult = {}));
    var DescribeEngineDefaultParametersMessage;
    (function(DescribeEngineDefaultParametersMessage2) {
      DescribeEngineDefaultParametersMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEngineDefaultParametersMessage = exports.DescribeEngineDefaultParametersMessage || (exports.DescribeEngineDefaultParametersMessage = {}));
    var DescribeEngineDefaultParametersResult;
    (function(DescribeEngineDefaultParametersResult2) {
      DescribeEngineDefaultParametersResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEngineDefaultParametersResult = exports.DescribeEngineDefaultParametersResult || (exports.DescribeEngineDefaultParametersResult = {}));
    var DescribeEventCategoriesMessage;
    (function(DescribeEventCategoriesMessage2) {
      DescribeEventCategoriesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEventCategoriesMessage = exports.DescribeEventCategoriesMessage || (exports.DescribeEventCategoriesMessage = {}));
    var EventCategoriesMap;
    (function(EventCategoriesMap2) {
      EventCategoriesMap2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EventCategoriesMap = exports.EventCategoriesMap || (exports.EventCategoriesMap = {}));
    var EventCategoriesMessage;
    (function(EventCategoriesMessage2) {
      EventCategoriesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EventCategoriesMessage = exports.EventCategoriesMessage || (exports.EventCategoriesMessage = {}));
    var DescribeEventsMessage;
    (function(DescribeEventsMessage2) {
      DescribeEventsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEventsMessage = exports.DescribeEventsMessage || (exports.DescribeEventsMessage = {}));
    var Event;
    (function(Event2) {
      Event2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Event = exports.Event || (exports.Event = {}));
    var EventsMessage;
    (function(EventsMessage2) {
      EventsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EventsMessage = exports.EventsMessage || (exports.EventsMessage = {}));
    var DescribeEventSubscriptionsMessage;
    (function(DescribeEventSubscriptionsMessage2) {
      DescribeEventSubscriptionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEventSubscriptionsMessage = exports.DescribeEventSubscriptionsMessage || (exports.DescribeEventSubscriptionsMessage = {}));
    var EventSubscriptionsMessage;
    (function(EventSubscriptionsMessage2) {
      EventSubscriptionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(EventSubscriptionsMessage = exports.EventSubscriptionsMessage || (exports.EventSubscriptionsMessage = {}));
    var DescribeExportTasksMessage;
    (function(DescribeExportTasksMessage2) {
      DescribeExportTasksMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeExportTasksMessage = exports.DescribeExportTasksMessage || (exports.DescribeExportTasksMessage = {}));
    var ExportTasksMessage;
    (function(ExportTasksMessage2) {
      ExportTasksMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ExportTasksMessage = exports.ExportTasksMessage || (exports.ExportTasksMessage = {}));
    var DescribeGlobalClustersMessage;
    (function(DescribeGlobalClustersMessage2) {
      DescribeGlobalClustersMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeGlobalClustersMessage = exports.DescribeGlobalClustersMessage || (exports.DescribeGlobalClustersMessage = {}));
    var GlobalClustersMessage;
    (function(GlobalClustersMessage2) {
      GlobalClustersMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalClustersMessage = exports.GlobalClustersMessage || (exports.GlobalClustersMessage = {}));
    var DescribeOptionGroupOptionsMessage;
    (function(DescribeOptionGroupOptionsMessage2) {
      DescribeOptionGroupOptionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeOptionGroupOptionsMessage = exports.DescribeOptionGroupOptionsMessage || (exports.DescribeOptionGroupOptionsMessage = {}));
    var MinimumEngineVersionPerAllowedValue;
    (function(MinimumEngineVersionPerAllowedValue2) {
      MinimumEngineVersionPerAllowedValue2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(MinimumEngineVersionPerAllowedValue = exports.MinimumEngineVersionPerAllowedValue || (exports.MinimumEngineVersionPerAllowedValue = {}));
    var OptionGroupOptionSetting;
    (function(OptionGroupOptionSetting2) {
      OptionGroupOptionSetting2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionGroupOptionSetting = exports.OptionGroupOptionSetting || (exports.OptionGroupOptionSetting = {}));
    var OptionVersion;
    (function(OptionVersion2) {
      OptionVersion2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionVersion = exports.OptionVersion || (exports.OptionVersion = {}));
    var OptionGroupOption;
    (function(OptionGroupOption2) {
      OptionGroupOption2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionGroupOption = exports.OptionGroupOption || (exports.OptionGroupOption = {}));
    var OptionGroupOptionsMessage;
    (function(OptionGroupOptionsMessage2) {
      OptionGroupOptionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionGroupOptionsMessage = exports.OptionGroupOptionsMessage || (exports.OptionGroupOptionsMessage = {}));
    var DescribeOptionGroupsMessage;
    (function(DescribeOptionGroupsMessage2) {
      DescribeOptionGroupsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeOptionGroupsMessage = exports.DescribeOptionGroupsMessage || (exports.DescribeOptionGroupsMessage = {}));
    var OptionGroups;
    (function(OptionGroups2) {
      OptionGroups2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionGroups = exports.OptionGroups || (exports.OptionGroups = {}));
    var DescribeOrderableDBInstanceOptionsMessage;
    (function(DescribeOrderableDBInstanceOptionsMessage2) {
      DescribeOrderableDBInstanceOptionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeOrderableDBInstanceOptionsMessage = exports.DescribeOrderableDBInstanceOptionsMessage || (exports.DescribeOrderableDBInstanceOptionsMessage = {}));
    var AvailableProcessorFeature;
    (function(AvailableProcessorFeature2) {
      AvailableProcessorFeature2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AvailableProcessorFeature = exports.AvailableProcessorFeature || (exports.AvailableProcessorFeature = {}));
    var OrderableDBInstanceOption;
    (function(OrderableDBInstanceOption2) {
      OrderableDBInstanceOption2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OrderableDBInstanceOption = exports.OrderableDBInstanceOption || (exports.OrderableDBInstanceOption = {}));
    var OrderableDBInstanceOptionsMessage;
    (function(OrderableDBInstanceOptionsMessage2) {
      OrderableDBInstanceOptionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OrderableDBInstanceOptionsMessage = exports.OrderableDBInstanceOptionsMessage || (exports.OrderableDBInstanceOptionsMessage = {}));
    var DescribePendingMaintenanceActionsMessage;
    (function(DescribePendingMaintenanceActionsMessage2) {
      DescribePendingMaintenanceActionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribePendingMaintenanceActionsMessage = exports.DescribePendingMaintenanceActionsMessage || (exports.DescribePendingMaintenanceActionsMessage = {}));
    var PendingMaintenanceActionsMessage;
    (function(PendingMaintenanceActionsMessage2) {
      PendingMaintenanceActionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PendingMaintenanceActionsMessage = exports.PendingMaintenanceActionsMessage || (exports.PendingMaintenanceActionsMessage = {}));
    var DescribeReservedDBInstancesMessage;
    (function(DescribeReservedDBInstancesMessage2) {
      DescribeReservedDBInstancesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeReservedDBInstancesMessage = exports.DescribeReservedDBInstancesMessage || (exports.DescribeReservedDBInstancesMessage = {}));
    var RecurringCharge;
    (function(RecurringCharge2) {
      RecurringCharge2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RecurringCharge = exports.RecurringCharge || (exports.RecurringCharge = {}));
    var ReservedDBInstance;
    (function(ReservedDBInstance2) {
      ReservedDBInstance2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReservedDBInstance = exports.ReservedDBInstance || (exports.ReservedDBInstance = {}));
    var ReservedDBInstanceMessage;
    (function(ReservedDBInstanceMessage2) {
      ReservedDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReservedDBInstanceMessage = exports.ReservedDBInstanceMessage || (exports.ReservedDBInstanceMessage = {}));
    var ReservedDBInstanceNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ReservedDBInstanceNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "ReservedDBInstanceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceNotFoundFault.prototype);
      }
    };
    exports.ReservedDBInstanceNotFoundFault = ReservedDBInstanceNotFoundFault;
    var DescribeReservedDBInstancesOfferingsMessage;
    (function(DescribeReservedDBInstancesOfferingsMessage2) {
      DescribeReservedDBInstancesOfferingsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeReservedDBInstancesOfferingsMessage = exports.DescribeReservedDBInstancesOfferingsMessage || (exports.DescribeReservedDBInstancesOfferingsMessage = {}));
    var ReservedDBInstancesOffering;
    (function(ReservedDBInstancesOffering2) {
      ReservedDBInstancesOffering2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReservedDBInstancesOffering = exports.ReservedDBInstancesOffering || (exports.ReservedDBInstancesOffering = {}));
    var ReservedDBInstancesOfferingMessage;
    (function(ReservedDBInstancesOfferingMessage2) {
      ReservedDBInstancesOfferingMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReservedDBInstancesOfferingMessage = exports.ReservedDBInstancesOfferingMessage || (exports.ReservedDBInstancesOfferingMessage = {}));
    var ReservedDBInstancesOfferingNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ReservedDBInstancesOfferingNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "ReservedDBInstancesOfferingNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstancesOfferingNotFoundFault.prototype);
      }
    };
    exports.ReservedDBInstancesOfferingNotFoundFault = ReservedDBInstancesOfferingNotFoundFault;
    var DescribeSourceRegionsMessage;
    (function(DescribeSourceRegionsMessage2) {
      DescribeSourceRegionsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeSourceRegionsMessage = exports.DescribeSourceRegionsMessage || (exports.DescribeSourceRegionsMessage = {}));
    var SourceRegion;
    (function(SourceRegion2) {
      SourceRegion2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SourceRegion = exports.SourceRegion || (exports.SourceRegion = {}));
    var SourceRegionMessage;
    (function(SourceRegionMessage2) {
      SourceRegionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SourceRegionMessage = exports.SourceRegionMessage || (exports.SourceRegionMessage = {}));
    var DescribeValidDBInstanceModificationsMessage;
    (function(DescribeValidDBInstanceModificationsMessage2) {
      DescribeValidDBInstanceModificationsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeValidDBInstanceModificationsMessage = exports.DescribeValidDBInstanceModificationsMessage || (exports.DescribeValidDBInstanceModificationsMessage = {}));
    var DoubleRange;
    (function(DoubleRange2) {
      DoubleRange2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DoubleRange = exports.DoubleRange || (exports.DoubleRange = {}));
    var Range;
    (function(Range2) {
      Range2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Range = exports.Range || (exports.Range = {}));
    var ValidStorageOptions;
    (function(ValidStorageOptions2) {
      ValidStorageOptions2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ValidStorageOptions = exports.ValidStorageOptions || (exports.ValidStorageOptions = {}));
    var ValidDBInstanceModificationsMessage;
    (function(ValidDBInstanceModificationsMessage2) {
      ValidDBInstanceModificationsMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ValidDBInstanceModificationsMessage = exports.ValidDBInstanceModificationsMessage || (exports.ValidDBInstanceModificationsMessage = {}));
    var DescribeValidDBInstanceModificationsResult;
    (function(DescribeValidDBInstanceModificationsResult2) {
      DescribeValidDBInstanceModificationsResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeValidDBInstanceModificationsResult = exports.DescribeValidDBInstanceModificationsResult || (exports.DescribeValidDBInstanceModificationsResult = {}));
    var DBLogFileNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBLogFileNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBLogFileNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBLogFileNotFoundFault.prototype);
      }
    };
    exports.DBLogFileNotFoundFault = DBLogFileNotFoundFault;
    var DownloadDBLogFilePortionDetails;
    (function(DownloadDBLogFilePortionDetails2) {
      DownloadDBLogFilePortionDetails2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DownloadDBLogFilePortionDetails = exports.DownloadDBLogFilePortionDetails || (exports.DownloadDBLogFilePortionDetails = {}));
    var DownloadDBLogFilePortionMessage;
    (function(DownloadDBLogFilePortionMessage2) {
      DownloadDBLogFilePortionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DownloadDBLogFilePortionMessage = exports.DownloadDBLogFilePortionMessage || (exports.DownloadDBLogFilePortionMessage = {}));
    var FailoverDBClusterMessage;
    (function(FailoverDBClusterMessage2) {
      FailoverDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FailoverDBClusterMessage = exports.FailoverDBClusterMessage || (exports.FailoverDBClusterMessage = {}));
    var FailoverDBClusterResult;
    (function(FailoverDBClusterResult2) {
      FailoverDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FailoverDBClusterResult = exports.FailoverDBClusterResult || (exports.FailoverDBClusterResult = {}));
    var FailoverGlobalClusterMessage;
    (function(FailoverGlobalClusterMessage2) {
      FailoverGlobalClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FailoverGlobalClusterMessage = exports.FailoverGlobalClusterMessage || (exports.FailoverGlobalClusterMessage = {}));
    var FailoverGlobalClusterResult;
    (function(FailoverGlobalClusterResult2) {
      FailoverGlobalClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FailoverGlobalClusterResult = exports.FailoverGlobalClusterResult || (exports.FailoverGlobalClusterResult = {}));
    var ListTagsForResourceMessage;
    (function(ListTagsForResourceMessage2) {
      ListTagsForResourceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListTagsForResourceMessage = exports.ListTagsForResourceMessage || (exports.ListTagsForResourceMessage = {}));
    var TagListMessage;
    (function(TagListMessage2) {
      TagListMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TagListMessage = exports.TagListMessage || (exports.TagListMessage = {}));
    var ModifyCertificatesMessage;
    (function(ModifyCertificatesMessage2) {
      ModifyCertificatesMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyCertificatesMessage = exports.ModifyCertificatesMessage || (exports.ModifyCertificatesMessage = {}));
    var ModifyCertificatesResult;
    (function(ModifyCertificatesResult2) {
      ModifyCertificatesResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyCertificatesResult = exports.ModifyCertificatesResult || (exports.ModifyCertificatesResult = {}));
    var DBClusterCapacityInfo;
    (function(DBClusterCapacityInfo2) {
      DBClusterCapacityInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterCapacityInfo = exports.DBClusterCapacityInfo || (exports.DBClusterCapacityInfo = {}));
    var InvalidDBClusterCapacityFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidDBClusterCapacityFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidDBClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterCapacityFault.prototype);
      }
    };
    exports.InvalidDBClusterCapacityFault = InvalidDBClusterCapacityFault;
    var ModifyCurrentDBClusterCapacityMessage;
    (function(ModifyCurrentDBClusterCapacityMessage2) {
      ModifyCurrentDBClusterCapacityMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyCurrentDBClusterCapacityMessage = exports.ModifyCurrentDBClusterCapacityMessage || (exports.ModifyCurrentDBClusterCapacityMessage = {}));
    var CustomEngineVersionStatus;
    (function(CustomEngineVersionStatus2) {
      CustomEngineVersionStatus2["available"] = "available";
      CustomEngineVersionStatus2["inactive"] = "inactive";
      CustomEngineVersionStatus2["inactive_except_restore"] = "inactive-except-restore";
    })(CustomEngineVersionStatus = exports.CustomEngineVersionStatus || (exports.CustomEngineVersionStatus = {}));
    var ModifyCustomDBEngineVersionMessage;
    (function(ModifyCustomDBEngineVersionMessage2) {
      ModifyCustomDBEngineVersionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyCustomDBEngineVersionMessage = exports.ModifyCustomDBEngineVersionMessage || (exports.ModifyCustomDBEngineVersionMessage = {}));
    var CloudwatchLogsExportConfiguration;
    (function(CloudwatchLogsExportConfiguration2) {
      CloudwatchLogsExportConfiguration2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CloudwatchLogsExportConfiguration = exports.CloudwatchLogsExportConfiguration || (exports.CloudwatchLogsExportConfiguration = {}));
    var ModifyDBClusterMessage;
    (function(ModifyDBClusterMessage2) {
      ModifyDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBClusterMessage = exports.ModifyDBClusterMessage || (exports.ModifyDBClusterMessage = {}));
    var ModifyDBClusterResult;
    (function(ModifyDBClusterResult2) {
      ModifyDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBClusterResult = exports.ModifyDBClusterResult || (exports.ModifyDBClusterResult = {}));
    var ModifyDBClusterEndpointMessage;
    (function(ModifyDBClusterEndpointMessage2) {
      ModifyDBClusterEndpointMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBClusterEndpointMessage = exports.ModifyDBClusterEndpointMessage || (exports.ModifyDBClusterEndpointMessage = {}));
    var DBClusterParameterGroupNameMessage;
    (function(DBClusterParameterGroupNameMessage2) {
      DBClusterParameterGroupNameMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBClusterParameterGroupNameMessage = exports.DBClusterParameterGroupNameMessage || (exports.DBClusterParameterGroupNameMessage = {}));
    var ModifyDBClusterParameterGroupMessage;
    (function(ModifyDBClusterParameterGroupMessage2) {
      ModifyDBClusterParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBClusterParameterGroupMessage = exports.ModifyDBClusterParameterGroupMessage || (exports.ModifyDBClusterParameterGroupMessage = {}));
    var ModifyDBClusterSnapshotAttributeMessage;
    (function(ModifyDBClusterSnapshotAttributeMessage2) {
      ModifyDBClusterSnapshotAttributeMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBClusterSnapshotAttributeMessage = exports.ModifyDBClusterSnapshotAttributeMessage || (exports.ModifyDBClusterSnapshotAttributeMessage = {}));
    var ModifyDBClusterSnapshotAttributeResult;
    (function(ModifyDBClusterSnapshotAttributeResult2) {
      ModifyDBClusterSnapshotAttributeResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBClusterSnapshotAttributeResult = exports.ModifyDBClusterSnapshotAttributeResult || (exports.ModifyDBClusterSnapshotAttributeResult = {}));
    var SharedSnapshotQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SharedSnapshotQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "SharedSnapshotQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SharedSnapshotQuotaExceededFault.prototype);
      }
    };
    exports.SharedSnapshotQuotaExceededFault = SharedSnapshotQuotaExceededFault;
    var DBUpgradeDependencyFailureFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBUpgradeDependencyFailureFault",
          $fault: "client"
        }, opts));
        this.name = "DBUpgradeDependencyFailureFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBUpgradeDependencyFailureFault.prototype);
      }
    };
    exports.DBUpgradeDependencyFailureFault = DBUpgradeDependencyFailureFault;
    var ModifyDBInstanceMessage;
    (function(ModifyDBInstanceMessage2) {
      ModifyDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBInstanceMessage = exports.ModifyDBInstanceMessage || (exports.ModifyDBInstanceMessage = {}));
    var ModifyDBInstanceResult;
    (function(ModifyDBInstanceResult2) {
      ModifyDBInstanceResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBInstanceResult = exports.ModifyDBInstanceResult || (exports.ModifyDBInstanceResult = {}));
    var DBParameterGroupNameMessage;
    (function(DBParameterGroupNameMessage2) {
      DBParameterGroupNameMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DBParameterGroupNameMessage = exports.DBParameterGroupNameMessage || (exports.DBParameterGroupNameMessage = {}));
    var ModifyDBParameterGroupMessage;
    (function(ModifyDBParameterGroupMessage2) {
      ModifyDBParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBParameterGroupMessage = exports.ModifyDBParameterGroupMessage || (exports.ModifyDBParameterGroupMessage = {}));
    var ModifyDBProxyRequest;
    (function(ModifyDBProxyRequest2) {
      ModifyDBProxyRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBProxyRequest = exports.ModifyDBProxyRequest || (exports.ModifyDBProxyRequest = {}));
    var ModifyDBProxyResponse;
    (function(ModifyDBProxyResponse2) {
      ModifyDBProxyResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBProxyResponse = exports.ModifyDBProxyResponse || (exports.ModifyDBProxyResponse = {}));
    var ModifyDBProxyEndpointRequest;
    (function(ModifyDBProxyEndpointRequest2) {
      ModifyDBProxyEndpointRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBProxyEndpointRequest = exports.ModifyDBProxyEndpointRequest || (exports.ModifyDBProxyEndpointRequest = {}));
    var ModifyDBProxyEndpointResponse;
    (function(ModifyDBProxyEndpointResponse2) {
      ModifyDBProxyEndpointResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBProxyEndpointResponse = exports.ModifyDBProxyEndpointResponse || (exports.ModifyDBProxyEndpointResponse = {}));
    var ConnectionPoolConfiguration;
    (function(ConnectionPoolConfiguration2) {
      ConnectionPoolConfiguration2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ConnectionPoolConfiguration = exports.ConnectionPoolConfiguration || (exports.ConnectionPoolConfiguration = {}));
    var ModifyDBProxyTargetGroupRequest;
    (function(ModifyDBProxyTargetGroupRequest2) {
      ModifyDBProxyTargetGroupRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBProxyTargetGroupRequest = exports.ModifyDBProxyTargetGroupRequest || (exports.ModifyDBProxyTargetGroupRequest = {}));
    var ModifyDBProxyTargetGroupResponse;
    (function(ModifyDBProxyTargetGroupResponse2) {
      ModifyDBProxyTargetGroupResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBProxyTargetGroupResponse = exports.ModifyDBProxyTargetGroupResponse || (exports.ModifyDBProxyTargetGroupResponse = {}));
    var ModifyDBSnapshotMessage;
    (function(ModifyDBSnapshotMessage2) {
      ModifyDBSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBSnapshotMessage = exports.ModifyDBSnapshotMessage || (exports.ModifyDBSnapshotMessage = {}));
    var ModifyDBSnapshotResult;
    (function(ModifyDBSnapshotResult2) {
      ModifyDBSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBSnapshotResult = exports.ModifyDBSnapshotResult || (exports.ModifyDBSnapshotResult = {}));
    var ModifyDBSnapshotAttributeMessage;
    (function(ModifyDBSnapshotAttributeMessage2) {
      ModifyDBSnapshotAttributeMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBSnapshotAttributeMessage = exports.ModifyDBSnapshotAttributeMessage || (exports.ModifyDBSnapshotAttributeMessage = {}));
    var ModifyDBSnapshotAttributeResult;
    (function(ModifyDBSnapshotAttributeResult2) {
      ModifyDBSnapshotAttributeResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBSnapshotAttributeResult = exports.ModifyDBSnapshotAttributeResult || (exports.ModifyDBSnapshotAttributeResult = {}));
    var ModifyDBSubnetGroupMessage;
    (function(ModifyDBSubnetGroupMessage2) {
      ModifyDBSubnetGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBSubnetGroupMessage = exports.ModifyDBSubnetGroupMessage || (exports.ModifyDBSubnetGroupMessage = {}));
    var ModifyDBSubnetGroupResult;
    (function(ModifyDBSubnetGroupResult2) {
      ModifyDBSubnetGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyDBSubnetGroupResult = exports.ModifyDBSubnetGroupResult || (exports.ModifyDBSubnetGroupResult = {}));
    var SubnetAlreadyInUse = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SubnetAlreadyInUse",
          $fault: "client"
        }, opts));
        this.name = "SubnetAlreadyInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubnetAlreadyInUse.prototype);
      }
    };
    exports.SubnetAlreadyInUse = SubnetAlreadyInUse;
    var ModifyEventSubscriptionMessage;
    (function(ModifyEventSubscriptionMessage2) {
      ModifyEventSubscriptionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyEventSubscriptionMessage = exports.ModifyEventSubscriptionMessage || (exports.ModifyEventSubscriptionMessage = {}));
    var ModifyEventSubscriptionResult;
    (function(ModifyEventSubscriptionResult2) {
      ModifyEventSubscriptionResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyEventSubscriptionResult = exports.ModifyEventSubscriptionResult || (exports.ModifyEventSubscriptionResult = {}));
    var ModifyGlobalClusterMessage;
    (function(ModifyGlobalClusterMessage2) {
      ModifyGlobalClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyGlobalClusterMessage = exports.ModifyGlobalClusterMessage || (exports.ModifyGlobalClusterMessage = {}));
    var ModifyGlobalClusterResult;
    (function(ModifyGlobalClusterResult2) {
      ModifyGlobalClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyGlobalClusterResult = exports.ModifyGlobalClusterResult || (exports.ModifyGlobalClusterResult = {}));
    var OptionConfiguration;
    (function(OptionConfiguration2) {
      OptionConfiguration2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(OptionConfiguration = exports.OptionConfiguration || (exports.OptionConfiguration = {}));
    var ModifyOptionGroupMessage;
    (function(ModifyOptionGroupMessage2) {
      ModifyOptionGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyOptionGroupMessage = exports.ModifyOptionGroupMessage || (exports.ModifyOptionGroupMessage = {}));
    var ModifyOptionGroupResult;
    (function(ModifyOptionGroupResult2) {
      ModifyOptionGroupResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ModifyOptionGroupResult = exports.ModifyOptionGroupResult || (exports.ModifyOptionGroupResult = {}));
    var PromoteReadReplicaMessage;
    (function(PromoteReadReplicaMessage2) {
      PromoteReadReplicaMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PromoteReadReplicaMessage = exports.PromoteReadReplicaMessage || (exports.PromoteReadReplicaMessage = {}));
    var PromoteReadReplicaResult;
    (function(PromoteReadReplicaResult2) {
      PromoteReadReplicaResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PromoteReadReplicaResult = exports.PromoteReadReplicaResult || (exports.PromoteReadReplicaResult = {}));
    var PromoteReadReplicaDBClusterMessage;
    (function(PromoteReadReplicaDBClusterMessage2) {
      PromoteReadReplicaDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PromoteReadReplicaDBClusterMessage = exports.PromoteReadReplicaDBClusterMessage || (exports.PromoteReadReplicaDBClusterMessage = {}));
    var PromoteReadReplicaDBClusterResult;
    (function(PromoteReadReplicaDBClusterResult2) {
      PromoteReadReplicaDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PromoteReadReplicaDBClusterResult = exports.PromoteReadReplicaDBClusterResult || (exports.PromoteReadReplicaDBClusterResult = {}));
    var PurchaseReservedDBInstancesOfferingMessage;
    (function(PurchaseReservedDBInstancesOfferingMessage2) {
      PurchaseReservedDBInstancesOfferingMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PurchaseReservedDBInstancesOfferingMessage = exports.PurchaseReservedDBInstancesOfferingMessage || (exports.PurchaseReservedDBInstancesOfferingMessage = {}));
    var PurchaseReservedDBInstancesOfferingResult;
    (function(PurchaseReservedDBInstancesOfferingResult2) {
      PurchaseReservedDBInstancesOfferingResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PurchaseReservedDBInstancesOfferingResult = exports.PurchaseReservedDBInstancesOfferingResult || (exports.PurchaseReservedDBInstancesOfferingResult = {}));
    var ReservedDBInstanceAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ReservedDBInstanceAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "ReservedDBInstanceAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceAlreadyExistsFault.prototype);
      }
    };
    exports.ReservedDBInstanceAlreadyExistsFault = ReservedDBInstanceAlreadyExistsFault;
    var ReservedDBInstanceQuotaExceededFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ReservedDBInstanceQuotaExceededFault",
          $fault: "client"
        }, opts));
        this.name = "ReservedDBInstanceQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceQuotaExceededFault.prototype);
      }
    };
    exports.ReservedDBInstanceQuotaExceededFault = ReservedDBInstanceQuotaExceededFault;
    var RebootDBClusterMessage;
    (function(RebootDBClusterMessage2) {
      RebootDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RebootDBClusterMessage = exports.RebootDBClusterMessage || (exports.RebootDBClusterMessage = {}));
    var RebootDBClusterResult;
    (function(RebootDBClusterResult2) {
      RebootDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RebootDBClusterResult = exports.RebootDBClusterResult || (exports.RebootDBClusterResult = {}));
    var RebootDBInstanceMessage;
    (function(RebootDBInstanceMessage2) {
      RebootDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RebootDBInstanceMessage = exports.RebootDBInstanceMessage || (exports.RebootDBInstanceMessage = {}));
    var RebootDBInstanceResult;
    (function(RebootDBInstanceResult2) {
      RebootDBInstanceResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RebootDBInstanceResult = exports.RebootDBInstanceResult || (exports.RebootDBInstanceResult = {}));
    var DBProxyTargetAlreadyRegisteredFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBProxyTargetAlreadyRegisteredFault",
          $fault: "client"
        }, opts));
        this.name = "DBProxyTargetAlreadyRegisteredFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetAlreadyRegisteredFault.prototype);
      }
    };
    exports.DBProxyTargetAlreadyRegisteredFault = DBProxyTargetAlreadyRegisteredFault;
    var InsufficientAvailableIPsInSubnetFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InsufficientAvailableIPsInSubnetFault",
          $fault: "client"
        }, opts));
        this.name = "InsufficientAvailableIPsInSubnetFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientAvailableIPsInSubnetFault.prototype);
      }
    };
    exports.InsufficientAvailableIPsInSubnetFault = InsufficientAvailableIPsInSubnetFault;
    var RegisterDBProxyTargetsRequest;
    (function(RegisterDBProxyTargetsRequest2) {
      RegisterDBProxyTargetsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RegisterDBProxyTargetsRequest = exports.RegisterDBProxyTargetsRequest || (exports.RegisterDBProxyTargetsRequest = {}));
    var RegisterDBProxyTargetsResponse;
    (function(RegisterDBProxyTargetsResponse2) {
      RegisterDBProxyTargetsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RegisterDBProxyTargetsResponse = exports.RegisterDBProxyTargetsResponse || (exports.RegisterDBProxyTargetsResponse = {}));
    var RemoveFromGlobalClusterMessage;
    (function(RemoveFromGlobalClusterMessage2) {
      RemoveFromGlobalClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RemoveFromGlobalClusterMessage = exports.RemoveFromGlobalClusterMessage || (exports.RemoveFromGlobalClusterMessage = {}));
    var RemoveFromGlobalClusterResult;
    (function(RemoveFromGlobalClusterResult2) {
      RemoveFromGlobalClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RemoveFromGlobalClusterResult = exports.RemoveFromGlobalClusterResult || (exports.RemoveFromGlobalClusterResult = {}));
    var DBClusterRoleNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBClusterRoleNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBClusterRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleNotFoundFault.prototype);
      }
    };
    exports.DBClusterRoleNotFoundFault = DBClusterRoleNotFoundFault;
    var RemoveRoleFromDBClusterMessage;
    (function(RemoveRoleFromDBClusterMessage2) {
      RemoveRoleFromDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RemoveRoleFromDBClusterMessage = exports.RemoveRoleFromDBClusterMessage || (exports.RemoveRoleFromDBClusterMessage = {}));
    var DBInstanceRoleNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DBInstanceRoleNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "DBInstanceRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleNotFoundFault.prototype);
      }
    };
    exports.DBInstanceRoleNotFoundFault = DBInstanceRoleNotFoundFault;
    var RemoveRoleFromDBInstanceMessage;
    (function(RemoveRoleFromDBInstanceMessage2) {
      RemoveRoleFromDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RemoveRoleFromDBInstanceMessage = exports.RemoveRoleFromDBInstanceMessage || (exports.RemoveRoleFromDBInstanceMessage = {}));
    var RemoveSourceIdentifierFromSubscriptionMessage;
    (function(RemoveSourceIdentifierFromSubscriptionMessage2) {
      RemoveSourceIdentifierFromSubscriptionMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RemoveSourceIdentifierFromSubscriptionMessage = exports.RemoveSourceIdentifierFromSubscriptionMessage || (exports.RemoveSourceIdentifierFromSubscriptionMessage = {}));
    var RemoveSourceIdentifierFromSubscriptionResult;
    (function(RemoveSourceIdentifierFromSubscriptionResult2) {
      RemoveSourceIdentifierFromSubscriptionResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RemoveSourceIdentifierFromSubscriptionResult = exports.RemoveSourceIdentifierFromSubscriptionResult || (exports.RemoveSourceIdentifierFromSubscriptionResult = {}));
    var RemoveTagsFromResourceMessage;
    (function(RemoveTagsFromResourceMessage2) {
      RemoveTagsFromResourceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RemoveTagsFromResourceMessage = exports.RemoveTagsFromResourceMessage || (exports.RemoveTagsFromResourceMessage = {}));
    var ResetDBClusterParameterGroupMessage;
    (function(ResetDBClusterParameterGroupMessage2) {
      ResetDBClusterParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ResetDBClusterParameterGroupMessage = exports.ResetDBClusterParameterGroupMessage || (exports.ResetDBClusterParameterGroupMessage = {}));
    var ResetDBParameterGroupMessage;
    (function(ResetDBParameterGroupMessage2) {
      ResetDBParameterGroupMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ResetDBParameterGroupMessage = exports.ResetDBParameterGroupMessage || (exports.ResetDBParameterGroupMessage = {}));
    var InvalidS3BucketFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidS3BucketFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidS3BucketFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3BucketFault.prototype);
      }
    };
    exports.InvalidS3BucketFault = InvalidS3BucketFault;
    var RestoreDBClusterFromS3Message;
    (function(RestoreDBClusterFromS3Message2) {
      RestoreDBClusterFromS3Message2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBClusterFromS3Message = exports.RestoreDBClusterFromS3Message || (exports.RestoreDBClusterFromS3Message = {}));
    var RestoreDBClusterFromS3Result;
    (function(RestoreDBClusterFromS3Result2) {
      RestoreDBClusterFromS3Result2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBClusterFromS3Result = exports.RestoreDBClusterFromS3Result || (exports.RestoreDBClusterFromS3Result = {}));
    var InsufficientDBClusterCapacityFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InsufficientDBClusterCapacityFault",
          $fault: "client"
        }, opts));
        this.name = "InsufficientDBClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientDBClusterCapacityFault.prototype);
      }
    };
    exports.InsufficientDBClusterCapacityFault = InsufficientDBClusterCapacityFault;
    var InvalidRestoreFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRestoreFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidRestoreFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRestoreFault.prototype);
      }
    };
    exports.InvalidRestoreFault = InvalidRestoreFault;
    var RestoreDBClusterFromSnapshotMessage;
    (function(RestoreDBClusterFromSnapshotMessage2) {
      RestoreDBClusterFromSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBClusterFromSnapshotMessage = exports.RestoreDBClusterFromSnapshotMessage || (exports.RestoreDBClusterFromSnapshotMessage = {}));
    var RestoreDBClusterFromSnapshotResult;
    (function(RestoreDBClusterFromSnapshotResult2) {
      RestoreDBClusterFromSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBClusterFromSnapshotResult = exports.RestoreDBClusterFromSnapshotResult || (exports.RestoreDBClusterFromSnapshotResult = {}));
    var RestoreDBClusterToPointInTimeMessage;
    (function(RestoreDBClusterToPointInTimeMessage2) {
      RestoreDBClusterToPointInTimeMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBClusterToPointInTimeMessage = exports.RestoreDBClusterToPointInTimeMessage || (exports.RestoreDBClusterToPointInTimeMessage = {}));
    var RestoreDBClusterToPointInTimeResult;
    (function(RestoreDBClusterToPointInTimeResult2) {
      RestoreDBClusterToPointInTimeResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBClusterToPointInTimeResult = exports.RestoreDBClusterToPointInTimeResult || (exports.RestoreDBClusterToPointInTimeResult = {}));
    var RestoreDBInstanceFromDBSnapshotMessage;
    (function(RestoreDBInstanceFromDBSnapshotMessage2) {
      RestoreDBInstanceFromDBSnapshotMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBInstanceFromDBSnapshotMessage = exports.RestoreDBInstanceFromDBSnapshotMessage || (exports.RestoreDBInstanceFromDBSnapshotMessage = {}));
    var RestoreDBInstanceFromDBSnapshotResult;
    (function(RestoreDBInstanceFromDBSnapshotResult2) {
      RestoreDBInstanceFromDBSnapshotResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBInstanceFromDBSnapshotResult = exports.RestoreDBInstanceFromDBSnapshotResult || (exports.RestoreDBInstanceFromDBSnapshotResult = {}));
    var RestoreDBInstanceFromS3Message;
    (function(RestoreDBInstanceFromS3Message2) {
      RestoreDBInstanceFromS3Message2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBInstanceFromS3Message = exports.RestoreDBInstanceFromS3Message || (exports.RestoreDBInstanceFromS3Message = {}));
    var RestoreDBInstanceFromS3Result;
    (function(RestoreDBInstanceFromS3Result2) {
      RestoreDBInstanceFromS3Result2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBInstanceFromS3Result = exports.RestoreDBInstanceFromS3Result || (exports.RestoreDBInstanceFromS3Result = {}));
    var PointInTimeRestoreNotEnabledFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "PointInTimeRestoreNotEnabledFault",
          $fault: "client"
        }, opts));
        this.name = "PointInTimeRestoreNotEnabledFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, PointInTimeRestoreNotEnabledFault.prototype);
      }
    };
    exports.PointInTimeRestoreNotEnabledFault = PointInTimeRestoreNotEnabledFault;
    var RestoreDBInstanceToPointInTimeMessage;
    (function(RestoreDBInstanceToPointInTimeMessage2) {
      RestoreDBInstanceToPointInTimeMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBInstanceToPointInTimeMessage = exports.RestoreDBInstanceToPointInTimeMessage || (exports.RestoreDBInstanceToPointInTimeMessage = {}));
    var RestoreDBInstanceToPointInTimeResult;
    (function(RestoreDBInstanceToPointInTimeResult2) {
      RestoreDBInstanceToPointInTimeResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreDBInstanceToPointInTimeResult = exports.RestoreDBInstanceToPointInTimeResult || (exports.RestoreDBInstanceToPointInTimeResult = {}));
    var RevokeDBSecurityGroupIngressMessage;
    (function(RevokeDBSecurityGroupIngressMessage2) {
      RevokeDBSecurityGroupIngressMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RevokeDBSecurityGroupIngressMessage = exports.RevokeDBSecurityGroupIngressMessage || (exports.RevokeDBSecurityGroupIngressMessage = {}));
    var RevokeDBSecurityGroupIngressResult;
    (function(RevokeDBSecurityGroupIngressResult2) {
      RevokeDBSecurityGroupIngressResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RevokeDBSecurityGroupIngressResult = exports.RevokeDBSecurityGroupIngressResult || (exports.RevokeDBSecurityGroupIngressResult = {}));
    var StartActivityStreamRequest;
    (function(StartActivityStreamRequest2) {
      StartActivityStreamRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartActivityStreamRequest = exports.StartActivityStreamRequest || (exports.StartActivityStreamRequest = {}));
    var StartActivityStreamResponse;
    (function(StartActivityStreamResponse2) {
      StartActivityStreamResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartActivityStreamResponse = exports.StartActivityStreamResponse || (exports.StartActivityStreamResponse = {}));
    var StartDBClusterMessage;
    (function(StartDBClusterMessage2) {
      StartDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartDBClusterMessage = exports.StartDBClusterMessage || (exports.StartDBClusterMessage = {}));
    var StartDBClusterResult;
    (function(StartDBClusterResult2) {
      StartDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartDBClusterResult = exports.StartDBClusterResult || (exports.StartDBClusterResult = {}));
    var StartDBInstanceMessage;
    (function(StartDBInstanceMessage2) {
      StartDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartDBInstanceMessage = exports.StartDBInstanceMessage || (exports.StartDBInstanceMessage = {}));
    var StartDBInstanceResult;
    (function(StartDBInstanceResult2) {
      StartDBInstanceResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartDBInstanceResult = exports.StartDBInstanceResult || (exports.StartDBInstanceResult = {}));
    var StartDBInstanceAutomatedBackupsReplicationMessage;
    (function(StartDBInstanceAutomatedBackupsReplicationMessage2) {
      StartDBInstanceAutomatedBackupsReplicationMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartDBInstanceAutomatedBackupsReplicationMessage = exports.StartDBInstanceAutomatedBackupsReplicationMessage || (exports.StartDBInstanceAutomatedBackupsReplicationMessage = {}));
    var StartDBInstanceAutomatedBackupsReplicationResult;
    (function(StartDBInstanceAutomatedBackupsReplicationResult2) {
      StartDBInstanceAutomatedBackupsReplicationResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartDBInstanceAutomatedBackupsReplicationResult = exports.StartDBInstanceAutomatedBackupsReplicationResult || (exports.StartDBInstanceAutomatedBackupsReplicationResult = {}));
    var ExportTaskAlreadyExistsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExportTaskAlreadyExistsFault",
          $fault: "client"
        }, opts));
        this.name = "ExportTaskAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportTaskAlreadyExistsFault.prototype);
      }
    };
    exports.ExportTaskAlreadyExistsFault = ExportTaskAlreadyExistsFault;
    var IamRoleMissingPermissionsFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IamRoleMissingPermissionsFault",
          $fault: "client"
        }, opts));
        this.name = "IamRoleMissingPermissionsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamRoleMissingPermissionsFault.prototype);
      }
    };
    exports.IamRoleMissingPermissionsFault = IamRoleMissingPermissionsFault;
    var IamRoleNotFoundFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IamRoleNotFoundFault",
          $fault: "client"
        }, opts));
        this.name = "IamRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamRoleNotFoundFault.prototype);
      }
    };
    exports.IamRoleNotFoundFault = IamRoleNotFoundFault;
    var InvalidExportOnlyFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidExportOnlyFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidExportOnlyFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportOnlyFault.prototype);
      }
    };
    exports.InvalidExportOnlyFault = InvalidExportOnlyFault;
    var InvalidExportSourceStateFault = class extends RDSServiceException_1.RDSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidExportSourceStateFault",
          $fault: "client"
        }, opts));
        this.name = "InvalidExportSourceStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportSourceStateFault.prototype);
      }
    };
    exports.InvalidExportSourceStateFault = InvalidExportSourceStateFault;
    var StartExportTaskMessage;
    (function(StartExportTaskMessage2) {
      StartExportTaskMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StartExportTaskMessage = exports.StartExportTaskMessage || (exports.StartExportTaskMessage = {}));
    var StopActivityStreamRequest;
    (function(StopActivityStreamRequest2) {
      StopActivityStreamRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopActivityStreamRequest = exports.StopActivityStreamRequest || (exports.StopActivityStreamRequest = {}));
    var StopActivityStreamResponse;
    (function(StopActivityStreamResponse2) {
      StopActivityStreamResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopActivityStreamResponse = exports.StopActivityStreamResponse || (exports.StopActivityStreamResponse = {}));
    var StopDBClusterMessage;
    (function(StopDBClusterMessage2) {
      StopDBClusterMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopDBClusterMessage = exports.StopDBClusterMessage || (exports.StopDBClusterMessage = {}));
    var StopDBClusterResult;
    (function(StopDBClusterResult2) {
      StopDBClusterResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopDBClusterResult = exports.StopDBClusterResult || (exports.StopDBClusterResult = {}));
    var StopDBInstanceMessage;
    (function(StopDBInstanceMessage2) {
      StopDBInstanceMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopDBInstanceMessage = exports.StopDBInstanceMessage || (exports.StopDBInstanceMessage = {}));
    var StopDBInstanceResult;
    (function(StopDBInstanceResult2) {
      StopDBInstanceResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopDBInstanceResult = exports.StopDBInstanceResult || (exports.StopDBInstanceResult = {}));
    var StopDBInstanceAutomatedBackupsReplicationMessage;
    (function(StopDBInstanceAutomatedBackupsReplicationMessage2) {
      StopDBInstanceAutomatedBackupsReplicationMessage2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopDBInstanceAutomatedBackupsReplicationMessage = exports.StopDBInstanceAutomatedBackupsReplicationMessage || (exports.StopDBInstanceAutomatedBackupsReplicationMessage = {}));
    var StopDBInstanceAutomatedBackupsReplicationResult;
    (function(StopDBInstanceAutomatedBackupsReplicationResult2) {
      StopDBInstanceAutomatedBackupsReplicationResult2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StopDBInstanceAutomatedBackupsReplicationResult = exports.StopDBInstanceAutomatedBackupsReplicationResult || (exports.StopDBInstanceAutomatedBackupsReplicationResult = {}));
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_queryDescribeDBClusterEndpointsCommand = exports.serializeAws_queryDescribeDBClusterBacktracksCommand = exports.serializeAws_queryDescribeCertificatesCommand = exports.serializeAws_queryDescribeAccountAttributesCommand = exports.serializeAws_queryDeregisterDBProxyTargetsCommand = exports.serializeAws_queryDeleteOptionGroupCommand = exports.serializeAws_queryDeleteGlobalClusterCommand = exports.serializeAws_queryDeleteEventSubscriptionCommand = exports.serializeAws_queryDeleteDBSubnetGroupCommand = exports.serializeAws_queryDeleteDBSnapshotCommand = exports.serializeAws_queryDeleteDBSecurityGroupCommand = exports.serializeAws_queryDeleteDBProxyEndpointCommand = exports.serializeAws_queryDeleteDBProxyCommand = exports.serializeAws_queryDeleteDBParameterGroupCommand = exports.serializeAws_queryDeleteDBInstanceAutomatedBackupCommand = exports.serializeAws_queryDeleteDBInstanceCommand = exports.serializeAws_queryDeleteDBClusterSnapshotCommand = exports.serializeAws_queryDeleteDBClusterParameterGroupCommand = exports.serializeAws_queryDeleteDBClusterEndpointCommand = exports.serializeAws_queryDeleteDBClusterCommand = exports.serializeAws_queryDeleteCustomDBEngineVersionCommand = exports.serializeAws_queryCreateOptionGroupCommand = exports.serializeAws_queryCreateGlobalClusterCommand = exports.serializeAws_queryCreateEventSubscriptionCommand = exports.serializeAws_queryCreateDBSubnetGroupCommand = exports.serializeAws_queryCreateDBSnapshotCommand = exports.serializeAws_queryCreateDBSecurityGroupCommand = exports.serializeAws_queryCreateDBProxyEndpointCommand = exports.serializeAws_queryCreateDBProxyCommand = exports.serializeAws_queryCreateDBParameterGroupCommand = exports.serializeAws_queryCreateDBInstanceReadReplicaCommand = exports.serializeAws_queryCreateDBInstanceCommand = exports.serializeAws_queryCreateDBClusterSnapshotCommand = exports.serializeAws_queryCreateDBClusterParameterGroupCommand = exports.serializeAws_queryCreateDBClusterEndpointCommand = exports.serializeAws_queryCreateDBClusterCommand = exports.serializeAws_queryCreateCustomDBEngineVersionCommand = exports.serializeAws_queryCopyOptionGroupCommand = exports.serializeAws_queryCopyDBSnapshotCommand = exports.serializeAws_queryCopyDBParameterGroupCommand = exports.serializeAws_queryCopyDBClusterSnapshotCommand = exports.serializeAws_queryCopyDBClusterParameterGroupCommand = exports.serializeAws_queryCancelExportTaskCommand = exports.serializeAws_queryBacktrackDBClusterCommand = exports.serializeAws_queryAuthorizeDBSecurityGroupIngressCommand = exports.serializeAws_queryApplyPendingMaintenanceActionCommand = exports.serializeAws_queryAddTagsToResourceCommand = exports.serializeAws_queryAddSourceIdentifierToSubscriptionCommand = exports.serializeAws_queryAddRoleToDBInstanceCommand = exports.serializeAws_queryAddRoleToDBClusterCommand = void 0;
    exports.serializeAws_queryModifyDBProxyTargetGroupCommand = exports.serializeAws_queryModifyDBProxyEndpointCommand = exports.serializeAws_queryModifyDBProxyCommand = exports.serializeAws_queryModifyDBParameterGroupCommand = exports.serializeAws_queryModifyDBInstanceCommand = exports.serializeAws_queryModifyDBClusterSnapshotAttributeCommand = exports.serializeAws_queryModifyDBClusterParameterGroupCommand = exports.serializeAws_queryModifyDBClusterEndpointCommand = exports.serializeAws_queryModifyDBClusterCommand = exports.serializeAws_queryModifyCustomDBEngineVersionCommand = exports.serializeAws_queryModifyCurrentDBClusterCapacityCommand = exports.serializeAws_queryModifyCertificatesCommand = exports.serializeAws_queryListTagsForResourceCommand = exports.serializeAws_queryFailoverGlobalClusterCommand = exports.serializeAws_queryFailoverDBClusterCommand = exports.serializeAws_queryDownloadDBLogFilePortionCommand = exports.serializeAws_queryDescribeValidDBInstanceModificationsCommand = exports.serializeAws_queryDescribeSourceRegionsCommand = exports.serializeAws_queryDescribeReservedDBInstancesOfferingsCommand = exports.serializeAws_queryDescribeReservedDBInstancesCommand = exports.serializeAws_queryDescribePendingMaintenanceActionsCommand = exports.serializeAws_queryDescribeOrderableDBInstanceOptionsCommand = exports.serializeAws_queryDescribeOptionGroupsCommand = exports.serializeAws_queryDescribeOptionGroupOptionsCommand = exports.serializeAws_queryDescribeGlobalClustersCommand = exports.serializeAws_queryDescribeExportTasksCommand = exports.serializeAws_queryDescribeEventSubscriptionsCommand = exports.serializeAws_queryDescribeEventsCommand = exports.serializeAws_queryDescribeEventCategoriesCommand = exports.serializeAws_queryDescribeEngineDefaultParametersCommand = exports.serializeAws_queryDescribeEngineDefaultClusterParametersCommand = exports.serializeAws_queryDescribeDBSubnetGroupsCommand = exports.serializeAws_queryDescribeDBSnapshotsCommand = exports.serializeAws_queryDescribeDBSnapshotAttributesCommand = exports.serializeAws_queryDescribeDBSecurityGroupsCommand = exports.serializeAws_queryDescribeDBProxyTargetsCommand = exports.serializeAws_queryDescribeDBProxyTargetGroupsCommand = exports.serializeAws_queryDescribeDBProxyEndpointsCommand = exports.serializeAws_queryDescribeDBProxiesCommand = exports.serializeAws_queryDescribeDBParametersCommand = exports.serializeAws_queryDescribeDBParameterGroupsCommand = exports.serializeAws_queryDescribeDBLogFilesCommand = exports.serializeAws_queryDescribeDBInstancesCommand = exports.serializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = exports.serializeAws_queryDescribeDBEngineVersionsCommand = exports.serializeAws_queryDescribeDBClusterSnapshotsCommand = exports.serializeAws_queryDescribeDBClusterSnapshotAttributesCommand = exports.serializeAws_queryDescribeDBClustersCommand = exports.serializeAws_queryDescribeDBClusterParametersCommand = exports.serializeAws_queryDescribeDBClusterParameterGroupsCommand = void 0;
    exports.deserializeAws_queryCreateDBClusterCommand = exports.deserializeAws_queryCreateCustomDBEngineVersionCommand = exports.deserializeAws_queryCopyOptionGroupCommand = exports.deserializeAws_queryCopyDBSnapshotCommand = exports.deserializeAws_queryCopyDBParameterGroupCommand = exports.deserializeAws_queryCopyDBClusterSnapshotCommand = exports.deserializeAws_queryCopyDBClusterParameterGroupCommand = exports.deserializeAws_queryCancelExportTaskCommand = exports.deserializeAws_queryBacktrackDBClusterCommand = exports.deserializeAws_queryAuthorizeDBSecurityGroupIngressCommand = exports.deserializeAws_queryApplyPendingMaintenanceActionCommand = exports.deserializeAws_queryAddTagsToResourceCommand = exports.deserializeAws_queryAddSourceIdentifierToSubscriptionCommand = exports.deserializeAws_queryAddRoleToDBInstanceCommand = exports.deserializeAws_queryAddRoleToDBClusterCommand = exports.serializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = exports.serializeAws_queryStopDBInstanceCommand = exports.serializeAws_queryStopDBClusterCommand = exports.serializeAws_queryStopActivityStreamCommand = exports.serializeAws_queryStartExportTaskCommand = exports.serializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = exports.serializeAws_queryStartDBInstanceCommand = exports.serializeAws_queryStartDBClusterCommand = exports.serializeAws_queryStartActivityStreamCommand = exports.serializeAws_queryRevokeDBSecurityGroupIngressCommand = exports.serializeAws_queryRestoreDBInstanceToPointInTimeCommand = exports.serializeAws_queryRestoreDBInstanceFromS3Command = exports.serializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = exports.serializeAws_queryRestoreDBClusterToPointInTimeCommand = exports.serializeAws_queryRestoreDBClusterFromSnapshotCommand = exports.serializeAws_queryRestoreDBClusterFromS3Command = exports.serializeAws_queryResetDBParameterGroupCommand = exports.serializeAws_queryResetDBClusterParameterGroupCommand = exports.serializeAws_queryRemoveTagsFromResourceCommand = exports.serializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = exports.serializeAws_queryRemoveRoleFromDBInstanceCommand = exports.serializeAws_queryRemoveRoleFromDBClusterCommand = exports.serializeAws_queryRemoveFromGlobalClusterCommand = exports.serializeAws_queryRegisterDBProxyTargetsCommand = exports.serializeAws_queryRebootDBInstanceCommand = exports.serializeAws_queryRebootDBClusterCommand = exports.serializeAws_queryPurchaseReservedDBInstancesOfferingCommand = exports.serializeAws_queryPromoteReadReplicaDBClusterCommand = exports.serializeAws_queryPromoteReadReplicaCommand = exports.serializeAws_queryModifyOptionGroupCommand = exports.serializeAws_queryModifyGlobalClusterCommand = exports.serializeAws_queryModifyEventSubscriptionCommand = exports.serializeAws_queryModifyDBSubnetGroupCommand = exports.serializeAws_queryModifyDBSnapshotAttributeCommand = exports.serializeAws_queryModifyDBSnapshotCommand = void 0;
    exports.deserializeAws_queryDescribeDBProxyTargetsCommand = exports.deserializeAws_queryDescribeDBProxyTargetGroupsCommand = exports.deserializeAws_queryDescribeDBProxyEndpointsCommand = exports.deserializeAws_queryDescribeDBProxiesCommand = exports.deserializeAws_queryDescribeDBParametersCommand = exports.deserializeAws_queryDescribeDBParameterGroupsCommand = exports.deserializeAws_queryDescribeDBLogFilesCommand = exports.deserializeAws_queryDescribeDBInstancesCommand = exports.deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = exports.deserializeAws_queryDescribeDBEngineVersionsCommand = exports.deserializeAws_queryDescribeDBClusterSnapshotsCommand = exports.deserializeAws_queryDescribeDBClusterSnapshotAttributesCommand = exports.deserializeAws_queryDescribeDBClustersCommand = exports.deserializeAws_queryDescribeDBClusterParametersCommand = exports.deserializeAws_queryDescribeDBClusterParameterGroupsCommand = exports.deserializeAws_queryDescribeDBClusterEndpointsCommand = exports.deserializeAws_queryDescribeDBClusterBacktracksCommand = exports.deserializeAws_queryDescribeCertificatesCommand = exports.deserializeAws_queryDescribeAccountAttributesCommand = exports.deserializeAws_queryDeregisterDBProxyTargetsCommand = exports.deserializeAws_queryDeleteOptionGroupCommand = exports.deserializeAws_queryDeleteGlobalClusterCommand = exports.deserializeAws_queryDeleteEventSubscriptionCommand = exports.deserializeAws_queryDeleteDBSubnetGroupCommand = exports.deserializeAws_queryDeleteDBSnapshotCommand = exports.deserializeAws_queryDeleteDBSecurityGroupCommand = exports.deserializeAws_queryDeleteDBProxyEndpointCommand = exports.deserializeAws_queryDeleteDBProxyCommand = exports.deserializeAws_queryDeleteDBParameterGroupCommand = exports.deserializeAws_queryDeleteDBInstanceAutomatedBackupCommand = exports.deserializeAws_queryDeleteDBInstanceCommand = exports.deserializeAws_queryDeleteDBClusterSnapshotCommand = exports.deserializeAws_queryDeleteDBClusterParameterGroupCommand = exports.deserializeAws_queryDeleteDBClusterEndpointCommand = exports.deserializeAws_queryDeleteDBClusterCommand = exports.deserializeAws_queryDeleteCustomDBEngineVersionCommand = exports.deserializeAws_queryCreateOptionGroupCommand = exports.deserializeAws_queryCreateGlobalClusterCommand = exports.deserializeAws_queryCreateEventSubscriptionCommand = exports.deserializeAws_queryCreateDBSubnetGroupCommand = exports.deserializeAws_queryCreateDBSnapshotCommand = exports.deserializeAws_queryCreateDBSecurityGroupCommand = exports.deserializeAws_queryCreateDBProxyEndpointCommand = exports.deserializeAws_queryCreateDBProxyCommand = exports.deserializeAws_queryCreateDBParameterGroupCommand = exports.deserializeAws_queryCreateDBInstanceReadReplicaCommand = exports.deserializeAws_queryCreateDBInstanceCommand = exports.deserializeAws_queryCreateDBClusterSnapshotCommand = exports.deserializeAws_queryCreateDBClusterParameterGroupCommand = exports.deserializeAws_queryCreateDBClusterEndpointCommand = void 0;
    exports.deserializeAws_queryRemoveRoleFromDBInstanceCommand = exports.deserializeAws_queryRemoveRoleFromDBClusterCommand = exports.deserializeAws_queryRemoveFromGlobalClusterCommand = exports.deserializeAws_queryRegisterDBProxyTargetsCommand = exports.deserializeAws_queryRebootDBInstanceCommand = exports.deserializeAws_queryRebootDBClusterCommand = exports.deserializeAws_queryPurchaseReservedDBInstancesOfferingCommand = exports.deserializeAws_queryPromoteReadReplicaDBClusterCommand = exports.deserializeAws_queryPromoteReadReplicaCommand = exports.deserializeAws_queryModifyOptionGroupCommand = exports.deserializeAws_queryModifyGlobalClusterCommand = exports.deserializeAws_queryModifyEventSubscriptionCommand = exports.deserializeAws_queryModifyDBSubnetGroupCommand = exports.deserializeAws_queryModifyDBSnapshotAttributeCommand = exports.deserializeAws_queryModifyDBSnapshotCommand = exports.deserializeAws_queryModifyDBProxyTargetGroupCommand = exports.deserializeAws_queryModifyDBProxyEndpointCommand = exports.deserializeAws_queryModifyDBProxyCommand = exports.deserializeAws_queryModifyDBParameterGroupCommand = exports.deserializeAws_queryModifyDBInstanceCommand = exports.deserializeAws_queryModifyDBClusterSnapshotAttributeCommand = exports.deserializeAws_queryModifyDBClusterParameterGroupCommand = exports.deserializeAws_queryModifyDBClusterEndpointCommand = exports.deserializeAws_queryModifyDBClusterCommand = exports.deserializeAws_queryModifyCustomDBEngineVersionCommand = exports.deserializeAws_queryModifyCurrentDBClusterCapacityCommand = exports.deserializeAws_queryModifyCertificatesCommand = exports.deserializeAws_queryListTagsForResourceCommand = exports.deserializeAws_queryFailoverGlobalClusterCommand = exports.deserializeAws_queryFailoverDBClusterCommand = exports.deserializeAws_queryDownloadDBLogFilePortionCommand = exports.deserializeAws_queryDescribeValidDBInstanceModificationsCommand = exports.deserializeAws_queryDescribeSourceRegionsCommand = exports.deserializeAws_queryDescribeReservedDBInstancesOfferingsCommand = exports.deserializeAws_queryDescribeReservedDBInstancesCommand = exports.deserializeAws_queryDescribePendingMaintenanceActionsCommand = exports.deserializeAws_queryDescribeOrderableDBInstanceOptionsCommand = exports.deserializeAws_queryDescribeOptionGroupsCommand = exports.deserializeAws_queryDescribeOptionGroupOptionsCommand = exports.deserializeAws_queryDescribeGlobalClustersCommand = exports.deserializeAws_queryDescribeExportTasksCommand = exports.deserializeAws_queryDescribeEventSubscriptionsCommand = exports.deserializeAws_queryDescribeEventsCommand = exports.deserializeAws_queryDescribeEventCategoriesCommand = exports.deserializeAws_queryDescribeEngineDefaultParametersCommand = exports.deserializeAws_queryDescribeEngineDefaultClusterParametersCommand = exports.deserializeAws_queryDescribeDBSubnetGroupsCommand = exports.deserializeAws_queryDescribeDBSnapshotsCommand = exports.deserializeAws_queryDescribeDBSnapshotAttributesCommand = exports.deserializeAws_queryDescribeDBSecurityGroupsCommand = void 0;
    exports.deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = exports.deserializeAws_queryStopDBInstanceCommand = exports.deserializeAws_queryStopDBClusterCommand = exports.deserializeAws_queryStopActivityStreamCommand = exports.deserializeAws_queryStartExportTaskCommand = exports.deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = exports.deserializeAws_queryStartDBInstanceCommand = exports.deserializeAws_queryStartDBClusterCommand = exports.deserializeAws_queryStartActivityStreamCommand = exports.deserializeAws_queryRevokeDBSecurityGroupIngressCommand = exports.deserializeAws_queryRestoreDBInstanceToPointInTimeCommand = exports.deserializeAws_queryRestoreDBInstanceFromS3Command = exports.deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = exports.deserializeAws_queryRestoreDBClusterToPointInTimeCommand = exports.deserializeAws_queryRestoreDBClusterFromSnapshotCommand = exports.deserializeAws_queryRestoreDBClusterFromS3Command = exports.deserializeAws_queryResetDBParameterGroupCommand = exports.deserializeAws_queryResetDBClusterParameterGroupCommand = exports.deserializeAws_queryRemoveTagsFromResourceCommand = exports.deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var RDSServiceException_1 = require_RDSServiceException();
    var serializeAws_queryAddRoleToDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAddRoleToDBClusterMessage(input, context)), {
        Action: "AddRoleToDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAddRoleToDBClusterCommand = serializeAws_queryAddRoleToDBClusterCommand;
    var serializeAws_queryAddRoleToDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAddRoleToDBInstanceMessage(input, context)), {
        Action: "AddRoleToDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAddRoleToDBInstanceCommand = serializeAws_queryAddRoleToDBInstanceCommand;
    var serializeAws_queryAddSourceIdentifierToSubscriptionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAddSourceIdentifierToSubscriptionMessage(input, context)), {
        Action: "AddSourceIdentifierToSubscription",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAddSourceIdentifierToSubscriptionCommand = serializeAws_queryAddSourceIdentifierToSubscriptionCommand;
    var serializeAws_queryAddTagsToResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAddTagsToResourceMessage(input, context)), {
        Action: "AddTagsToResource",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAddTagsToResourceCommand = serializeAws_queryAddTagsToResourceCommand;
    var serializeAws_queryApplyPendingMaintenanceActionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryApplyPendingMaintenanceActionMessage(input, context)), {
        Action: "ApplyPendingMaintenanceAction",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryApplyPendingMaintenanceActionCommand = serializeAws_queryApplyPendingMaintenanceActionCommand;
    var serializeAws_queryAuthorizeDBSecurityGroupIngressCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAuthorizeDBSecurityGroupIngressMessage(input, context)), {
        Action: "AuthorizeDBSecurityGroupIngress",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAuthorizeDBSecurityGroupIngressCommand = serializeAws_queryAuthorizeDBSecurityGroupIngressCommand;
    var serializeAws_queryBacktrackDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryBacktrackDBClusterMessage(input, context)), {
        Action: "BacktrackDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryBacktrackDBClusterCommand = serializeAws_queryBacktrackDBClusterCommand;
    var serializeAws_queryCancelExportTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCancelExportTaskMessage(input, context)), {
        Action: "CancelExportTask",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCancelExportTaskCommand = serializeAws_queryCancelExportTaskCommand;
    var serializeAws_queryCopyDBClusterParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCopyDBClusterParameterGroupMessage(input, context)), {
        Action: "CopyDBClusterParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCopyDBClusterParameterGroupCommand = serializeAws_queryCopyDBClusterParameterGroupCommand;
    var serializeAws_queryCopyDBClusterSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCopyDBClusterSnapshotMessage(input, context)), {
        Action: "CopyDBClusterSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCopyDBClusterSnapshotCommand = serializeAws_queryCopyDBClusterSnapshotCommand;
    var serializeAws_queryCopyDBParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCopyDBParameterGroupMessage(input, context)), {
        Action: "CopyDBParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCopyDBParameterGroupCommand = serializeAws_queryCopyDBParameterGroupCommand;
    var serializeAws_queryCopyDBSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCopyDBSnapshotMessage(input, context)), {
        Action: "CopyDBSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCopyDBSnapshotCommand = serializeAws_queryCopyDBSnapshotCommand;
    var serializeAws_queryCopyOptionGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCopyOptionGroupMessage(input, context)), {
        Action: "CopyOptionGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCopyOptionGroupCommand = serializeAws_queryCopyOptionGroupCommand;
    var serializeAws_queryCreateCustomDBEngineVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateCustomDBEngineVersionMessage(input, context)), {
        Action: "CreateCustomDBEngineVersion",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateCustomDBEngineVersionCommand = serializeAws_queryCreateCustomDBEngineVersionCommand;
    var serializeAws_queryCreateDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBClusterMessage(input, context)), {
        Action: "CreateDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBClusterCommand = serializeAws_queryCreateDBClusterCommand;
    var serializeAws_queryCreateDBClusterEndpointCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBClusterEndpointMessage(input, context)), {
        Action: "CreateDBClusterEndpoint",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBClusterEndpointCommand = serializeAws_queryCreateDBClusterEndpointCommand;
    var serializeAws_queryCreateDBClusterParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBClusterParameterGroupMessage(input, context)), {
        Action: "CreateDBClusterParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBClusterParameterGroupCommand = serializeAws_queryCreateDBClusterParameterGroupCommand;
    var serializeAws_queryCreateDBClusterSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBClusterSnapshotMessage(input, context)), {
        Action: "CreateDBClusterSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBClusterSnapshotCommand = serializeAws_queryCreateDBClusterSnapshotCommand;
    var serializeAws_queryCreateDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBInstanceMessage(input, context)), {
        Action: "CreateDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBInstanceCommand = serializeAws_queryCreateDBInstanceCommand;
    var serializeAws_queryCreateDBInstanceReadReplicaCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBInstanceReadReplicaMessage(input, context)), {
        Action: "CreateDBInstanceReadReplica",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBInstanceReadReplicaCommand = serializeAws_queryCreateDBInstanceReadReplicaCommand;
    var serializeAws_queryCreateDBParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBParameterGroupMessage(input, context)), {
        Action: "CreateDBParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBParameterGroupCommand = serializeAws_queryCreateDBParameterGroupCommand;
    var serializeAws_queryCreateDBProxyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBProxyRequest(input, context)), {
        Action: "CreateDBProxy",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBProxyCommand = serializeAws_queryCreateDBProxyCommand;
    var serializeAws_queryCreateDBProxyEndpointCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBProxyEndpointRequest(input, context)), {
        Action: "CreateDBProxyEndpoint",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBProxyEndpointCommand = serializeAws_queryCreateDBProxyEndpointCommand;
    var serializeAws_queryCreateDBSecurityGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBSecurityGroupMessage(input, context)), {
        Action: "CreateDBSecurityGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBSecurityGroupCommand = serializeAws_queryCreateDBSecurityGroupCommand;
    var serializeAws_queryCreateDBSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBSnapshotMessage(input, context)), {
        Action: "CreateDBSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBSnapshotCommand = serializeAws_queryCreateDBSnapshotCommand;
    var serializeAws_queryCreateDBSubnetGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateDBSubnetGroupMessage(input, context)), {
        Action: "CreateDBSubnetGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateDBSubnetGroupCommand = serializeAws_queryCreateDBSubnetGroupCommand;
    var serializeAws_queryCreateEventSubscriptionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateEventSubscriptionMessage(input, context)), {
        Action: "CreateEventSubscription",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateEventSubscriptionCommand = serializeAws_queryCreateEventSubscriptionCommand;
    var serializeAws_queryCreateGlobalClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateGlobalClusterMessage(input, context)), {
        Action: "CreateGlobalCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateGlobalClusterCommand = serializeAws_queryCreateGlobalClusterCommand;
    var serializeAws_queryCreateOptionGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryCreateOptionGroupMessage(input, context)), {
        Action: "CreateOptionGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateOptionGroupCommand = serializeAws_queryCreateOptionGroupCommand;
    var serializeAws_queryDeleteCustomDBEngineVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteCustomDBEngineVersionMessage(input, context)), {
        Action: "DeleteCustomDBEngineVersion",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteCustomDBEngineVersionCommand = serializeAws_queryDeleteCustomDBEngineVersionCommand;
    var serializeAws_queryDeleteDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBClusterMessage(input, context)), {
        Action: "DeleteDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBClusterCommand = serializeAws_queryDeleteDBClusterCommand;
    var serializeAws_queryDeleteDBClusterEndpointCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBClusterEndpointMessage(input, context)), {
        Action: "DeleteDBClusterEndpoint",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBClusterEndpointCommand = serializeAws_queryDeleteDBClusterEndpointCommand;
    var serializeAws_queryDeleteDBClusterParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBClusterParameterGroupMessage(input, context)), {
        Action: "DeleteDBClusterParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBClusterParameterGroupCommand = serializeAws_queryDeleteDBClusterParameterGroupCommand;
    var serializeAws_queryDeleteDBClusterSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBClusterSnapshotMessage(input, context)), {
        Action: "DeleteDBClusterSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBClusterSnapshotCommand = serializeAws_queryDeleteDBClusterSnapshotCommand;
    var serializeAws_queryDeleteDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBInstanceMessage(input, context)), {
        Action: "DeleteDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBInstanceCommand = serializeAws_queryDeleteDBInstanceCommand;
    var serializeAws_queryDeleteDBInstanceAutomatedBackupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBInstanceAutomatedBackupMessage(input, context)), {
        Action: "DeleteDBInstanceAutomatedBackup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBInstanceAutomatedBackupCommand = serializeAws_queryDeleteDBInstanceAutomatedBackupCommand;
    var serializeAws_queryDeleteDBParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBParameterGroupMessage(input, context)), {
        Action: "DeleteDBParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBParameterGroupCommand = serializeAws_queryDeleteDBParameterGroupCommand;
    var serializeAws_queryDeleteDBProxyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBProxyRequest(input, context)), {
        Action: "DeleteDBProxy",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBProxyCommand = serializeAws_queryDeleteDBProxyCommand;
    var serializeAws_queryDeleteDBProxyEndpointCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBProxyEndpointRequest(input, context)), {
        Action: "DeleteDBProxyEndpoint",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBProxyEndpointCommand = serializeAws_queryDeleteDBProxyEndpointCommand;
    var serializeAws_queryDeleteDBSecurityGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBSecurityGroupMessage(input, context)), {
        Action: "DeleteDBSecurityGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBSecurityGroupCommand = serializeAws_queryDeleteDBSecurityGroupCommand;
    var serializeAws_queryDeleteDBSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBSnapshotMessage(input, context)), {
        Action: "DeleteDBSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBSnapshotCommand = serializeAws_queryDeleteDBSnapshotCommand;
    var serializeAws_queryDeleteDBSubnetGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteDBSubnetGroupMessage(input, context)), {
        Action: "DeleteDBSubnetGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteDBSubnetGroupCommand = serializeAws_queryDeleteDBSubnetGroupCommand;
    var serializeAws_queryDeleteEventSubscriptionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteEventSubscriptionMessage(input, context)), {
        Action: "DeleteEventSubscription",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteEventSubscriptionCommand = serializeAws_queryDeleteEventSubscriptionCommand;
    var serializeAws_queryDeleteGlobalClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteGlobalClusterMessage(input, context)), {
        Action: "DeleteGlobalCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteGlobalClusterCommand = serializeAws_queryDeleteGlobalClusterCommand;
    var serializeAws_queryDeleteOptionGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeleteOptionGroupMessage(input, context)), {
        Action: "DeleteOptionGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteOptionGroupCommand = serializeAws_queryDeleteOptionGroupCommand;
    var serializeAws_queryDeregisterDBProxyTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDeregisterDBProxyTargetsRequest(input, context)), {
        Action: "DeregisterDBProxyTargets",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeregisterDBProxyTargetsCommand = serializeAws_queryDeregisterDBProxyTargetsCommand;
    var serializeAws_queryDescribeAccountAttributesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeAccountAttributesMessage(input, context)), {
        Action: "DescribeAccountAttributes",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeAccountAttributesCommand = serializeAws_queryDescribeAccountAttributesCommand;
    var serializeAws_queryDescribeCertificatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeCertificatesMessage(input, context)), {
        Action: "DescribeCertificates",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeCertificatesCommand = serializeAws_queryDescribeCertificatesCommand;
    var serializeAws_queryDescribeDBClusterBacktracksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBClusterBacktracksMessage(input, context)), {
        Action: "DescribeDBClusterBacktracks",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBClusterBacktracksCommand = serializeAws_queryDescribeDBClusterBacktracksCommand;
    var serializeAws_queryDescribeDBClusterEndpointsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBClusterEndpointsMessage(input, context)), {
        Action: "DescribeDBClusterEndpoints",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBClusterEndpointsCommand = serializeAws_queryDescribeDBClusterEndpointsCommand;
    var serializeAws_queryDescribeDBClusterParameterGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBClusterParameterGroupsMessage(input, context)), {
        Action: "DescribeDBClusterParameterGroups",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBClusterParameterGroupsCommand = serializeAws_queryDescribeDBClusterParameterGroupsCommand;
    var serializeAws_queryDescribeDBClusterParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBClusterParametersMessage(input, context)), {
        Action: "DescribeDBClusterParameters",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBClusterParametersCommand = serializeAws_queryDescribeDBClusterParametersCommand;
    var serializeAws_queryDescribeDBClustersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBClustersMessage(input, context)), {
        Action: "DescribeDBClusters",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBClustersCommand = serializeAws_queryDescribeDBClustersCommand;
    var serializeAws_queryDescribeDBClusterSnapshotAttributesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBClusterSnapshotAttributesMessage(input, context)), {
        Action: "DescribeDBClusterSnapshotAttributes",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBClusterSnapshotAttributesCommand = serializeAws_queryDescribeDBClusterSnapshotAttributesCommand;
    var serializeAws_queryDescribeDBClusterSnapshotsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBClusterSnapshotsMessage(input, context)), {
        Action: "DescribeDBClusterSnapshots",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBClusterSnapshotsCommand = serializeAws_queryDescribeDBClusterSnapshotsCommand;
    var serializeAws_queryDescribeDBEngineVersionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBEngineVersionsMessage(input, context)), {
        Action: "DescribeDBEngineVersions",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBEngineVersionsCommand = serializeAws_queryDescribeDBEngineVersionsCommand;
    var serializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBInstanceAutomatedBackupsMessage(input, context)), {
        Action: "DescribeDBInstanceAutomatedBackups",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = serializeAws_queryDescribeDBInstanceAutomatedBackupsCommand;
    var serializeAws_queryDescribeDBInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBInstancesMessage(input, context)), {
        Action: "DescribeDBInstances",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBInstancesCommand = serializeAws_queryDescribeDBInstancesCommand;
    var serializeAws_queryDescribeDBLogFilesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBLogFilesMessage(input, context)), {
        Action: "DescribeDBLogFiles",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBLogFilesCommand = serializeAws_queryDescribeDBLogFilesCommand;
    var serializeAws_queryDescribeDBParameterGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBParameterGroupsMessage(input, context)), {
        Action: "DescribeDBParameterGroups",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBParameterGroupsCommand = serializeAws_queryDescribeDBParameterGroupsCommand;
    var serializeAws_queryDescribeDBParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBParametersMessage(input, context)), {
        Action: "DescribeDBParameters",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBParametersCommand = serializeAws_queryDescribeDBParametersCommand;
    var serializeAws_queryDescribeDBProxiesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBProxiesRequest(input, context)), {
        Action: "DescribeDBProxies",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBProxiesCommand = serializeAws_queryDescribeDBProxiesCommand;
    var serializeAws_queryDescribeDBProxyEndpointsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBProxyEndpointsRequest(input, context)), {
        Action: "DescribeDBProxyEndpoints",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBProxyEndpointsCommand = serializeAws_queryDescribeDBProxyEndpointsCommand;
    var serializeAws_queryDescribeDBProxyTargetGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBProxyTargetGroupsRequest(input, context)), {
        Action: "DescribeDBProxyTargetGroups",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBProxyTargetGroupsCommand = serializeAws_queryDescribeDBProxyTargetGroupsCommand;
    var serializeAws_queryDescribeDBProxyTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBProxyTargetsRequest(input, context)), {
        Action: "DescribeDBProxyTargets",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBProxyTargetsCommand = serializeAws_queryDescribeDBProxyTargetsCommand;
    var serializeAws_queryDescribeDBSecurityGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBSecurityGroupsMessage(input, context)), {
        Action: "DescribeDBSecurityGroups",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBSecurityGroupsCommand = serializeAws_queryDescribeDBSecurityGroupsCommand;
    var serializeAws_queryDescribeDBSnapshotAttributesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBSnapshotAttributesMessage(input, context)), {
        Action: "DescribeDBSnapshotAttributes",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBSnapshotAttributesCommand = serializeAws_queryDescribeDBSnapshotAttributesCommand;
    var serializeAws_queryDescribeDBSnapshotsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBSnapshotsMessage(input, context)), {
        Action: "DescribeDBSnapshots",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBSnapshotsCommand = serializeAws_queryDescribeDBSnapshotsCommand;
    var serializeAws_queryDescribeDBSubnetGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeDBSubnetGroupsMessage(input, context)), {
        Action: "DescribeDBSubnetGroups",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeDBSubnetGroupsCommand = serializeAws_queryDescribeDBSubnetGroupsCommand;
    var serializeAws_queryDescribeEngineDefaultClusterParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeEngineDefaultClusterParametersMessage(input, context)), {
        Action: "DescribeEngineDefaultClusterParameters",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeEngineDefaultClusterParametersCommand = serializeAws_queryDescribeEngineDefaultClusterParametersCommand;
    var serializeAws_queryDescribeEngineDefaultParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeEngineDefaultParametersMessage(input, context)), {
        Action: "DescribeEngineDefaultParameters",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeEngineDefaultParametersCommand = serializeAws_queryDescribeEngineDefaultParametersCommand;
    var serializeAws_queryDescribeEventCategoriesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeEventCategoriesMessage(input, context)), {
        Action: "DescribeEventCategories",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeEventCategoriesCommand = serializeAws_queryDescribeEventCategoriesCommand;
    var serializeAws_queryDescribeEventsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeEventsMessage(input, context)), {
        Action: "DescribeEvents",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeEventsCommand = serializeAws_queryDescribeEventsCommand;
    var serializeAws_queryDescribeEventSubscriptionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeEventSubscriptionsMessage(input, context)), {
        Action: "DescribeEventSubscriptions",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeEventSubscriptionsCommand = serializeAws_queryDescribeEventSubscriptionsCommand;
    var serializeAws_queryDescribeExportTasksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeExportTasksMessage(input, context)), {
        Action: "DescribeExportTasks",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeExportTasksCommand = serializeAws_queryDescribeExportTasksCommand;
    var serializeAws_queryDescribeGlobalClustersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeGlobalClustersMessage(input, context)), {
        Action: "DescribeGlobalClusters",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeGlobalClustersCommand = serializeAws_queryDescribeGlobalClustersCommand;
    var serializeAws_queryDescribeOptionGroupOptionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeOptionGroupOptionsMessage(input, context)), {
        Action: "DescribeOptionGroupOptions",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeOptionGroupOptionsCommand = serializeAws_queryDescribeOptionGroupOptionsCommand;
    var serializeAws_queryDescribeOptionGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeOptionGroupsMessage(input, context)), {
        Action: "DescribeOptionGroups",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeOptionGroupsCommand = serializeAws_queryDescribeOptionGroupsCommand;
    var serializeAws_queryDescribeOrderableDBInstanceOptionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeOrderableDBInstanceOptionsMessage(input, context)), {
        Action: "DescribeOrderableDBInstanceOptions",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeOrderableDBInstanceOptionsCommand = serializeAws_queryDescribeOrderableDBInstanceOptionsCommand;
    var serializeAws_queryDescribePendingMaintenanceActionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribePendingMaintenanceActionsMessage(input, context)), {
        Action: "DescribePendingMaintenanceActions",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribePendingMaintenanceActionsCommand = serializeAws_queryDescribePendingMaintenanceActionsCommand;
    var serializeAws_queryDescribeReservedDBInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeReservedDBInstancesMessage(input, context)), {
        Action: "DescribeReservedDBInstances",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeReservedDBInstancesCommand = serializeAws_queryDescribeReservedDBInstancesCommand;
    var serializeAws_queryDescribeReservedDBInstancesOfferingsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeReservedDBInstancesOfferingsMessage(input, context)), {
        Action: "DescribeReservedDBInstancesOfferings",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeReservedDBInstancesOfferingsCommand = serializeAws_queryDescribeReservedDBInstancesOfferingsCommand;
    var serializeAws_queryDescribeSourceRegionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeSourceRegionsMessage(input, context)), {
        Action: "DescribeSourceRegions",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeSourceRegionsCommand = serializeAws_queryDescribeSourceRegionsCommand;
    var serializeAws_queryDescribeValidDBInstanceModificationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDescribeValidDBInstanceModificationsMessage(input, context)), {
        Action: "DescribeValidDBInstanceModifications",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeValidDBInstanceModificationsCommand = serializeAws_queryDescribeValidDBInstanceModificationsCommand;
    var serializeAws_queryDownloadDBLogFilePortionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDownloadDBLogFilePortionMessage(input, context)), {
        Action: "DownloadDBLogFilePortion",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDownloadDBLogFilePortionCommand = serializeAws_queryDownloadDBLogFilePortionCommand;
    var serializeAws_queryFailoverDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryFailoverDBClusterMessage(input, context)), {
        Action: "FailoverDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryFailoverDBClusterCommand = serializeAws_queryFailoverDBClusterCommand;
    var serializeAws_queryFailoverGlobalClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryFailoverGlobalClusterMessage(input, context)), {
        Action: "FailoverGlobalCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryFailoverGlobalClusterCommand = serializeAws_queryFailoverGlobalClusterCommand;
    var serializeAws_queryListTagsForResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryListTagsForResourceMessage(input, context)), {
        Action: "ListTagsForResource",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListTagsForResourceCommand = serializeAws_queryListTagsForResourceCommand;
    var serializeAws_queryModifyCertificatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyCertificatesMessage(input, context)), {
        Action: "ModifyCertificates",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyCertificatesCommand = serializeAws_queryModifyCertificatesCommand;
    var serializeAws_queryModifyCurrentDBClusterCapacityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyCurrentDBClusterCapacityMessage(input, context)), {
        Action: "ModifyCurrentDBClusterCapacity",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyCurrentDBClusterCapacityCommand = serializeAws_queryModifyCurrentDBClusterCapacityCommand;
    var serializeAws_queryModifyCustomDBEngineVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyCustomDBEngineVersionMessage(input, context)), {
        Action: "ModifyCustomDBEngineVersion",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyCustomDBEngineVersionCommand = serializeAws_queryModifyCustomDBEngineVersionCommand;
    var serializeAws_queryModifyDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBClusterMessage(input, context)), {
        Action: "ModifyDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBClusterCommand = serializeAws_queryModifyDBClusterCommand;
    var serializeAws_queryModifyDBClusterEndpointCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBClusterEndpointMessage(input, context)), {
        Action: "ModifyDBClusterEndpoint",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBClusterEndpointCommand = serializeAws_queryModifyDBClusterEndpointCommand;
    var serializeAws_queryModifyDBClusterParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBClusterParameterGroupMessage(input, context)), {
        Action: "ModifyDBClusterParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBClusterParameterGroupCommand = serializeAws_queryModifyDBClusterParameterGroupCommand;
    var serializeAws_queryModifyDBClusterSnapshotAttributeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBClusterSnapshotAttributeMessage(input, context)), {
        Action: "ModifyDBClusterSnapshotAttribute",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBClusterSnapshotAttributeCommand = serializeAws_queryModifyDBClusterSnapshotAttributeCommand;
    var serializeAws_queryModifyDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBInstanceMessage(input, context)), {
        Action: "ModifyDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBInstanceCommand = serializeAws_queryModifyDBInstanceCommand;
    var serializeAws_queryModifyDBParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBParameterGroupMessage(input, context)), {
        Action: "ModifyDBParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBParameterGroupCommand = serializeAws_queryModifyDBParameterGroupCommand;
    var serializeAws_queryModifyDBProxyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBProxyRequest(input, context)), {
        Action: "ModifyDBProxy",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBProxyCommand = serializeAws_queryModifyDBProxyCommand;
    var serializeAws_queryModifyDBProxyEndpointCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBProxyEndpointRequest(input, context)), {
        Action: "ModifyDBProxyEndpoint",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBProxyEndpointCommand = serializeAws_queryModifyDBProxyEndpointCommand;
    var serializeAws_queryModifyDBProxyTargetGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBProxyTargetGroupRequest(input, context)), {
        Action: "ModifyDBProxyTargetGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBProxyTargetGroupCommand = serializeAws_queryModifyDBProxyTargetGroupCommand;
    var serializeAws_queryModifyDBSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBSnapshotMessage(input, context)), {
        Action: "ModifyDBSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBSnapshotCommand = serializeAws_queryModifyDBSnapshotCommand;
    var serializeAws_queryModifyDBSnapshotAttributeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBSnapshotAttributeMessage(input, context)), {
        Action: "ModifyDBSnapshotAttribute",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBSnapshotAttributeCommand = serializeAws_queryModifyDBSnapshotAttributeCommand;
    var serializeAws_queryModifyDBSubnetGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyDBSubnetGroupMessage(input, context)), {
        Action: "ModifyDBSubnetGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyDBSubnetGroupCommand = serializeAws_queryModifyDBSubnetGroupCommand;
    var serializeAws_queryModifyEventSubscriptionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyEventSubscriptionMessage(input, context)), {
        Action: "ModifyEventSubscription",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyEventSubscriptionCommand = serializeAws_queryModifyEventSubscriptionCommand;
    var serializeAws_queryModifyGlobalClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyGlobalClusterMessage(input, context)), {
        Action: "ModifyGlobalCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyGlobalClusterCommand = serializeAws_queryModifyGlobalClusterCommand;
    var serializeAws_queryModifyOptionGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryModifyOptionGroupMessage(input, context)), {
        Action: "ModifyOptionGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryModifyOptionGroupCommand = serializeAws_queryModifyOptionGroupCommand;
    var serializeAws_queryPromoteReadReplicaCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryPromoteReadReplicaMessage(input, context)), {
        Action: "PromoteReadReplica",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPromoteReadReplicaCommand = serializeAws_queryPromoteReadReplicaCommand;
    var serializeAws_queryPromoteReadReplicaDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryPromoteReadReplicaDBClusterMessage(input, context)), {
        Action: "PromoteReadReplicaDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPromoteReadReplicaDBClusterCommand = serializeAws_queryPromoteReadReplicaDBClusterCommand;
    var serializeAws_queryPurchaseReservedDBInstancesOfferingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryPurchaseReservedDBInstancesOfferingMessage(input, context)), {
        Action: "PurchaseReservedDBInstancesOffering",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPurchaseReservedDBInstancesOfferingCommand = serializeAws_queryPurchaseReservedDBInstancesOfferingCommand;
    var serializeAws_queryRebootDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRebootDBClusterMessage(input, context)), {
        Action: "RebootDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRebootDBClusterCommand = serializeAws_queryRebootDBClusterCommand;
    var serializeAws_queryRebootDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRebootDBInstanceMessage(input, context)), {
        Action: "RebootDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRebootDBInstanceCommand = serializeAws_queryRebootDBInstanceCommand;
    var serializeAws_queryRegisterDBProxyTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRegisterDBProxyTargetsRequest(input, context)), {
        Action: "RegisterDBProxyTargets",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRegisterDBProxyTargetsCommand = serializeAws_queryRegisterDBProxyTargetsCommand;
    var serializeAws_queryRemoveFromGlobalClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRemoveFromGlobalClusterMessage(input, context)), {
        Action: "RemoveFromGlobalCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveFromGlobalClusterCommand = serializeAws_queryRemoveFromGlobalClusterCommand;
    var serializeAws_queryRemoveRoleFromDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRemoveRoleFromDBClusterMessage(input, context)), {
        Action: "RemoveRoleFromDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveRoleFromDBClusterCommand = serializeAws_queryRemoveRoleFromDBClusterCommand;
    var serializeAws_queryRemoveRoleFromDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRemoveRoleFromDBInstanceMessage(input, context)), {
        Action: "RemoveRoleFromDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveRoleFromDBInstanceCommand = serializeAws_queryRemoveRoleFromDBInstanceCommand;
    var serializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRemoveSourceIdentifierFromSubscriptionMessage(input, context)), {
        Action: "RemoveSourceIdentifierFromSubscription",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = serializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand;
    var serializeAws_queryRemoveTagsFromResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRemoveTagsFromResourceMessage(input, context)), {
        Action: "RemoveTagsFromResource",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveTagsFromResourceCommand = serializeAws_queryRemoveTagsFromResourceCommand;
    var serializeAws_queryResetDBClusterParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryResetDBClusterParameterGroupMessage(input, context)), {
        Action: "ResetDBClusterParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryResetDBClusterParameterGroupCommand = serializeAws_queryResetDBClusterParameterGroupCommand;
    var serializeAws_queryResetDBParameterGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryResetDBParameterGroupMessage(input, context)), {
        Action: "ResetDBParameterGroup",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryResetDBParameterGroupCommand = serializeAws_queryResetDBParameterGroupCommand;
    var serializeAws_queryRestoreDBClusterFromS3Command = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRestoreDBClusterFromS3Message(input, context)), {
        Action: "RestoreDBClusterFromS3",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRestoreDBClusterFromS3Command = serializeAws_queryRestoreDBClusterFromS3Command;
    var serializeAws_queryRestoreDBClusterFromSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRestoreDBClusterFromSnapshotMessage(input, context)), {
        Action: "RestoreDBClusterFromSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRestoreDBClusterFromSnapshotCommand = serializeAws_queryRestoreDBClusterFromSnapshotCommand;
    var serializeAws_queryRestoreDBClusterToPointInTimeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRestoreDBClusterToPointInTimeMessage(input, context)), {
        Action: "RestoreDBClusterToPointInTime",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRestoreDBClusterToPointInTimeCommand = serializeAws_queryRestoreDBClusterToPointInTimeCommand;
    var serializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRestoreDBInstanceFromDBSnapshotMessage(input, context)), {
        Action: "RestoreDBInstanceFromDBSnapshot",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = serializeAws_queryRestoreDBInstanceFromDBSnapshotCommand;
    var serializeAws_queryRestoreDBInstanceFromS3Command = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRestoreDBInstanceFromS3Message(input, context)), {
        Action: "RestoreDBInstanceFromS3",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRestoreDBInstanceFromS3Command = serializeAws_queryRestoreDBInstanceFromS3Command;
    var serializeAws_queryRestoreDBInstanceToPointInTimeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRestoreDBInstanceToPointInTimeMessage(input, context)), {
        Action: "RestoreDBInstanceToPointInTime",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRestoreDBInstanceToPointInTimeCommand = serializeAws_queryRestoreDBInstanceToPointInTimeCommand;
    var serializeAws_queryRevokeDBSecurityGroupIngressCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryRevokeDBSecurityGroupIngressMessage(input, context)), {
        Action: "RevokeDBSecurityGroupIngress",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRevokeDBSecurityGroupIngressCommand = serializeAws_queryRevokeDBSecurityGroupIngressCommand;
    var serializeAws_queryStartActivityStreamCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStartActivityStreamRequest(input, context)), {
        Action: "StartActivityStream",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStartActivityStreamCommand = serializeAws_queryStartActivityStreamCommand;
    var serializeAws_queryStartDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStartDBClusterMessage(input, context)), {
        Action: "StartDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStartDBClusterCommand = serializeAws_queryStartDBClusterCommand;
    var serializeAws_queryStartDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStartDBInstanceMessage(input, context)), {
        Action: "StartDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStartDBInstanceCommand = serializeAws_queryStartDBInstanceCommand;
    var serializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStartDBInstanceAutomatedBackupsReplicationMessage(input, context)), {
        Action: "StartDBInstanceAutomatedBackupsReplication",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = serializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand;
    var serializeAws_queryStartExportTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStartExportTaskMessage(input, context)), {
        Action: "StartExportTask",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStartExportTaskCommand = serializeAws_queryStartExportTaskCommand;
    var serializeAws_queryStopActivityStreamCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStopActivityStreamRequest(input, context)), {
        Action: "StopActivityStream",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStopActivityStreamCommand = serializeAws_queryStopActivityStreamCommand;
    var serializeAws_queryStopDBClusterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStopDBClusterMessage(input, context)), {
        Action: "StopDBCluster",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStopDBClusterCommand = serializeAws_queryStopDBClusterCommand;
    var serializeAws_queryStopDBInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStopDBInstanceMessage(input, context)), {
        Action: "StopDBInstance",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStopDBInstanceCommand = serializeAws_queryStopDBInstanceCommand;
    var serializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryStopDBInstanceAutomatedBackupsReplicationMessage(input, context)), {
        Action: "StopDBInstanceAutomatedBackupsReplication",
        Version: "2014-10-31"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = serializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand;
    var deserializeAws_queryAddRoleToDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAddRoleToDBClusterCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAddRoleToDBClusterCommand = deserializeAws_queryAddRoleToDBClusterCommand;
    var deserializeAws_queryAddRoleToDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterRoleAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterRoleAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterRoleAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterRoleQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterRoleQuotaExceededFault":
          throw await deserializeAws_queryDBClusterRoleQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAddRoleToDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAddRoleToDBInstanceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAddRoleToDBInstanceCommand = deserializeAws_queryAddRoleToDBInstanceCommand;
    var deserializeAws_queryAddRoleToDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceRoleAlreadyExistsFault":
        case "com.amazonaws.rds#DBInstanceRoleAlreadyExistsFault":
          throw await deserializeAws_queryDBInstanceRoleAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceRoleQuotaExceededFault":
        case "com.amazonaws.rds#DBInstanceRoleQuotaExceededFault":
          throw await deserializeAws_queryDBInstanceRoleQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAddSourceIdentifierToSubscriptionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAddSourceIdentifierToSubscriptionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAddSourceIdentifierToSubscriptionResult(data.AddSourceIdentifierToSubscriptionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAddSourceIdentifierToSubscriptionCommand = deserializeAws_queryAddSourceIdentifierToSubscriptionCommand;
    var deserializeAws_queryAddSourceIdentifierToSubscriptionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "SourceNotFoundFault":
        case "com.amazonaws.rds#SourceNotFoundFault":
          throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionNotFoundFault":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
          throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAddTagsToResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAddTagsToResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAddTagsToResourceCommand = deserializeAws_queryAddTagsToResourceCommand;
    var deserializeAws_queryAddTagsToResourceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryApplyPendingMaintenanceActionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryApplyPendingMaintenanceActionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryApplyPendingMaintenanceActionResult(data.ApplyPendingMaintenanceActionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryApplyPendingMaintenanceActionCommand = deserializeAws_queryApplyPendingMaintenanceActionCommand;
    var deserializeAws_queryApplyPendingMaintenanceActionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
          throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAuthorizeDBSecurityGroupIngressCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAuthorizeDBSecurityGroupIngressCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAuthorizeDBSecurityGroupIngressResult(data.AuthorizeDBSecurityGroupIngressResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAuthorizeDBSecurityGroupIngressCommand = deserializeAws_queryAuthorizeDBSecurityGroupIngressCommand;
    var deserializeAws_queryAuthorizeDBSecurityGroupIngressCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationAlreadyExistsFault":
        case "com.amazonaws.rds#AuthorizationAlreadyExistsFault":
          throw await deserializeAws_queryAuthorizationAlreadyExistsFaultResponse(parsedOutput, context);
        case "AuthorizationQuotaExceededFault":
        case "com.amazonaws.rds#AuthorizationQuotaExceededFault":
          throw await deserializeAws_queryAuthorizationQuotaExceededFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
          throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryBacktrackDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryBacktrackDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterBacktrack(data.BacktrackDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryBacktrackDBClusterCommand = deserializeAws_queryBacktrackDBClusterCommand;
    var deserializeAws_queryBacktrackDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCancelExportTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCancelExportTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryExportTask(data.CancelExportTaskResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCancelExportTaskCommand = deserializeAws_queryCancelExportTaskCommand;
    var deserializeAws_queryCancelExportTaskCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportTaskNotFoundFault":
        case "com.amazonaws.rds#ExportTaskNotFoundFault":
          throw await deserializeAws_queryExportTaskNotFoundFaultResponse(parsedOutput, context);
        case "InvalidExportTaskStateFault":
        case "com.amazonaws.rds#InvalidExportTaskStateFault":
          throw await deserializeAws_queryInvalidExportTaskStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCopyDBClusterParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBClusterParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCopyDBClusterParameterGroupResult(data.CopyDBClusterParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCopyDBClusterParameterGroupCommand = deserializeAws_queryCopyDBClusterParameterGroupCommand;
    var deserializeAws_queryCopyDBClusterParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupAlreadyExistsFault":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
          throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceededFault":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
          throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCopyDBClusterSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBClusterSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCopyDBClusterSnapshotResult(data.CopyDBClusterSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCopyDBClusterSnapshotCommand = deserializeAws_queryCopyDBClusterSnapshotCommand;
    var deserializeAws_queryCopyDBClusterSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
          throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCopyDBParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCopyDBParameterGroupResult(data.CopyDBParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCopyDBParameterGroupCommand = deserializeAws_queryCopyDBParameterGroupCommand;
    var deserializeAws_queryCopyDBParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupAlreadyExistsFault":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
          throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceededFault":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
          throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCopyDBSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCopyDBSnapshotResult(data.CopyDBSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCopyDBSnapshotCommand = deserializeAws_queryCopyDBSnapshotCommand;
    var deserializeAws_queryCopyDBSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomAvailabilityZoneNotFoundFault":
        case "com.amazonaws.rds#CustomAvailabilityZoneNotFoundFault":
          throw await deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
          throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
          throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCopyOptionGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCopyOptionGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCopyOptionGroupResult(data.CopyOptionGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCopyOptionGroupCommand = deserializeAws_queryCopyOptionGroupCommand;
    var deserializeAws_queryCopyOptionGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "OptionGroupAlreadyExistsFault":
        case "com.amazonaws.rds#OptionGroupAlreadyExistsFault":
          throw await deserializeAws_queryOptionGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "OptionGroupQuotaExceededFault":
        case "com.amazonaws.rds#OptionGroupQuotaExceededFault":
          throw await deserializeAws_queryOptionGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateCustomDBEngineVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateCustomDBEngineVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBEngineVersion(data.CreateCustomDBEngineVersionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateCustomDBEngineVersionCommand = deserializeAws_queryCreateCustomDBEngineVersionCommand;
    var deserializeAws_queryCreateCustomDBEngineVersionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomDBEngineVersionAlreadyExistsFault":
        case "com.amazonaws.rds#CustomDBEngineVersionAlreadyExistsFault":
          throw await deserializeAws_queryCustomDBEngineVersionAlreadyExistsFaultResponse(parsedOutput, context);
        case "CustomDBEngineVersionQuotaExceededFault":
        case "com.amazonaws.rds#CustomDBEngineVersionQuotaExceededFault":
          throw await deserializeAws_queryCustomDBEngineVersionQuotaExceededFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBClusterResult(data.CreateDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBClusterCommand = deserializeAws_queryCreateDBClusterCommand;
    var deserializeAws_queryCreateDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
          throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
          throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
          throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
          throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
          throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBClusterEndpointCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterEndpointCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterEndpoint(data.CreateDBClusterEndpointResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBClusterEndpointCommand = deserializeAws_queryCreateDBClusterEndpointCommand;
    var deserializeAws_queryCreateDBClusterEndpointCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterEndpointAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterEndpointAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterEndpointQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterEndpointQuotaExceededFault":
          throw await deserializeAws_queryDBClusterEndpointQuotaExceededFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBClusterParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBClusterParameterGroupResult(data.CreateDBClusterParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBClusterParameterGroupCommand = deserializeAws_queryCreateDBClusterParameterGroupCommand;
    var deserializeAws_queryCreateDBClusterParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupAlreadyExistsFault":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
          throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceededFault":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
          throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBClusterSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBClusterSnapshotResult(data.CreateDBClusterSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBClusterSnapshotCommand = deserializeAws_queryCreateDBClusterSnapshotCommand;
    var deserializeAws_queryCreateDBClusterSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
          throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBInstanceResult(data.CreateDBInstanceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBInstanceCommand = deserializeAws_queryCreateDBInstanceCommand;
    var deserializeAws_queryCreateDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFoundFault":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
          throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
          throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExistsFault":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
          throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceededFault":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
          throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacityFault":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
          throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
          throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
          throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupportedFault":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
          throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBInstanceReadReplicaCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBInstanceReadReplicaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBInstanceReadReplicaResult(data.CreateDBInstanceReadReplicaResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBInstanceReadReplicaCommand = deserializeAws_queryCreateDBInstanceReadReplicaCommand;
    var deserializeAws_queryCreateDBInstanceReadReplicaCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceAlreadyExistsFault":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
          throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotAllowedFault":
        case "com.amazonaws.rds#DBSubnetGroupNotAllowedFault":
          throw await deserializeAws_queryDBSubnetGroupNotAllowedFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceededFault":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
          throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacityFault":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
          throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupFault":
          throw await deserializeAws_queryInvalidDBSubnetGroupFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
          throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
          throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupportedFault":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
          throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBParameterGroupResult(data.CreateDBParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBParameterGroupCommand = deserializeAws_queryCreateDBParameterGroupCommand;
    var deserializeAws_queryCreateDBParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupAlreadyExistsFault":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
          throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceededFault":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
          throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBProxyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBProxyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBProxyResponse(data.CreateDBProxyResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBProxyCommand = deserializeAws_queryCreateDBProxyCommand;
    var deserializeAws_queryCreateDBProxyCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyAlreadyExistsFault":
          throw await deserializeAws_queryDBProxyAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyQuotaExceededFault":
        case "com.amazonaws.rds#DBProxyQuotaExceededFault":
          throw await deserializeAws_queryDBProxyQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBProxyEndpointCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBProxyEndpointCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBProxyEndpointResponse(data.CreateDBProxyEndpointResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBProxyEndpointCommand = deserializeAws_queryCreateDBProxyEndpointCommand;
    var deserializeAws_queryCreateDBProxyEndpointCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault":
          throw await deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyEndpointQuotaExceededFault":
        case "com.amazonaws.rds#DBProxyEndpointQuotaExceededFault":
          throw await deserializeAws_queryDBProxyEndpointQuotaExceededFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBSecurityGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBSecurityGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBSecurityGroupResult(data.CreateDBSecurityGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBSecurityGroupCommand = deserializeAws_queryCreateDBSecurityGroupCommand;
    var deserializeAws_queryCreateDBSecurityGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSecurityGroupAlreadyExistsFault":
        case "com.amazonaws.rds#DBSecurityGroupAlreadyExistsFault":
          throw await deserializeAws_queryDBSecurityGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotSupportedFault":
        case "com.amazonaws.rds#DBSecurityGroupNotSupportedFault":
          throw await deserializeAws_queryDBSecurityGroupNotSupportedFaultResponse(parsedOutput, context);
        case "DBSecurityGroupQuotaExceededFault":
        case "com.amazonaws.rds#DBSecurityGroupQuotaExceededFault":
          throw await deserializeAws_queryDBSecurityGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBSnapshotResult(data.CreateDBSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBSnapshotCommand = deserializeAws_queryCreateDBSnapshotCommand;
    var deserializeAws_queryCreateDBSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
          throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
          throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateDBSubnetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBSubnetGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateDBSubnetGroupResult(data.CreateDBSubnetGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateDBSubnetGroupCommand = deserializeAws_queryCreateDBSubnetGroupCommand;
    var deserializeAws_queryCreateDBSubnetGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSubnetGroupAlreadyExistsFault":
        case "com.amazonaws.rds#DBSubnetGroupAlreadyExistsFault":
          throw await deserializeAws_queryDBSubnetGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupQuotaExceededFault":
        case "com.amazonaws.rds#DBSubnetGroupQuotaExceededFault":
          throw await deserializeAws_queryDBSubnetGroupQuotaExceededFaultResponse(parsedOutput, context);
        case "DBSubnetQuotaExceededFault":
        case "com.amazonaws.rds#DBSubnetQuotaExceededFault":
          throw await deserializeAws_queryDBSubnetQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateEventSubscriptionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateEventSubscriptionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateEventSubscriptionResult(data.CreateEventSubscriptionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateEventSubscriptionCommand = deserializeAws_queryCreateEventSubscriptionCommand;
    var deserializeAws_queryCreateEventSubscriptionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EventSubscriptionQuotaExceededFault":
        case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault":
          throw await deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse(parsedOutput, context);
        case "SNSInvalidTopicFault":
        case "com.amazonaws.rds#SNSInvalidTopicFault":
          throw await deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context);
        case "SNSNoAuthorizationFault":
        case "com.amazonaws.rds#SNSNoAuthorizationFault":
          throw await deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context);
        case "SNSTopicArnNotFoundFault":
        case "com.amazonaws.rds#SNSTopicArnNotFoundFault":
          throw await deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context);
        case "SourceNotFoundFault":
        case "com.amazonaws.rds#SourceNotFoundFault":
          throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionAlreadyExistFault":
        case "com.amazonaws.rds#SubscriptionAlreadyExistFault":
          throw await deserializeAws_querySubscriptionAlreadyExistFaultResponse(parsedOutput, context);
        case "SubscriptionCategoryNotFoundFault":
        case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault":
          throw await deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateGlobalClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateGlobalClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateGlobalClusterResult(data.CreateGlobalClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateGlobalClusterCommand = deserializeAws_queryCreateGlobalClusterCommand;
    var deserializeAws_queryCreateGlobalClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterAlreadyExistsFault":
        case "com.amazonaws.rds#GlobalClusterAlreadyExistsFault":
          throw await deserializeAws_queryGlobalClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "GlobalClusterQuotaExceededFault":
        case "com.amazonaws.rds#GlobalClusterQuotaExceededFault":
          throw await deserializeAws_queryGlobalClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryCreateOptionGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateOptionGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateOptionGroupResult(data.CreateOptionGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateOptionGroupCommand = deserializeAws_queryCreateOptionGroupCommand;
    var deserializeAws_queryCreateOptionGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "OptionGroupAlreadyExistsFault":
        case "com.amazonaws.rds#OptionGroupAlreadyExistsFault":
          throw await deserializeAws_queryOptionGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "OptionGroupQuotaExceededFault":
        case "com.amazonaws.rds#OptionGroupQuotaExceededFault":
          throw await deserializeAws_queryOptionGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteCustomDBEngineVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteCustomDBEngineVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBEngineVersion(data.DeleteCustomDBEngineVersionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteCustomDBEngineVersionCommand = deserializeAws_queryDeleteCustomDBEngineVersionCommand;
    var deserializeAws_queryDeleteCustomDBEngineVersionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomDBEngineVersionNotFoundFault":
        case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault":
          throw await deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse(parsedOutput, context);
        case "InvalidCustomDBEngineVersionStateFault":
        case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault":
          throw await deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteDBClusterResult(data.DeleteDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBClusterCommand = deserializeAws_queryDeleteDBClusterCommand;
    var deserializeAws_queryDeleteDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
          throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBClusterEndpointCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterEndpointCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterEndpoint(data.DeleteDBClusterEndpointResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBClusterEndpointCommand = deserializeAws_queryDeleteDBClusterEndpointCommand;
    var deserializeAws_queryDeleteDBClusterEndpointCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterEndpointNotFoundFault":
        case "com.amazonaws.rds#DBClusterEndpointNotFoundFault":
          throw await deserializeAws_queryDBClusterEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault":
          throw await deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBClusterParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterParameterGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBClusterParameterGroupCommand = deserializeAws_queryDeleteDBClusterParameterGroupCommand;
    var deserializeAws_queryDeleteDBClusterParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupStateFault":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
          throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBClusterSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteDBClusterSnapshotResult(data.DeleteDBClusterSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBClusterSnapshotCommand = deserializeAws_queryDeleteDBClusterSnapshotCommand;
    var deserializeAws_queryDeleteDBClusterSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteDBInstanceResult(data.DeleteDBInstanceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBInstanceCommand = deserializeAws_queryDeleteDBInstanceCommand;
    var deserializeAws_queryDeleteDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceAutomatedBackupQuotaExceededFault":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault":
          throw await deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
          throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
          throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBInstanceAutomatedBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBInstanceAutomatedBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteDBInstanceAutomatedBackupResult(data.DeleteDBInstanceAutomatedBackupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBInstanceAutomatedBackupCommand = deserializeAws_queryDeleteDBInstanceAutomatedBackupCommand;
    var deserializeAws_queryDeleteDBInstanceAutomatedBackupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceAutomatedBackupNotFoundFault":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
          throw await deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceAutomatedBackupStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceAutomatedBackupStateFault":
          throw await deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBParameterGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBParameterGroupCommand = deserializeAws_queryDeleteDBParameterGroupCommand;
    var deserializeAws_queryDeleteDBParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupStateFault":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
          throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBProxyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBProxyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteDBProxyResponse(data.DeleteDBProxyResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBProxyCommand = deserializeAws_queryDeleteDBProxyCommand;
    var deserializeAws_queryDeleteDBProxyCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBProxyEndpointCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBProxyEndpointCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteDBProxyEndpointResponse(data.DeleteDBProxyEndpointResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBProxyEndpointCommand = deserializeAws_queryDeleteDBProxyEndpointCommand;
    var deserializeAws_queryDeleteDBProxyEndpointCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
          throw await deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault":
          throw await deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBSecurityGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBSecurityGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBSecurityGroupCommand = deserializeAws_queryDeleteDBSecurityGroupCommand;
    var deserializeAws_queryDeleteDBSecurityGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
          throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteDBSnapshotResult(data.DeleteDBSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBSnapshotCommand = deserializeAws_queryDeleteDBSnapshotCommand;
    var deserializeAws_queryDeleteDBSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteDBSubnetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBSubnetGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteDBSubnetGroupCommand = deserializeAws_queryDeleteDBSubnetGroupCommand;
    var deserializeAws_queryDeleteDBSubnetGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
          throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetStateFault":
          throw await deserializeAws_queryInvalidDBSubnetStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteEventSubscriptionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteEventSubscriptionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteEventSubscriptionResult(data.DeleteEventSubscriptionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteEventSubscriptionCommand = deserializeAws_queryDeleteEventSubscriptionCommand;
    var deserializeAws_queryDeleteEventSubscriptionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidEventSubscriptionStateFault":
        case "com.amazonaws.rds#InvalidEventSubscriptionStateFault":
          throw await deserializeAws_queryInvalidEventSubscriptionStateFaultResponse(parsedOutput, context);
        case "SubscriptionNotFoundFault":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
          throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteGlobalClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteGlobalClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteGlobalClusterResult(data.DeleteGlobalClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteGlobalClusterCommand = deserializeAws_queryDeleteGlobalClusterCommand;
    var deserializeAws_queryDeleteGlobalClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
          throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
          throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeleteOptionGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteOptionGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteOptionGroupCommand = deserializeAws_queryDeleteOptionGroupCommand;
    var deserializeAws_queryDeleteOptionGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOptionGroupStateFault":
        case "com.amazonaws.rds#InvalidOptionGroupStateFault":
          throw await deserializeAws_queryInvalidOptionGroupStateFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDeregisterDBProxyTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeregisterDBProxyTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeregisterDBProxyTargetsResponse(data.DeregisterDBProxyTargetsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeregisterDBProxyTargetsCommand = deserializeAws_queryDeregisterDBProxyTargetsCommand;
    var deserializeAws_queryDeregisterDBProxyTargetsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeAccountAttributesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAccountAttributesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAccountAttributesMessage(data.DescribeAccountAttributesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeAccountAttributesCommand = deserializeAws_queryDescribeAccountAttributesCommand;
    var deserializeAws_queryDescribeAccountAttributesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeCertificatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeCertificatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCertificateMessage(data.DescribeCertificatesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeCertificatesCommand = deserializeAws_queryDescribeCertificatesCommand;
    var deserializeAws_queryDescribeCertificatesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CertificateNotFoundFault":
        case "com.amazonaws.rds#CertificateNotFoundFault":
          throw await deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBClusterBacktracksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterBacktracksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterBacktrackMessage(data.DescribeDBClusterBacktracksResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBClusterBacktracksCommand = deserializeAws_queryDescribeDBClusterBacktracksCommand;
    var deserializeAws_queryDescribeDBClusterBacktracksCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterBacktrackNotFoundFault":
        case "com.amazonaws.rds#DBClusterBacktrackNotFoundFault":
          throw await deserializeAws_queryDBClusterBacktrackNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBClusterEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterEndpointMessage(data.DescribeDBClusterEndpointsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBClusterEndpointsCommand = deserializeAws_queryDescribeDBClusterEndpointsCommand;
    var deserializeAws_queryDescribeDBClusterEndpointsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBClusterParameterGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterParameterGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterParameterGroupsMessage(data.DescribeDBClusterParameterGroupsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBClusterParameterGroupsCommand = deserializeAws_queryDescribeDBClusterParameterGroupsCommand;
    var deserializeAws_queryDescribeDBClusterParameterGroupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBClusterParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterParameterGroupDetails(data.DescribeDBClusterParametersResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBClusterParametersCommand = deserializeAws_queryDescribeDBClusterParametersCommand;
    var deserializeAws_queryDescribeDBClusterParametersCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBClustersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClustersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterMessage(data.DescribeDBClustersResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBClustersCommand = deserializeAws_queryDescribeDBClustersCommand;
    var deserializeAws_queryDescribeDBClustersCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBClusterSnapshotAttributesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterSnapshotAttributesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeDBClusterSnapshotAttributesResult(data.DescribeDBClusterSnapshotAttributesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBClusterSnapshotAttributesCommand = deserializeAws_queryDescribeDBClusterSnapshotAttributesCommand;
    var deserializeAws_queryDescribeDBClusterSnapshotAttributesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBClusterSnapshotsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterSnapshotsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterSnapshotMessage(data.DescribeDBClusterSnapshotsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBClusterSnapshotsCommand = deserializeAws_queryDescribeDBClusterSnapshotsCommand;
    var deserializeAws_queryDescribeDBClusterSnapshotsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBEngineVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBEngineVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBEngineVersionMessage(data.DescribeDBEngineVersionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBEngineVersionsCommand = deserializeAws_queryDescribeDBEngineVersionsCommand;
    var deserializeAws_queryDescribeDBEngineVersionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBInstanceAutomatedBackupMessage(data.DescribeDBInstanceAutomatedBackupsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommand;
    var deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceAutomatedBackupNotFoundFault":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
          throw await deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBInstanceMessage(data.DescribeDBInstancesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBInstancesCommand = deserializeAws_queryDescribeDBInstancesCommand;
    var deserializeAws_queryDescribeDBInstancesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBLogFilesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBLogFilesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeDBLogFilesResponse(data.DescribeDBLogFilesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBLogFilesCommand = deserializeAws_queryDescribeDBLogFilesCommand;
    var deserializeAws_queryDescribeDBLogFilesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBParameterGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBParameterGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBParameterGroupsMessage(data.DescribeDBParameterGroupsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBParameterGroupsCommand = deserializeAws_queryDescribeDBParameterGroupsCommand;
    var deserializeAws_queryDescribeDBParameterGroupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBParameterGroupDetails(data.DescribeDBParametersResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBParametersCommand = deserializeAws_queryDescribeDBParametersCommand;
    var deserializeAws_queryDescribeDBParametersCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBProxiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxiesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeDBProxiesResponse(data.DescribeDBProxiesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBProxiesCommand = deserializeAws_queryDescribeDBProxiesCommand;
    var deserializeAws_queryDescribeDBProxiesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBProxyEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxyEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeDBProxyEndpointsResponse(data.DescribeDBProxyEndpointsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBProxyEndpointsCommand = deserializeAws_queryDescribeDBProxyEndpointsCommand;
    var deserializeAws_queryDescribeDBProxyEndpointsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
          throw await deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBProxyTargetGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxyTargetGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeDBProxyTargetGroupsResponse(data.DescribeDBProxyTargetGroupsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBProxyTargetGroupsCommand = deserializeAws_queryDescribeDBProxyTargetGroupsCommand;
    var deserializeAws_queryDescribeDBProxyTargetGroupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBProxyTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxyTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeDBProxyTargetsResponse(data.DescribeDBProxyTargetsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBProxyTargetsCommand = deserializeAws_queryDescribeDBProxyTargetsCommand;
    var deserializeAws_queryDescribeDBProxyTargetsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBSecurityGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSecurityGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBSecurityGroupMessage(data.DescribeDBSecurityGroupsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBSecurityGroupsCommand = deserializeAws_queryDescribeDBSecurityGroupsCommand;
    var deserializeAws_queryDescribeDBSecurityGroupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBSnapshotAttributesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSnapshotAttributesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeDBSnapshotAttributesResult(data.DescribeDBSnapshotAttributesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBSnapshotAttributesCommand = deserializeAws_queryDescribeDBSnapshotAttributesCommand;
    var deserializeAws_queryDescribeDBSnapshotAttributesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBSnapshotsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSnapshotsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBSnapshotMessage(data.DescribeDBSnapshotsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBSnapshotsCommand = deserializeAws_queryDescribeDBSnapshotsCommand;
    var deserializeAws_queryDescribeDBSnapshotsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeDBSubnetGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSubnetGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBSubnetGroupMessage(data.DescribeDBSubnetGroupsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeDBSubnetGroupsCommand = deserializeAws_queryDescribeDBSubnetGroupsCommand;
    var deserializeAws_queryDescribeDBSubnetGroupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeEngineDefaultClusterParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEngineDefaultClusterParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeEngineDefaultClusterParametersResult(data.DescribeEngineDefaultClusterParametersResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeEngineDefaultClusterParametersCommand = deserializeAws_queryDescribeEngineDefaultClusterParametersCommand;
    var deserializeAws_queryDescribeEngineDefaultClusterParametersCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeEngineDefaultParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEngineDefaultParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeEngineDefaultParametersResult(data.DescribeEngineDefaultParametersResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeEngineDefaultParametersCommand = deserializeAws_queryDescribeEngineDefaultParametersCommand;
    var deserializeAws_queryDescribeEngineDefaultParametersCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeEventCategoriesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventCategoriesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryEventCategoriesMessage(data.DescribeEventCategoriesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeEventCategoriesCommand = deserializeAws_queryDescribeEventCategoriesCommand;
    var deserializeAws_queryDescribeEventCategoriesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeEventsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryEventsMessage(data.DescribeEventsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeEventsCommand = deserializeAws_queryDescribeEventsCommand;
    var deserializeAws_queryDescribeEventsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeEventSubscriptionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventSubscriptionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryEventSubscriptionsMessage(data.DescribeEventSubscriptionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeEventSubscriptionsCommand = deserializeAws_queryDescribeEventSubscriptionsCommand;
    var deserializeAws_queryDescribeEventSubscriptionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "SubscriptionNotFoundFault":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
          throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeExportTasksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeExportTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryExportTasksMessage(data.DescribeExportTasksResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeExportTasksCommand = deserializeAws_queryDescribeExportTasksCommand;
    var deserializeAws_queryDescribeExportTasksCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportTaskNotFoundFault":
        case "com.amazonaws.rds#ExportTaskNotFoundFault":
          throw await deserializeAws_queryExportTaskNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeGlobalClustersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeGlobalClustersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGlobalClustersMessage(data.DescribeGlobalClustersResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeGlobalClustersCommand = deserializeAws_queryDescribeGlobalClustersCommand;
    var deserializeAws_queryDescribeGlobalClustersCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
          throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeOptionGroupOptionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeOptionGroupOptionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryOptionGroupOptionsMessage(data.DescribeOptionGroupOptionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeOptionGroupOptionsCommand = deserializeAws_queryDescribeOptionGroupOptionsCommand;
    var deserializeAws_queryDescribeOptionGroupOptionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeOptionGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeOptionGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryOptionGroups(data.DescribeOptionGroupsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeOptionGroupsCommand = deserializeAws_queryDescribeOptionGroupsCommand;
    var deserializeAws_queryDescribeOptionGroupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeOrderableDBInstanceOptionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeOrderableDBInstanceOptionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryOrderableDBInstanceOptionsMessage(data.DescribeOrderableDBInstanceOptionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeOrderableDBInstanceOptionsCommand = deserializeAws_queryDescribeOrderableDBInstanceOptionsCommand;
    var deserializeAws_queryDescribeOrderableDBInstanceOptionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribePendingMaintenanceActionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribePendingMaintenanceActionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryPendingMaintenanceActionsMessage(data.DescribePendingMaintenanceActionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribePendingMaintenanceActionsCommand = deserializeAws_queryDescribePendingMaintenanceActionsCommand;
    var deserializeAws_queryDescribePendingMaintenanceActionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
          throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeReservedDBInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReservedDBInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryReservedDBInstanceMessage(data.DescribeReservedDBInstancesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeReservedDBInstancesCommand = deserializeAws_queryDescribeReservedDBInstancesCommand;
    var deserializeAws_queryDescribeReservedDBInstancesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ReservedDBInstanceNotFoundFault":
        case "com.amazonaws.rds#ReservedDBInstanceNotFoundFault":
          throw await deserializeAws_queryReservedDBInstanceNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeReservedDBInstancesOfferingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReservedDBInstancesOfferingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryReservedDBInstancesOfferingMessage(data.DescribeReservedDBInstancesOfferingsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeReservedDBInstancesOfferingsCommand = deserializeAws_queryDescribeReservedDBInstancesOfferingsCommand;
    var deserializeAws_queryDescribeReservedDBInstancesOfferingsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ReservedDBInstancesOfferingNotFoundFault":
        case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault":
          throw await deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeSourceRegionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeSourceRegionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySourceRegionMessage(data.DescribeSourceRegionsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeSourceRegionsCommand = deserializeAws_queryDescribeSourceRegionsCommand;
    var deserializeAws_queryDescribeSourceRegionsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDescribeValidDBInstanceModificationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeValidDBInstanceModificationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeValidDBInstanceModificationsResult(data.DescribeValidDBInstanceModificationsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeValidDBInstanceModificationsCommand = deserializeAws_queryDescribeValidDBInstanceModificationsCommand;
    var deserializeAws_queryDescribeValidDBInstanceModificationsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDownloadDBLogFilePortionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDownloadDBLogFilePortionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDownloadDBLogFilePortionDetails(data.DownloadDBLogFilePortionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDownloadDBLogFilePortionCommand = deserializeAws_queryDownloadDBLogFilePortionCommand;
    var deserializeAws_queryDownloadDBLogFilePortionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBLogFileNotFoundFault":
        case "com.amazonaws.rds#DBLogFileNotFoundFault":
          throw await deserializeAws_queryDBLogFileNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryFailoverDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryFailoverDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryFailoverDBClusterResult(data.FailoverDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryFailoverDBClusterCommand = deserializeAws_queryFailoverDBClusterCommand;
    var deserializeAws_queryFailoverDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryFailoverGlobalClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryFailoverGlobalClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryFailoverGlobalClusterResult(data.FailoverGlobalClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryFailoverGlobalClusterCommand = deserializeAws_queryFailoverGlobalClusterCommand;
    var deserializeAws_queryFailoverGlobalClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
          throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
          throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListTagsForResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryTagListMessage(data.ListTagsForResourceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListTagsForResourceCommand = deserializeAws_queryListTagsForResourceCommand;
    var deserializeAws_queryListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyCertificatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyCertificatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyCertificatesResult(data.ModifyCertificatesResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyCertificatesCommand = deserializeAws_queryModifyCertificatesCommand;
    var deserializeAws_queryModifyCertificatesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CertificateNotFoundFault":
        case "com.amazonaws.rds#CertificateNotFoundFault":
          throw await deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyCurrentDBClusterCapacityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyCurrentDBClusterCapacityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterCapacityInfo(data.ModifyCurrentDBClusterCapacityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyCurrentDBClusterCapacityCommand = deserializeAws_queryModifyCurrentDBClusterCapacityCommand;
    var deserializeAws_queryModifyCurrentDBClusterCapacityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterCapacityFault":
        case "com.amazonaws.rds#InvalidDBClusterCapacityFault":
          throw await deserializeAws_queryInvalidDBClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyCustomDBEngineVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyCustomDBEngineVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBEngineVersion(data.ModifyCustomDBEngineVersionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyCustomDBEngineVersionCommand = deserializeAws_queryModifyCustomDBEngineVersionCommand;
    var deserializeAws_queryModifyCustomDBEngineVersionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomDBEngineVersionNotFoundFault":
        case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault":
          throw await deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse(parsedOutput, context);
        case "InvalidCustomDBEngineVersionStateFault":
        case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault":
          throw await deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBClusterResult(data.ModifyDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBClusterCommand = deserializeAws_queryModifyDBClusterCommand;
    var deserializeAws_queryModifyDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
          throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
          throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBClusterEndpointCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterEndpointCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterEndpoint(data.ModifyDBClusterEndpointResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBClusterEndpointCommand = deserializeAws_queryModifyDBClusterEndpointCommand;
    var deserializeAws_queryModifyDBClusterEndpointCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterEndpointNotFoundFault":
        case "com.amazonaws.rds#DBClusterEndpointNotFoundFault":
          throw await deserializeAws_queryDBClusterEndpointNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault":
          throw await deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBClusterParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterParameterGroupNameMessage(data.ModifyDBClusterParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBClusterParameterGroupCommand = deserializeAws_queryModifyDBClusterParameterGroupCommand;
    var deserializeAws_queryModifyDBClusterParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupStateFault":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
          throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBClusterSnapshotAttributeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterSnapshotAttributeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBClusterSnapshotAttributeResult(data.ModifyDBClusterSnapshotAttributeResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBClusterSnapshotAttributeCommand = deserializeAws_queryModifyDBClusterSnapshotAttributeCommand;
    var deserializeAws_queryModifyDBClusterSnapshotAttributeCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "SharedSnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault":
          throw await deserializeAws_querySharedSnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBInstanceResult(data.ModifyDBInstanceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBInstanceCommand = deserializeAws_queryModifyDBInstanceCommand;
    var deserializeAws_queryModifyDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFoundFault":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
          throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
          throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "CertificateNotFoundFault":
        case "com.amazonaws.rds#CertificateNotFoundFault":
          throw await deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExistsFault":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
          throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBUpgradeDependencyFailureFault":
        case "com.amazonaws.rds#DBUpgradeDependencyFailureFault":
          throw await deserializeAws_queryDBUpgradeDependencyFailureFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacityFault":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
          throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
          throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
          throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
          throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupportedFault":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
          throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBParameterGroupNameMessage(data.ModifyDBParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBParameterGroupCommand = deserializeAws_queryModifyDBParameterGroupCommand;
    var deserializeAws_queryModifyDBParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupStateFault":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
          throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBProxyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBProxyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBProxyResponse(data.ModifyDBProxyResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBProxyCommand = deserializeAws_queryModifyDBProxyCommand;
    var deserializeAws_queryModifyDBProxyCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyAlreadyExistsFault":
          throw await deserializeAws_queryDBProxyAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBProxyEndpointCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBProxyEndpointCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBProxyEndpointResponse(data.ModifyDBProxyEndpointResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBProxyEndpointCommand = deserializeAws_queryModifyDBProxyEndpointCommand;
    var deserializeAws_queryModifyDBProxyEndpointCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault":
          throw await deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
          throw await deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault":
          throw await deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBProxyTargetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBProxyTargetGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBProxyTargetGroupResponse(data.ModifyDBProxyTargetGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBProxyTargetGroupCommand = deserializeAws_queryModifyDBProxyTargetGroupCommand;
    var deserializeAws_queryModifyDBProxyTargetGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBSnapshotResult(data.ModifyDBSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBSnapshotCommand = deserializeAws_queryModifyDBSnapshotCommand;
    var deserializeAws_queryModifyDBSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBSnapshotAttributeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBSnapshotAttributeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBSnapshotAttributeResult(data.ModifyDBSnapshotAttributeResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBSnapshotAttributeCommand = deserializeAws_queryModifyDBSnapshotAttributeCommand;
    var deserializeAws_queryModifyDBSnapshotAttributeCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "SharedSnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault":
          throw await deserializeAws_querySharedSnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyDBSubnetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBSubnetGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyDBSubnetGroupResult(data.ModifyDBSubnetGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyDBSubnetGroupCommand = deserializeAws_queryModifyDBSubnetGroupCommand;
    var deserializeAws_queryModifyDBSubnetGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetQuotaExceededFault":
        case "com.amazonaws.rds#DBSubnetQuotaExceededFault":
          throw await deserializeAws_queryDBSubnetQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "SubnetAlreadyInUse":
        case "com.amazonaws.rds#SubnetAlreadyInUse":
          throw await deserializeAws_querySubnetAlreadyInUseResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyEventSubscriptionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyEventSubscriptionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyEventSubscriptionResult(data.ModifyEventSubscriptionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyEventSubscriptionCommand = deserializeAws_queryModifyEventSubscriptionCommand;
    var deserializeAws_queryModifyEventSubscriptionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EventSubscriptionQuotaExceededFault":
        case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault":
          throw await deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse(parsedOutput, context);
        case "SNSInvalidTopicFault":
        case "com.amazonaws.rds#SNSInvalidTopicFault":
          throw await deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context);
        case "SNSNoAuthorizationFault":
        case "com.amazonaws.rds#SNSNoAuthorizationFault":
          throw await deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context);
        case "SNSTopicArnNotFoundFault":
        case "com.amazonaws.rds#SNSTopicArnNotFoundFault":
          throw await deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionCategoryNotFoundFault":
        case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault":
          throw await deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionNotFoundFault":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
          throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyGlobalClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyGlobalClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyGlobalClusterResult(data.ModifyGlobalClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyGlobalClusterCommand = deserializeAws_queryModifyGlobalClusterCommand;
    var deserializeAws_queryModifyGlobalClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
          throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
          throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryModifyOptionGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryModifyOptionGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryModifyOptionGroupResult(data.ModifyOptionGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryModifyOptionGroupCommand = deserializeAws_queryModifyOptionGroupCommand;
    var deserializeAws_queryModifyOptionGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOptionGroupStateFault":
        case "com.amazonaws.rds#InvalidOptionGroupStateFault":
          throw await deserializeAws_queryInvalidOptionGroupStateFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryPromoteReadReplicaCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPromoteReadReplicaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryPromoteReadReplicaResult(data.PromoteReadReplicaResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPromoteReadReplicaCommand = deserializeAws_queryPromoteReadReplicaCommand;
    var deserializeAws_queryPromoteReadReplicaCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryPromoteReadReplicaDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPromoteReadReplicaDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryPromoteReadReplicaDBClusterResult(data.PromoteReadReplicaDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPromoteReadReplicaDBClusterCommand = deserializeAws_queryPromoteReadReplicaDBClusterCommand;
    var deserializeAws_queryPromoteReadReplicaDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryPurchaseReservedDBInstancesOfferingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPurchaseReservedDBInstancesOfferingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryPurchaseReservedDBInstancesOfferingResult(data.PurchaseReservedDBInstancesOfferingResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPurchaseReservedDBInstancesOfferingCommand = deserializeAws_queryPurchaseReservedDBInstancesOfferingCommand;
    var deserializeAws_queryPurchaseReservedDBInstancesOfferingCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ReservedDBInstanceAlreadyExistsFault":
        case "com.amazonaws.rds#ReservedDBInstanceAlreadyExistsFault":
          throw await deserializeAws_queryReservedDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "ReservedDBInstanceQuotaExceededFault":
        case "com.amazonaws.rds#ReservedDBInstanceQuotaExceededFault":
          throw await deserializeAws_queryReservedDBInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "ReservedDBInstancesOfferingNotFoundFault":
        case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault":
          throw await deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRebootDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRebootDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRebootDBClusterResult(data.RebootDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRebootDBClusterCommand = deserializeAws_queryRebootDBClusterCommand;
    var deserializeAws_queryRebootDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRebootDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRebootDBInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRebootDBInstanceResult(data.RebootDBInstanceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRebootDBInstanceCommand = deserializeAws_queryRebootDBInstanceCommand;
    var deserializeAws_queryRebootDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRegisterDBProxyTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRegisterDBProxyTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRegisterDBProxyTargetsResponse(data.RegisterDBProxyTargetsResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRegisterDBProxyTargetsCommand = deserializeAws_queryRegisterDBProxyTargetsCommand;
    var deserializeAws_queryRegisterDBProxyTargetsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetAlreadyRegisteredFault":
        case "com.amazonaws.rds#DBProxyTargetAlreadyRegisteredFault":
          throw await deserializeAws_queryDBProxyTargetAlreadyRegisteredFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientAvailableIPsInSubnetFault":
        case "com.amazonaws.rds#InsufficientAvailableIPsInSubnetFault":
          throw await deserializeAws_queryInsufficientAvailableIPsInSubnetFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
          throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRemoveFromGlobalClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveFromGlobalClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRemoveFromGlobalClusterResult(data.RemoveFromGlobalClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveFromGlobalClusterCommand = deserializeAws_queryRemoveFromGlobalClusterCommand;
    var deserializeAws_queryRemoveFromGlobalClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
          throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
          throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRemoveRoleFromDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveRoleFromDBClusterCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveRoleFromDBClusterCommand = deserializeAws_queryRemoveRoleFromDBClusterCommand;
    var deserializeAws_queryRemoveRoleFromDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterRoleNotFoundFault":
        case "com.amazonaws.rds#DBClusterRoleNotFoundFault":
          throw await deserializeAws_queryDBClusterRoleNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRemoveRoleFromDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveRoleFromDBInstanceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveRoleFromDBInstanceCommand = deserializeAws_queryRemoveRoleFromDBInstanceCommand;
    var deserializeAws_queryRemoveRoleFromDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceRoleNotFoundFault":
        case "com.amazonaws.rds#DBInstanceRoleNotFoundFault":
          throw await deserializeAws_queryDBInstanceRoleNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRemoveSourceIdentifierFromSubscriptionResult(data.RemoveSourceIdentifierFromSubscriptionResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand;
    var deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "SourceNotFoundFault":
        case "com.amazonaws.rds#SourceNotFoundFault":
          throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionNotFoundFault":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
          throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRemoveTagsFromResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveTagsFromResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveTagsFromResourceCommand = deserializeAws_queryRemoveTagsFromResourceCommand;
    var deserializeAws_queryRemoveTagsFromResourceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
          throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
          throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryResetDBClusterParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryResetDBClusterParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBClusterParameterGroupNameMessage(data.ResetDBClusterParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryResetDBClusterParameterGroupCommand = deserializeAws_queryResetDBClusterParameterGroupCommand;
    var deserializeAws_queryResetDBClusterParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupStateFault":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
          throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryResetDBParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryResetDBParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDBParameterGroupNameMessage(data.ResetDBParameterGroupResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryResetDBParameterGroupCommand = deserializeAws_queryResetDBParameterGroupCommand;
    var deserializeAws_queryResetDBParameterGroupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupStateFault":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
          throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRestoreDBClusterFromS3Command = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBClusterFromS3CommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRestoreDBClusterFromS3Result(data.RestoreDBClusterFromS3Result, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRestoreDBClusterFromS3Command = deserializeAws_queryRestoreDBClusterFromS3Command;
    var deserializeAws_queryRestoreDBClusterFromS3CommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
          throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
          throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
          throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
          throw await deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRestoreDBClusterFromSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBClusterFromSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRestoreDBClusterFromSnapshotResult(data.RestoreDBClusterFromSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRestoreDBClusterFromSnapshotCommand = deserializeAws_queryRestoreDBClusterFromSnapshotCommand;
    var deserializeAws_queryRestoreDBClusterFromSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
          throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientDBClusterCapacityFault":
          throw await deserializeAws_queryInsufficientDBClusterCapacityFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
          throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
          throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRestoreDBClusterToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBClusterToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRestoreDBClusterToPointInTimeResult(data.RestoreDBClusterToPointInTimeResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRestoreDBClusterToPointInTimeCommand = deserializeAws_queryRestoreDBClusterToPointInTimeCommand;
    var deserializeAws_queryRestoreDBClusterToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
          throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
          throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientDBClusterCapacityFault":
          throw await deserializeAws_queryInsufficientDBClusterCapacityFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
          throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
          throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRestoreDBInstanceFromDBSnapshotResult(data.RestoreDBInstanceFromDBSnapshotResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommand;
    var deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFoundFault":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
          throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
          throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExistsFault":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
          throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceededFault":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
          throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacityFault":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
          throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
          throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
          throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
          throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
          throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupportedFault":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
          throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRestoreDBInstanceFromS3Command = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBInstanceFromS3CommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRestoreDBInstanceFromS3Result(data.RestoreDBInstanceFromS3Result, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRestoreDBInstanceFromS3Command = deserializeAws_queryRestoreDBInstanceFromS3Command;
    var deserializeAws_queryRestoreDBInstanceFromS3CommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFoundFault":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
          throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
          throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExistsFault":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
          throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceededFault":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
          throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacityFault":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
          throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
          throw await deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
          throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
          throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupportedFault":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
          throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRestoreDBInstanceToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBInstanceToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRestoreDBInstanceToPointInTimeResult(data.RestoreDBInstanceToPointInTimeResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRestoreDBInstanceToPointInTimeCommand = deserializeAws_queryRestoreDBInstanceToPointInTimeCommand;
    var deserializeAws_queryRestoreDBInstanceToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFoundFault":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
          throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
          throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExistsFault":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
          throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceAutomatedBackupNotFoundFault":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
          throw await deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFoundFault":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
          throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
          throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceededFault":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
          throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacityFault":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
          throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
          throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
          throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
          throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "PointInTimeRestoreNotEnabledFault":
        case "com.amazonaws.rds#PointInTimeRestoreNotEnabledFault":
          throw await deserializeAws_queryPointInTimeRestoreNotEnabledFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
          throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceededFault":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
          throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupportedFault":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
          throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryRevokeDBSecurityGroupIngressCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRevokeDBSecurityGroupIngressCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRevokeDBSecurityGroupIngressResult(data.RevokeDBSecurityGroupIngressResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRevokeDBSecurityGroupIngressCommand = deserializeAws_queryRevokeDBSecurityGroupIngressCommand;
    var deserializeAws_queryRevokeDBSecurityGroupIngressCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFoundFault":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
          throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFoundFault":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
          throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
          throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStartActivityStreamCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStartActivityStreamCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStartActivityStreamResponse(data.StartActivityStreamResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStartActivityStreamCommand = deserializeAws_queryStartActivityStreamCommand;
    var deserializeAws_queryStartActivityStreamCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
          throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStartDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStartDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStartDBClusterResult(data.StartDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStartDBClusterCommand = deserializeAws_queryStartDBClusterCommand;
    var deserializeAws_queryStartDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStartDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStartDBInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStartDBInstanceResult(data.StartDBInstanceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStartDBInstanceCommand = deserializeAws_queryStartDBInstanceCommand;
    var deserializeAws_queryStartDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFoundFault":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
          throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
          throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
          throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacityFault":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
          throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
          throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
          throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationResult(data.StartDBInstanceAutomatedBackupsReplicationResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand;
    var deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceAutomatedBackupQuotaExceededFault":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault":
          throw await deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupportedFault":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
          throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStartExportTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStartExportTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryExportTask(data.StartExportTaskResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStartExportTaskCommand = deserializeAws_queryStartExportTaskCommand;
    var deserializeAws_queryStartExportTaskCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
          throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
          throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "ExportTaskAlreadyExistsFault":
        case "com.amazonaws.rds#ExportTaskAlreadyExistsFault":
          throw await deserializeAws_queryExportTaskAlreadyExistsFaultResponse(parsedOutput, context);
        case "IamRoleMissingPermissionsFault":
        case "com.amazonaws.rds#IamRoleMissingPermissionsFault":
          throw await deserializeAws_queryIamRoleMissingPermissionsFaultResponse(parsedOutput, context);
        case "IamRoleNotFoundFault":
        case "com.amazonaws.rds#IamRoleNotFoundFault":
          throw await deserializeAws_queryIamRoleNotFoundFaultResponse(parsedOutput, context);
        case "InvalidExportOnlyFault":
        case "com.amazonaws.rds#InvalidExportOnlyFault":
          throw await deserializeAws_queryInvalidExportOnlyFaultResponse(parsedOutput, context);
        case "InvalidExportSourceStateFault":
        case "com.amazonaws.rds#InvalidExportSourceStateFault":
          throw await deserializeAws_queryInvalidExportSourceStateFaultResponse(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
          throw await deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
          throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStopActivityStreamCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStopActivityStreamCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStopActivityStreamResponse(data.StopActivityStreamResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStopActivityStreamCommand = deserializeAws_queryStopActivityStreamCommand;
    var deserializeAws_queryStopActivityStreamCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
          throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStopDBClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStopDBClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStopDBClusterResult(data.StopDBClusterResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStopDBClusterCommand = deserializeAws_queryStopDBClusterCommand;
    var deserializeAws_queryStopDBClusterCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
          throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStopDBInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStopDBInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStopDBInstanceResult(data.StopDBInstanceResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStopDBInstanceCommand = deserializeAws_queryStopDBInstanceCommand;
    var deserializeAws_queryStopDBInstanceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
          throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
          throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
          throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationResult(data.StopDBInstanceAutomatedBackupsReplicationResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand;
    var deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DBInstanceNotFoundFault":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
          throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceStateFault":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
          throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new RDSServiceException_1.RDSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAuthorizationAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryAuthorizationAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.AuthorizationAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryAuthorizationNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryAuthorizationNotFoundFault(body.Error, context);
      const exception = new models_0_1.AuthorizationNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryAuthorizationQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryAuthorizationQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.AuthorizationQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryBackupPolicyNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryBackupPolicyNotFoundFault(body.Error, context);
      const exception = new models_0_1.BackupPolicyNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCertificateNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCertificateNotFoundFault(body.Error, context);
      const exception = new models_0_1.CertificateNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCustomAvailabilityZoneNotFoundFault(body.Error, context);
      const exception = new models_0_1.CustomAvailabilityZoneNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCustomDBEngineVersionAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCustomDBEngineVersionAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.CustomDBEngineVersionAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCustomDBEngineVersionNotFoundFault(body.Error, context);
      const exception = new models_0_1.CustomDBEngineVersionNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCustomDBEngineVersionQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCustomDBEngineVersionQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.CustomDBEngineVersionQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBClusterAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterBacktrackNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterBacktrackNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBClusterBacktrackNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterEndpointAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterEndpointAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBClusterEndpointAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterEndpointNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterEndpointNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBClusterEndpointNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterEndpointQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterEndpointQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBClusterEndpointQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBClusterNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterParameterGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBClusterParameterGroupNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBClusterQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterRoleAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterRoleAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBClusterRoleAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterRoleNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterRoleNotFoundFault(body.Error, context);
      const exception = new models_1_1.DBClusterRoleNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterRoleQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterRoleQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBClusterRoleQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterSnapshotAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBClusterSnapshotAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBClusterSnapshotNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBClusterSnapshotNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBInstanceAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBInstanceAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBInstanceAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBInstanceAutomatedBackupNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBInstanceAutomatedBackupNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBInstanceAutomatedBackupQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBInstanceNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBInstanceNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBInstanceNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBInstanceRoleAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBInstanceRoleAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBInstanceRoleAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBInstanceRoleNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBInstanceRoleNotFoundFault(body.Error, context);
      const exception = new models_1_1.DBInstanceRoleNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBInstanceRoleQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBInstanceRoleQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBInstanceRoleQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBLogFileNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBLogFileNotFoundFault(body.Error, context);
      const exception = new models_1_1.DBLogFileNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBParameterGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBParameterGroupAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBParameterGroupNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBParameterGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBParameterGroupNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBParameterGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBParameterGroupQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBProxyAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyEndpointAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBProxyEndpointAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyEndpointNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyEndpointNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBProxyEndpointNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyEndpointQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyEndpointQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBProxyEndpointQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBProxyNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBProxyQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyTargetAlreadyRegisteredFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyTargetAlreadyRegisteredFault(body.Error, context);
      const exception = new models_1_1.DBProxyTargetAlreadyRegisteredFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyTargetGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBProxyTargetGroupNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBProxyTargetNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBProxyTargetNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBProxyTargetNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSecurityGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSecurityGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBSecurityGroupAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSecurityGroupNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSecurityGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBSecurityGroupNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSecurityGroupNotSupportedFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSecurityGroupNotSupportedFault(body.Error, context);
      const exception = new models_0_1.DBSecurityGroupNotSupportedFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSecurityGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSecurityGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBSecurityGroupQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSnapshotAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBSnapshotAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSnapshotNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSnapshotNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBSnapshotNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSubnetGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSubnetGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.DBSubnetGroupAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZs(body.Error, context);
      const exception = new models_0_1.DBSubnetGroupDoesNotCoverEnoughAZs(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSubnetGroupNotAllowedFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSubnetGroupNotAllowedFault(body.Error, context);
      const exception = new models_0_1.DBSubnetGroupNotAllowedFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSubnetGroupNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSubnetGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.DBSubnetGroupNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSubnetGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSubnetGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBSubnetGroupQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBSubnetQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBSubnetQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.DBSubnetQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDBUpgradeDependencyFailureFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDBUpgradeDependencyFailureFault(body.Error, context);
      const exception = new models_1_1.DBUpgradeDependencyFailureFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDomainNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDomainNotFoundFault(body.Error, context);
      const exception = new models_0_1.DomainNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryEventSubscriptionQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.EventSubscriptionQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryExportTaskAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExportTaskAlreadyExistsFault(body.Error, context);
      const exception = new models_1_1.ExportTaskAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryExportTaskNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExportTaskNotFoundFault(body.Error, context);
      const exception = new models_0_1.ExportTaskNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryGlobalClusterAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryGlobalClusterAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.GlobalClusterAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryGlobalClusterNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryGlobalClusterNotFoundFault(body.Error, context);
      const exception = new models_0_1.GlobalClusterNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryGlobalClusterQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryGlobalClusterQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.GlobalClusterQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIamRoleMissingPermissionsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIamRoleMissingPermissionsFault(body.Error, context);
      const exception = new models_1_1.IamRoleMissingPermissionsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIamRoleNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIamRoleNotFoundFault(body.Error, context);
      const exception = new models_1_1.IamRoleNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInstanceQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInstanceQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.InstanceQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInsufficientAvailableIPsInSubnetFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInsufficientAvailableIPsInSubnetFault(body.Error, context);
      const exception = new models_1_1.InsufficientAvailableIPsInSubnetFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInsufficientDBClusterCapacityFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInsufficientDBClusterCapacityFault(body.Error, context);
      const exception = new models_1_1.InsufficientDBClusterCapacityFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInsufficientDBInstanceCapacityFault(body.Error, context);
      const exception = new models_0_1.InsufficientDBInstanceCapacityFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInsufficientStorageClusterCapacityFault(body.Error, context);
      const exception = new models_0_1.InsufficientStorageClusterCapacityFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidCustomDBEngineVersionStateFault(body.Error, context);
      const exception = new models_0_1.InvalidCustomDBEngineVersionStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBClusterCapacityFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBClusterCapacityFault(body.Error, context);
      const exception = new models_1_1.InvalidDBClusterCapacityFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBClusterEndpointStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBClusterEndpointStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBClusterSnapshotStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBClusterSnapshotStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBClusterStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBClusterStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBClusterStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBInstanceAutomatedBackupStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBInstanceStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBInstanceStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBInstanceStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBParameterGroupStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBParameterGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBParameterGroupStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBProxyEndpointStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBProxyEndpointStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBProxyStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBProxyStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBProxyStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBSecurityGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBSecurityGroupStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBSnapshotStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBSnapshotStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBSnapshotStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBSubnetGroupFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBSubnetGroupFault(body.Error, context);
      const exception = new models_0_1.InvalidDBSubnetGroupFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBSubnetGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBSubnetGroupStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidDBSubnetStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidDBSubnetStateFault(body.Error, context);
      const exception = new models_0_1.InvalidDBSubnetStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidEventSubscriptionStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidEventSubscriptionStateFault(body.Error, context);
      const exception = new models_0_1.InvalidEventSubscriptionStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidExportOnlyFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidExportOnlyFault(body.Error, context);
      const exception = new models_1_1.InvalidExportOnlyFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidExportSourceStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidExportSourceStateFault(body.Error, context);
      const exception = new models_1_1.InvalidExportSourceStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidExportTaskStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidExportTaskStateFault(body.Error, context);
      const exception = new models_0_1.InvalidExportTaskStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidGlobalClusterStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidGlobalClusterStateFault(body.Error, context);
      const exception = new models_0_1.InvalidGlobalClusterStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidOptionGroupStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidOptionGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidOptionGroupStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidRestoreFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidRestoreFault(body.Error, context);
      const exception = new models_1_1.InvalidRestoreFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidS3BucketFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidS3BucketFault(body.Error, context);
      const exception = new models_1_1.InvalidS3BucketFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidSubnetResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidSubnet(body.Error, context);
      const exception = new models_0_1.InvalidSubnet(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidVPCNetworkStateFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidVPCNetworkStateFault(body.Error, context);
      const exception = new models_0_1.InvalidVPCNetworkStateFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryKMSKeyNotAccessibleFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryKMSKeyNotAccessibleFault(body.Error, context);
      const exception = new models_0_1.KMSKeyNotAccessibleFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryNetworkTypeNotSupportedResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryNetworkTypeNotSupported(body.Error, context);
      const exception = new models_0_1.NetworkTypeNotSupported(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryOptionGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryOptionGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.OptionGroupAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryOptionGroupNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryOptionGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.OptionGroupNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryOptionGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryOptionGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.OptionGroupQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPointInTimeRestoreNotEnabledFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPointInTimeRestoreNotEnabledFault(body.Error, context);
      const exception = new models_1_1.PointInTimeRestoreNotEnabledFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryProvisionedIopsNotAvailableInAZFault(body.Error, context);
      const exception = new models_0_1.ProvisionedIopsNotAvailableInAZFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryReservedDBInstanceAlreadyExistsFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryReservedDBInstanceAlreadyExistsFault(body.Error, context);
      const exception = new models_1_1.ReservedDBInstanceAlreadyExistsFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryReservedDBInstanceNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryReservedDBInstanceNotFoundFault(body.Error, context);
      const exception = new models_1_1.ReservedDBInstanceNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryReservedDBInstanceQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryReservedDBInstanceQuotaExceededFault(body.Error, context);
      const exception = new models_1_1.ReservedDBInstanceQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryReservedDBInstancesOfferingNotFoundFault(body.Error, context);
      const exception = new models_1_1.ReservedDBInstancesOfferingNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryResourceNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryResourceNotFoundFault(body.Error, context);
      const exception = new models_0_1.ResourceNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySharedSnapshotQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySharedSnapshotQuotaExceededFault(body.Error, context);
      const exception = new models_1_1.SharedSnapshotQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySnapshotQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySnapshotQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.SnapshotQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySNSInvalidTopicFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySNSInvalidTopicFault(body.Error, context);
      const exception = new models_0_1.SNSInvalidTopicFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySNSNoAuthorizationFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySNSNoAuthorizationFault(body.Error, context);
      const exception = new models_0_1.SNSNoAuthorizationFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySNSTopicArnNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySNSTopicArnNotFoundFault(body.Error, context);
      const exception = new models_0_1.SNSTopicArnNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySourceNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySourceNotFoundFault(body.Error, context);
      const exception = new models_0_1.SourceNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryStorageQuotaExceededFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryStorageQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.StorageQuotaExceededFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryStorageTypeNotSupportedFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryStorageTypeNotSupportedFault(body.Error, context);
      const exception = new models_0_1.StorageTypeNotSupportedFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySubnetAlreadyInUseResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySubnetAlreadyInUse(body.Error, context);
      const exception = new models_1_1.SubnetAlreadyInUse(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySubscriptionAlreadyExistFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySubscriptionAlreadyExistFault(body.Error, context);
      const exception = new models_0_1.SubscriptionAlreadyExistFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySubscriptionCategoryNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySubscriptionCategoryNotFoundFault(body.Error, context);
      const exception = new models_0_1.SubscriptionCategoryNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_querySubscriptionNotFoundFaultResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_querySubscriptionNotFoundFault(body.Error, context);
      const exception = new models_0_1.SubscriptionNotFoundFault(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAddRoleToDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.FeatureName !== void 0 && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
      }
      return entries;
    };
    var serializeAws_queryAddRoleToDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.FeatureName !== void 0 && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
      }
      return entries;
    };
    var serializeAws_queryAddSourceIdentifierToSubscriptionMessage = (input, context) => {
      const entries = {};
      if (input.SubscriptionName !== void 0 && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
      }
      if (input.SourceIdentifier !== void 0 && input.SourceIdentifier !== null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
      }
      return entries;
    };
    var serializeAws_queryAddTagsToResourceMessage = (input, context) => {
      const entries = {};
      if (input.ResourceName !== void 0 && input.ResourceName !== null) {
        entries["ResourceName"] = input.ResourceName;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryApplyPendingMaintenanceActionMessage = (input, context) => {
      const entries = {};
      if (input.ResourceIdentifier !== void 0 && input.ResourceIdentifier !== null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
      }
      if (input.ApplyAction !== void 0 && input.ApplyAction !== null) {
        entries["ApplyAction"] = input.ApplyAction;
      }
      if (input.OptInType !== void 0 && input.OptInType !== null) {
        entries["OptInType"] = input.OptInType;
      }
      return entries;
    };
    var serializeAws_queryAttributeValueList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`AttributeValue.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryAuthorizeDBSecurityGroupIngressMessage = (input, context) => {
      const entries = {};
      if (input.DBSecurityGroupName !== void 0 && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
      }
      if (input.CIDRIP !== void 0 && input.CIDRIP !== null) {
        entries["CIDRIP"] = input.CIDRIP;
      }
      if (input.EC2SecurityGroupName !== void 0 && input.EC2SecurityGroupName !== null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
      }
      if (input.EC2SecurityGroupId !== void 0 && input.EC2SecurityGroupId !== null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
      }
      if (input.EC2SecurityGroupOwnerId !== void 0 && input.EC2SecurityGroupOwnerId !== null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
      }
      return entries;
    };
    var serializeAws_queryAvailabilityZones = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`AvailabilityZone.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryBacktrackDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.BacktrackTo !== void 0 && input.BacktrackTo !== null) {
        entries["BacktrackTo"] = input.BacktrackTo.toISOString().split(".")[0] + "Z";
      }
      if (input.Force !== void 0 && input.Force !== null) {
        entries["Force"] = input.Force;
      }
      if (input.UseEarliestTimeOnPointInTimeUnavailable !== void 0 && input.UseEarliestTimeOnPointInTimeUnavailable !== null) {
        entries["UseEarliestTimeOnPointInTimeUnavailable"] = input.UseEarliestTimeOnPointInTimeUnavailable;
      }
      return entries;
    };
    var serializeAws_queryCancelExportTaskMessage = (input, context) => {
      const entries = {};
      if (input.ExportTaskIdentifier !== void 0 && input.ExportTaskIdentifier !== null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
      }
      return entries;
    };
    var serializeAws_queryCloudwatchLogsExportConfiguration = (input, context) => {
      const entries = {};
      if (input.EnableLogTypes !== void 0 && input.EnableLogTypes !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableLogTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableLogTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DisableLogTypes !== void 0 && input.DisableLogTypes !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.DisableLogTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DisableLogTypes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryConnectionPoolConfiguration = (input, context) => {
      const entries = {};
      if (input.MaxConnectionsPercent !== void 0 && input.MaxConnectionsPercent !== null) {
        entries["MaxConnectionsPercent"] = input.MaxConnectionsPercent;
      }
      if (input.MaxIdleConnectionsPercent !== void 0 && input.MaxIdleConnectionsPercent !== null) {
        entries["MaxIdleConnectionsPercent"] = input.MaxIdleConnectionsPercent;
      }
      if (input.ConnectionBorrowTimeout !== void 0 && input.ConnectionBorrowTimeout !== null) {
        entries["ConnectionBorrowTimeout"] = input.ConnectionBorrowTimeout;
      }
      if (input.SessionPinningFilters !== void 0 && input.SessionPinningFilters !== null) {
        const memberEntries = serializeAws_queryStringList(input.SessionPinningFilters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SessionPinningFilters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.InitQuery !== void 0 && input.InitQuery !== null) {
        entries["InitQuery"] = input.InitQuery;
      }
      return entries;
    };
    var serializeAws_queryCopyDBClusterParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.SourceDBClusterParameterGroupIdentifier !== void 0 && input.SourceDBClusterParameterGroupIdentifier !== null) {
        entries["SourceDBClusterParameterGroupIdentifier"] = input.SourceDBClusterParameterGroupIdentifier;
      }
      if (input.TargetDBClusterParameterGroupIdentifier !== void 0 && input.TargetDBClusterParameterGroupIdentifier !== null) {
        entries["TargetDBClusterParameterGroupIdentifier"] = input.TargetDBClusterParameterGroupIdentifier;
      }
      if (input.TargetDBClusterParameterGroupDescription !== void 0 && input.TargetDBClusterParameterGroupDescription !== null) {
        entries["TargetDBClusterParameterGroupDescription"] = input.TargetDBClusterParameterGroupDescription;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCopyDBClusterSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.SourceDBClusterSnapshotIdentifier !== void 0 && input.SourceDBClusterSnapshotIdentifier !== null) {
        entries["SourceDBClusterSnapshotIdentifier"] = input.SourceDBClusterSnapshotIdentifier;
      }
      if (input.TargetDBClusterSnapshotIdentifier !== void 0 && input.TargetDBClusterSnapshotIdentifier !== null) {
        entries["TargetDBClusterSnapshotIdentifier"] = input.TargetDBClusterSnapshotIdentifier;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.PreSignedUrl !== void 0 && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
      }
      if (input.CopyTags !== void 0 && input.CopyTags !== null) {
        entries["CopyTags"] = input.CopyTags;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCopyDBParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.SourceDBParameterGroupIdentifier !== void 0 && input.SourceDBParameterGroupIdentifier !== null) {
        entries["SourceDBParameterGroupIdentifier"] = input.SourceDBParameterGroupIdentifier;
      }
      if (input.TargetDBParameterGroupIdentifier !== void 0 && input.TargetDBParameterGroupIdentifier !== null) {
        entries["TargetDBParameterGroupIdentifier"] = input.TargetDBParameterGroupIdentifier;
      }
      if (input.TargetDBParameterGroupDescription !== void 0 && input.TargetDBParameterGroupDescription !== null) {
        entries["TargetDBParameterGroupDescription"] = input.TargetDBParameterGroupDescription;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCopyDBSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.SourceDBSnapshotIdentifier !== void 0 && input.SourceDBSnapshotIdentifier !== null) {
        entries["SourceDBSnapshotIdentifier"] = input.SourceDBSnapshotIdentifier;
      }
      if (input.TargetDBSnapshotIdentifier !== void 0 && input.TargetDBSnapshotIdentifier !== null) {
        entries["TargetDBSnapshotIdentifier"] = input.TargetDBSnapshotIdentifier;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CopyTags !== void 0 && input.CopyTags !== null) {
        entries["CopyTags"] = input.CopyTags;
      }
      if (input.PreSignedUrl !== void 0 && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.TargetCustomAvailabilityZone !== void 0 && input.TargetCustomAvailabilityZone !== null) {
        entries["TargetCustomAvailabilityZone"] = input.TargetCustomAvailabilityZone;
      }
      return entries;
    };
    var serializeAws_queryCopyOptionGroupMessage = (input, context) => {
      const entries = {};
      if (input.SourceOptionGroupIdentifier !== void 0 && input.SourceOptionGroupIdentifier !== null) {
        entries["SourceOptionGroupIdentifier"] = input.SourceOptionGroupIdentifier;
      }
      if (input.TargetOptionGroupIdentifier !== void 0 && input.TargetOptionGroupIdentifier !== null) {
        entries["TargetOptionGroupIdentifier"] = input.TargetOptionGroupIdentifier;
      }
      if (input.TargetOptionGroupDescription !== void 0 && input.TargetOptionGroupDescription !== null) {
        entries["TargetOptionGroupDescription"] = input.TargetOptionGroupDescription;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateCustomDBEngineVersionMessage = (input, context) => {
      const entries = {};
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.DatabaseInstallationFilesS3BucketName !== void 0 && input.DatabaseInstallationFilesS3BucketName !== null) {
        entries["DatabaseInstallationFilesS3BucketName"] = input.DatabaseInstallationFilesS3BucketName;
      }
      if (input.DatabaseInstallationFilesS3Prefix !== void 0 && input.DatabaseInstallationFilesS3Prefix !== null) {
        entries["DatabaseInstallationFilesS3Prefix"] = input.DatabaseInstallationFilesS3Prefix;
      }
      if (input.KMSKeyId !== void 0 && input.KMSKeyId !== null) {
        entries["KMSKeyId"] = input.KMSKeyId;
      }
      if (input.Description !== void 0 && input.Description !== null) {
        entries["Description"] = input.Description;
      }
      if (input.Manifest !== void 0 && input.Manifest !== null) {
        entries["Manifest"] = input.Manifest;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBClusterEndpointMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.DBClusterEndpointIdentifier !== void 0 && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
      }
      if (input.EndpointType !== void 0 && input.EndpointType !== null) {
        entries["EndpointType"] = input.EndpointType;
      }
      if (input.StaticMembers !== void 0 && input.StaticMembers !== null) {
        const memberEntries = serializeAws_queryStringList(input.StaticMembers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StaticMembers.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExcludedMembers !== void 0 && input.ExcludedMembers !== null) {
        const memberEntries = serializeAws_queryStringList(input.ExcludedMembers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ExcludedMembers.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.AvailabilityZones !== void 0 && input.AvailabilityZones !== null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.CharacterSetName !== void 0 && input.CharacterSetName !== null) {
        entries["CharacterSetName"] = input.CharacterSetName;
      }
      if (input.DatabaseName !== void 0 && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
      }
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.MasterUsername !== void 0 && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
      }
      if (input.MasterUserPassword !== void 0 && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.PreferredBackupWindow !== void 0 && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
      }
      if (input.PreferredMaintenanceWindow !== void 0 && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.ReplicationSourceIdentifier !== void 0 && input.ReplicationSourceIdentifier !== null) {
        entries["ReplicationSourceIdentifier"] = input.ReplicationSourceIdentifier;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StorageEncrypted !== void 0 && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.PreSignedUrl !== void 0 && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.BacktrackWindow !== void 0 && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.EngineMode !== void 0 && input.EngineMode !== null) {
        entries["EngineMode"] = input.EngineMode;
      }
      if (input.ScalingConfiguration !== void 0 && input.ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.GlobalClusterIdentifier !== void 0 && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
      }
      if (input.EnableHttpEndpoint !== void 0 && input.EnableHttpEndpoint !== null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.EnableGlobalWriteForwarding !== void 0 && input.EnableGlobalWriteForwarding !== null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
      }
      if (input.DBClusterInstanceClass !== void 0 && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
      }
      if (input.AllocatedStorage !== void 0 && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.MonitoringInterval !== void 0 && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
      }
      if (input.MonitoringRoleArn !== void 0 && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
      }
      if (input.EnablePerformanceInsights !== void 0 && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
      }
      if (input.PerformanceInsightsKMSKeyId !== void 0 && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
      }
      if (input.PerformanceInsightsRetentionPeriod !== void 0 && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
      }
      if (input.ServerlessV2ScalingConfiguration !== void 0 && input.ServerlessV2ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServerlessV2ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBClusterParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.DBParameterGroupFamily !== void 0 && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
      }
      if (input.Description !== void 0 && input.Description !== null) {
        entries["Description"] = input.Description;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBClusterSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterSnapshotIdentifier !== void 0 && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
      }
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBName !== void 0 && input.DBName !== null) {
        entries["DBName"] = input.DBName;
      }
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.AllocatedStorage !== void 0 && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.MasterUsername !== void 0 && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
      }
      if (input.MasterUserPassword !== void 0 && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
      }
      if (input.DBSecurityGroups !== void 0 && input.DBSecurityGroups !== null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBSecurityGroups.${key}`;
          entries[loc] = value;
        });
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AvailabilityZone !== void 0 && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.PreferredMaintenanceWindow !== void 0 && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.PreferredBackupWindow !== void 0 && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.LicenseModel !== void 0 && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.CharacterSetName !== void 0 && input.CharacterSetName !== null) {
        entries["CharacterSetName"] = input.CharacterSetName;
      }
      if (input.NcharCharacterSetName !== void 0 && input.NcharCharacterSetName !== null) {
        entries["NcharCharacterSetName"] = input.NcharCharacterSetName;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.TdeCredentialArn !== void 0 && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
      }
      if (input.TdeCredentialPassword !== void 0 && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
      }
      if (input.StorageEncrypted !== void 0 && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.MonitoringInterval !== void 0 && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
      }
      if (input.MonitoringRoleArn !== void 0 && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.PromotionTier !== void 0 && input.PromotionTier !== null) {
        entries["PromotionTier"] = input.PromotionTier;
      }
      if (input.Timezone !== void 0 && input.Timezone !== null) {
        entries["Timezone"] = input.Timezone;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.EnablePerformanceInsights !== void 0 && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
      }
      if (input.PerformanceInsightsKMSKeyId !== void 0 && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
      }
      if (input.PerformanceInsightsRetentionPeriod !== void 0 && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ProcessorFeatures !== void 0 && input.ProcessorFeatures !== null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProcessorFeatures.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.MaxAllocatedStorage !== void 0 && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
      }
      if (input.EnableCustomerOwnedIp !== void 0 && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
      }
      if (input.CustomIamInstanceProfile !== void 0 && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
      }
      if (input.BackupTarget !== void 0 && input.BackupTarget !== null) {
        entries["BackupTarget"] = input.BackupTarget;
      }
      if (input.NetworkType !== void 0 && input.NetworkType !== null) {
        entries["NetworkType"] = input.NetworkType;
      }
      return entries;
    };
    var serializeAws_queryCreateDBInstanceReadReplicaMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.SourceDBInstanceIdentifier !== void 0 && input.SourceDBInstanceIdentifier !== null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.AvailabilityZone !== void 0 && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.MonitoringInterval !== void 0 && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
      }
      if (input.MonitoringRoleArn !== void 0 && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.PreSignedUrl !== void 0 && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.EnablePerformanceInsights !== void 0 && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
      }
      if (input.PerformanceInsightsKMSKeyId !== void 0 && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
      }
      if (input.PerformanceInsightsRetentionPeriod !== void 0 && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ProcessorFeatures !== void 0 && input.ProcessorFeatures !== null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProcessorFeatures.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UseDefaultProcessorFeatures !== void 0 && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.ReplicaMode !== void 0 && input.ReplicaMode !== null) {
        entries["ReplicaMode"] = input.ReplicaMode;
      }
      if (input.MaxAllocatedStorage !== void 0 && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
      }
      if (input.CustomIamInstanceProfile !== void 0 && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
      }
      if (input.NetworkType !== void 0 && input.NetworkType !== null) {
        entries["NetworkType"] = input.NetworkType;
      }
      return entries;
    };
    var serializeAws_queryCreateDBParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.DBParameterGroupFamily !== void 0 && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
      }
      if (input.Description !== void 0 && input.Description !== null) {
        entries["Description"] = input.Description;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBProxyEndpointRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.DBProxyEndpointName !== void 0 && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
      }
      if (input.VpcSubnetIds !== void 0 && input.VpcSubnetIds !== null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSubnetIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TargetRole !== void 0 && input.TargetRole !== null) {
        entries["TargetRole"] = input.TargetRole;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBProxyRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.EngineFamily !== void 0 && input.EngineFamily !== null) {
        entries["EngineFamily"] = input.EngineFamily;
      }
      if (input.Auth !== void 0 && input.Auth !== null) {
        const memberEntries = serializeAws_queryUserAuthConfigList(input.Auth, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Auth.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.VpcSubnetIds !== void 0 && input.VpcSubnetIds !== null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSubnetIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RequireTLS !== void 0 && input.RequireTLS !== null) {
        entries["RequireTLS"] = input.RequireTLS;
      }
      if (input.IdleClientTimeout !== void 0 && input.IdleClientTimeout !== null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
      }
      if (input.DebugLogging !== void 0 && input.DebugLogging !== null) {
        entries["DebugLogging"] = input.DebugLogging;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBSecurityGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBSecurityGroupName !== void 0 && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
      }
      if (input.DBSecurityGroupDescription !== void 0 && input.DBSecurityGroupDescription !== null) {
        entries["DBSecurityGroupDescription"] = input.DBSecurityGroupDescription;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateDBSubnetGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.DBSubnetGroupDescription !== void 0 && input.DBSubnetGroupDescription !== null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
      }
      if (input.SubnetIds !== void 0 && input.SubnetIds !== null) {
        const memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SubnetIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateEventSubscriptionMessage = (input, context) => {
      const entries = {};
      if (input.SubscriptionName !== void 0 && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
      }
      if (input.SnsTopicArn !== void 0 && input.SnsTopicArn !== null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
      }
      if (input.SourceType !== void 0 && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
      }
      if (input.EventCategories !== void 0 && input.EventCategories !== null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EventCategories.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SourceIds !== void 0 && input.SourceIds !== null) {
        const memberEntries = serializeAws_querySourceIdsList(input.SourceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SourceIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateGlobalClusterMessage = (input, context) => {
      const entries = {};
      if (input.GlobalClusterIdentifier !== void 0 && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
      }
      if (input.SourceDBClusterIdentifier !== void 0 && input.SourceDBClusterIdentifier !== null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.DatabaseName !== void 0 && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
      }
      if (input.StorageEncrypted !== void 0 && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
      }
      return entries;
    };
    var serializeAws_queryCreateOptionGroupMessage = (input, context) => {
      const entries = {};
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.EngineName !== void 0 && input.EngineName !== null) {
        entries["EngineName"] = input.EngineName;
      }
      if (input.MajorEngineVersion !== void 0 && input.MajorEngineVersion !== null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
      }
      if (input.OptionGroupDescription !== void 0 && input.OptionGroupDescription !== null) {
        entries["OptionGroupDescription"] = input.OptionGroupDescription;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDBSecurityGroupNameList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`DBSecurityGroupName.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryDeleteCustomDBEngineVersionMessage = (input, context) => {
      const entries = {};
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBClusterEndpointMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterEndpointIdentifier !== void 0 && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.SkipFinalSnapshot !== void 0 && input.SkipFinalSnapshot !== null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
      }
      if (input.FinalDBSnapshotIdentifier !== void 0 && input.FinalDBSnapshotIdentifier !== null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBClusterParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBClusterSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterSnapshotIdentifier !== void 0 && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBInstanceAutomatedBackupMessage = (input, context) => {
      const entries = {};
      if (input.DbiResourceId !== void 0 && input.DbiResourceId !== null) {
        entries["DbiResourceId"] = input.DbiResourceId;
      }
      if (input.DBInstanceAutomatedBackupsArn !== void 0 && input.DBInstanceAutomatedBackupsArn !== null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.SkipFinalSnapshot !== void 0 && input.SkipFinalSnapshot !== null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
      }
      if (input.FinalDBSnapshotIdentifier !== void 0 && input.FinalDBSnapshotIdentifier !== null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
      }
      if (input.DeleteAutomatedBackups !== void 0 && input.DeleteAutomatedBackups !== null) {
        entries["DeleteAutomatedBackups"] = input.DeleteAutomatedBackups;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBProxyEndpointRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyEndpointName !== void 0 && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBProxyRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBSecurityGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBSecurityGroupName !== void 0 && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDeleteDBSubnetGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      return entries;
    };
    var serializeAws_queryDeleteEventSubscriptionMessage = (input, context) => {
      const entries = {};
      if (input.SubscriptionName !== void 0 && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
      }
      return entries;
    };
    var serializeAws_queryDeleteGlobalClusterMessage = (input, context) => {
      const entries = {};
      if (input.GlobalClusterIdentifier !== void 0 && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDeleteOptionGroupMessage = (input, context) => {
      const entries = {};
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      return entries;
    };
    var serializeAws_queryDeregisterDBProxyTargetsRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.TargetGroupName !== void 0 && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
      }
      if (input.DBInstanceIdentifiers !== void 0 && input.DBInstanceIdentifiers !== null) {
        const memberEntries = serializeAws_queryStringList(input.DBInstanceIdentifiers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBInstanceIdentifiers.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBClusterIdentifiers !== void 0 && input.DBClusterIdentifiers !== null) {
        const memberEntries = serializeAws_queryStringList(input.DBClusterIdentifiers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBClusterIdentifiers.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDescribeAccountAttributesMessage = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryDescribeCertificatesMessage = (input, context) => {
      const entries = {};
      if (input.CertificateIdentifier !== void 0 && input.CertificateIdentifier !== null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBClusterBacktracksMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.BacktrackIdentifier !== void 0 && input.BacktrackIdentifier !== null) {
        entries["BacktrackIdentifier"] = input.BacktrackIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBClusterEndpointsMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.DBClusterEndpointIdentifier !== void 0 && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBClusterParameterGroupsMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBClusterParametersMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.Source !== void 0 && input.Source !== null) {
        entries["Source"] = input.Source;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBClustersMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.IncludeShared !== void 0 && input.IncludeShared !== null) {
        entries["IncludeShared"] = input.IncludeShared;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBClusterSnapshotAttributesMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterSnapshotIdentifier !== void 0 && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBClusterSnapshotsMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.DBClusterSnapshotIdentifier !== void 0 && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
      }
      if (input.SnapshotType !== void 0 && input.SnapshotType !== null) {
        entries["SnapshotType"] = input.SnapshotType;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.IncludeShared !== void 0 && input.IncludeShared !== null) {
        entries["IncludeShared"] = input.IncludeShared;
      }
      if (input.IncludePublic !== void 0 && input.IncludePublic !== null) {
        entries["IncludePublic"] = input.IncludePublic;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBEngineVersionsMessage = (input, context) => {
      const entries = {};
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.DBParameterGroupFamily !== void 0 && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.DefaultOnly !== void 0 && input.DefaultOnly !== null) {
        entries["DefaultOnly"] = input.DefaultOnly;
      }
      if (input.ListSupportedCharacterSets !== void 0 && input.ListSupportedCharacterSets !== null) {
        entries["ListSupportedCharacterSets"] = input.ListSupportedCharacterSets;
      }
      if (input.ListSupportedTimezones !== void 0 && input.ListSupportedTimezones !== null) {
        entries["ListSupportedTimezones"] = input.ListSupportedTimezones;
      }
      if (input.IncludeAll !== void 0 && input.IncludeAll !== null) {
        entries["IncludeAll"] = input.IncludeAll;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBInstanceAutomatedBackupsMessage = (input, context) => {
      const entries = {};
      if (input.DbiResourceId !== void 0 && input.DbiResourceId !== null) {
        entries["DbiResourceId"] = input.DbiResourceId;
      }
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.DBInstanceAutomatedBackupsArn !== void 0 && input.DBInstanceAutomatedBackupsArn !== null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBInstancesMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBLogFilesMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.FilenameContains !== void 0 && input.FilenameContains !== null) {
        entries["FilenameContains"] = input.FilenameContains;
      }
      if (input.FileLastWritten !== void 0 && input.FileLastWritten !== null) {
        entries["FileLastWritten"] = input.FileLastWritten;
      }
      if (input.FileSize !== void 0 && input.FileSize !== null) {
        entries["FileSize"] = input.FileSize;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBParameterGroupsMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBParametersMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.Source !== void 0 && input.Source !== null) {
        entries["Source"] = input.Source;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBProxiesRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBProxyEndpointsRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.DBProxyEndpointName !== void 0 && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBProxyTargetGroupsRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.TargetGroupName !== void 0 && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBProxyTargetsRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.TargetGroupName !== void 0 && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBSecurityGroupsMessage = (input, context) => {
      const entries = {};
      if (input.DBSecurityGroupName !== void 0 && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBSnapshotAttributesMessage = (input, context) => {
      const entries = {};
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBSnapshotsMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      if (input.SnapshotType !== void 0 && input.SnapshotType !== null) {
        entries["SnapshotType"] = input.SnapshotType;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.IncludeShared !== void 0 && input.IncludeShared !== null) {
        entries["IncludeShared"] = input.IncludeShared;
      }
      if (input.IncludePublic !== void 0 && input.IncludePublic !== null) {
        entries["IncludePublic"] = input.IncludePublic;
      }
      if (input.DbiResourceId !== void 0 && input.DbiResourceId !== null) {
        entries["DbiResourceId"] = input.DbiResourceId;
      }
      return entries;
    };
    var serializeAws_queryDescribeDBSubnetGroupsMessage = (input, context) => {
      const entries = {};
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeEngineDefaultClusterParametersMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupFamily !== void 0 && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeEngineDefaultParametersMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupFamily !== void 0 && input.DBParameterGroupFamily !== null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeEventCategoriesMessage = (input, context) => {
      const entries = {};
      if (input.SourceType !== void 0 && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDescribeEventsMessage = (input, context) => {
      const entries = {};
      if (input.SourceIdentifier !== void 0 && input.SourceIdentifier !== null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
      }
      if (input.SourceType !== void 0 && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
      }
      if (input.StartTime !== void 0 && input.StartTime !== null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
      }
      if (input.EndTime !== void 0 && input.EndTime !== null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
      }
      if (input.Duration !== void 0 && input.Duration !== null) {
        entries["Duration"] = input.Duration;
      }
      if (input.EventCategories !== void 0 && input.EventCategories !== null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EventCategories.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeEventSubscriptionsMessage = (input, context) => {
      const entries = {};
      if (input.SubscriptionName !== void 0 && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeExportTasksMessage = (input, context) => {
      const entries = {};
      if (input.ExportTaskIdentifier !== void 0 && input.ExportTaskIdentifier !== null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
      }
      if (input.SourceArn !== void 0 && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      return entries;
    };
    var serializeAws_queryDescribeGlobalClustersMessage = (input, context) => {
      const entries = {};
      if (input.GlobalClusterIdentifier !== void 0 && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeOptionGroupOptionsMessage = (input, context) => {
      const entries = {};
      if (input.EngineName !== void 0 && input.EngineName !== null) {
        entries["EngineName"] = input.EngineName;
      }
      if (input.MajorEngineVersion !== void 0 && input.MajorEngineVersion !== null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeOptionGroupsMessage = (input, context) => {
      const entries = {};
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.EngineName !== void 0 && input.EngineName !== null) {
        entries["EngineName"] = input.EngineName;
      }
      if (input.MajorEngineVersion !== void 0 && input.MajorEngineVersion !== null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
      }
      return entries;
    };
    var serializeAws_queryDescribeOrderableDBInstanceOptionsMessage = (input, context) => {
      const entries = {};
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.LicenseModel !== void 0 && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
      }
      if (input.AvailabilityZoneGroup !== void 0 && input.AvailabilityZoneGroup !== null) {
        entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
      }
      if (input.Vpc !== void 0 && input.Vpc !== null) {
        entries["Vpc"] = input.Vpc;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribePendingMaintenanceActionsMessage = (input, context) => {
      const entries = {};
      if (input.ResourceIdentifier !== void 0 && input.ResourceIdentifier !== null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      return entries;
    };
    var serializeAws_queryDescribeReservedDBInstancesMessage = (input, context) => {
      const entries = {};
      if (input.ReservedDBInstanceId !== void 0 && input.ReservedDBInstanceId !== null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
      }
      if (input.ReservedDBInstancesOfferingId !== void 0 && input.ReservedDBInstancesOfferingId !== null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.Duration !== void 0 && input.Duration !== null) {
        entries["Duration"] = input.Duration;
      }
      if (input.ProductDescription !== void 0 && input.ProductDescription !== null) {
        entries["ProductDescription"] = input.ProductDescription;
      }
      if (input.OfferingType !== void 0 && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.LeaseId !== void 0 && input.LeaseId !== null) {
        entries["LeaseId"] = input.LeaseId;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeReservedDBInstancesOfferingsMessage = (input, context) => {
      const entries = {};
      if (input.ReservedDBInstancesOfferingId !== void 0 && input.ReservedDBInstancesOfferingId !== null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.Duration !== void 0 && input.Duration !== null) {
        entries["Duration"] = input.Duration;
      }
      if (input.ProductDescription !== void 0 && input.ProductDescription !== null) {
        entries["ProductDescription"] = input.ProductDescription;
      }
      if (input.OfferingType !== void 0 && input.OfferingType !== null) {
        entries["OfferingType"] = input.OfferingType;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryDescribeSourceRegionsMessage = (input, context) => {
      const entries = {};
      if (input.RegionName !== void 0 && input.RegionName !== null) {
        entries["RegionName"] = input.RegionName;
      }
      if (input.MaxRecords !== void 0 && input.MaxRecords !== null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDescribeValidDBInstanceModificationsMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      return entries;
    };
    var serializeAws_queryDownloadDBLogFilePortionMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.LogFileName !== void 0 && input.LogFileName !== null) {
        entries["LogFileName"] = input.LogFileName;
      }
      if (input.Marker !== void 0 && input.Marker !== null) {
        entries["Marker"] = input.Marker;
      }
      if (input.NumberOfLines !== void 0 && input.NumberOfLines !== null) {
        entries["NumberOfLines"] = input.NumberOfLines;
      }
      return entries;
    };
    var serializeAws_queryEngineModeList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryEventCategoriesList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`EventCategory.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryFailoverDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.TargetDBInstanceIdentifier !== void 0 && input.TargetDBInstanceIdentifier !== null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
      }
      return entries;
    };
    var serializeAws_queryFailoverGlobalClusterMessage = (input, context) => {
      const entries = {};
      if (input.GlobalClusterIdentifier !== void 0 && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
      }
      if (input.TargetDbClusterIdentifier !== void 0 && input.TargetDbClusterIdentifier !== null) {
        entries["TargetDbClusterIdentifier"] = input.TargetDbClusterIdentifier;
      }
      return entries;
    };
    var serializeAws_queryFilter = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Values !== void 0 && input.Values !== null) {
        const memberEntries = serializeAws_queryFilterValueList(input.Values, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Values.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryFilterList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`Filter.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryFilterValueList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`Value.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryKeyList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryListTagsForResourceMessage = (input, context) => {
      const entries = {};
      if (input.ResourceName !== void 0 && input.ResourceName !== null) {
        entries["ResourceName"] = input.ResourceName;
      }
      if (input.Filters !== void 0 && input.Filters !== null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryLogTypeList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryModifyCertificatesMessage = (input, context) => {
      const entries = {};
      if (input.CertificateIdentifier !== void 0 && input.CertificateIdentifier !== null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
      }
      if (input.RemoveCustomerOverride !== void 0 && input.RemoveCustomerOverride !== null) {
        entries["RemoveCustomerOverride"] = input.RemoveCustomerOverride;
      }
      return entries;
    };
    var serializeAws_queryModifyCurrentDBClusterCapacityMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.Capacity !== void 0 && input.Capacity !== null) {
        entries["Capacity"] = input.Capacity;
      }
      if (input.SecondsBeforeTimeout !== void 0 && input.SecondsBeforeTimeout !== null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
      }
      if (input.TimeoutAction !== void 0 && input.TimeoutAction !== null) {
        entries["TimeoutAction"] = input.TimeoutAction;
      }
      return entries;
    };
    var serializeAws_queryModifyCustomDBEngineVersionMessage = (input, context) => {
      const entries = {};
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.Description !== void 0 && input.Description !== null) {
        entries["Description"] = input.Description;
      }
      if (input.Status !== void 0 && input.Status !== null) {
        entries["Status"] = input.Status;
      }
      return entries;
    };
    var serializeAws_queryModifyDBClusterEndpointMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterEndpointIdentifier !== void 0 && input.DBClusterEndpointIdentifier !== null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
      }
      if (input.EndpointType !== void 0 && input.EndpointType !== null) {
        entries["EndpointType"] = input.EndpointType;
      }
      if (input.StaticMembers !== void 0 && input.StaticMembers !== null) {
        const memberEntries = serializeAws_queryStringList(input.StaticMembers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StaticMembers.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExcludedMembers !== void 0 && input.ExcludedMembers !== null) {
        const memberEntries = serializeAws_queryStringList(input.ExcludedMembers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ExcludedMembers.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.NewDBClusterIdentifier !== void 0 && input.NewDBClusterIdentifier !== null) {
        entries["NewDBClusterIdentifier"] = input.NewDBClusterIdentifier;
      }
      if (input.ApplyImmediately !== void 0 && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.MasterUserPassword !== void 0 && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.PreferredBackupWindow !== void 0 && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
      }
      if (input.PreferredMaintenanceWindow !== void 0 && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.BacktrackWindow !== void 0 && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
      }
      if (input.CloudwatchLogsExportConfiguration !== void 0 && input.CloudwatchLogsExportConfiguration !== null) {
        const memberEntries = serializeAws_queryCloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CloudwatchLogsExportConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.AllowMajorVersionUpgrade !== void 0 && input.AllowMajorVersionUpgrade !== null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
      }
      if (input.DBInstanceParameterGroupName !== void 0 && input.DBInstanceParameterGroupName !== null) {
        entries["DBInstanceParameterGroupName"] = input.DBInstanceParameterGroupName;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.ScalingConfiguration !== void 0 && input.ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.EnableHttpEndpoint !== void 0 && input.EnableHttpEndpoint !== null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.EnableGlobalWriteForwarding !== void 0 && input.EnableGlobalWriteForwarding !== null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
      }
      if (input.DBClusterInstanceClass !== void 0 && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
      }
      if (input.AllocatedStorage !== void 0 && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.MonitoringInterval !== void 0 && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
      }
      if (input.MonitoringRoleArn !== void 0 && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
      }
      if (input.EnablePerformanceInsights !== void 0 && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
      }
      if (input.PerformanceInsightsKMSKeyId !== void 0 && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
      }
      if (input.PerformanceInsightsRetentionPeriod !== void 0 && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
      }
      if (input.ServerlessV2ScalingConfiguration !== void 0 && input.ServerlessV2ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServerlessV2ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBClusterParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.Parameters !== void 0 && input.Parameters !== null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBClusterSnapshotAttributeMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterSnapshotIdentifier !== void 0 && input.DBClusterSnapshotIdentifier !== null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
      }
      if (input.AttributeName !== void 0 && input.AttributeName !== null) {
        entries["AttributeName"] = input.AttributeName;
      }
      if (input.ValuesToAdd !== void 0 && input.ValuesToAdd !== null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToAdd, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ValuesToAdd.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ValuesToRemove !== void 0 && input.ValuesToRemove !== null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToRemove, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ValuesToRemove.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.AllocatedStorage !== void 0 && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.DBSecurityGroups !== void 0 && input.DBSecurityGroups !== null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBSecurityGroups.${key}`;
          entries[loc] = value;
        });
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ApplyImmediately !== void 0 && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      if (input.MasterUserPassword !== void 0 && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
      }
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.PreferredBackupWindow !== void 0 && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
      }
      if (input.PreferredMaintenanceWindow !== void 0 && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.AllowMajorVersionUpgrade !== void 0 && input.AllowMajorVersionUpgrade !== null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.LicenseModel !== void 0 && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.NewDBInstanceIdentifier !== void 0 && input.NewDBInstanceIdentifier !== null) {
        entries["NewDBInstanceIdentifier"] = input.NewDBInstanceIdentifier;
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.TdeCredentialArn !== void 0 && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
      }
      if (input.TdeCredentialPassword !== void 0 && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
      }
      if (input.CACertificateIdentifier !== void 0 && input.CACertificateIdentifier !== null) {
        entries["CACertificateIdentifier"] = input.CACertificateIdentifier;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.MonitoringInterval !== void 0 && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
      }
      if (input.DBPortNumber !== void 0 && input.DBPortNumber !== null) {
        entries["DBPortNumber"] = input.DBPortNumber;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.MonitoringRoleArn !== void 0 && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.PromotionTier !== void 0 && input.PromotionTier !== null) {
        entries["PromotionTier"] = input.PromotionTier;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.EnablePerformanceInsights !== void 0 && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
      }
      if (input.PerformanceInsightsKMSKeyId !== void 0 && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
      }
      if (input.PerformanceInsightsRetentionPeriod !== void 0 && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
      }
      if (input.CloudwatchLogsExportConfiguration !== void 0 && input.CloudwatchLogsExportConfiguration !== null) {
        const memberEntries = serializeAws_queryCloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CloudwatchLogsExportConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ProcessorFeatures !== void 0 && input.ProcessorFeatures !== null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProcessorFeatures.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UseDefaultProcessorFeatures !== void 0 && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.MaxAllocatedStorage !== void 0 && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
      }
      if (input.CertificateRotationRestart !== void 0 && input.CertificateRotationRestart !== null) {
        entries["CertificateRotationRestart"] = input.CertificateRotationRestart;
      }
      if (input.ReplicaMode !== void 0 && input.ReplicaMode !== null) {
        entries["ReplicaMode"] = input.ReplicaMode;
      }
      if (input.EnableCustomerOwnedIp !== void 0 && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
      }
      if (input.AwsBackupRecoveryPointArn !== void 0 && input.AwsBackupRecoveryPointArn !== null) {
        entries["AwsBackupRecoveryPointArn"] = input.AwsBackupRecoveryPointArn;
      }
      if (input.AutomationMode !== void 0 && input.AutomationMode !== null) {
        entries["AutomationMode"] = input.AutomationMode;
      }
      if (input.ResumeFullAutomationModeMinutes !== void 0 && input.ResumeFullAutomationModeMinutes !== null) {
        entries["ResumeFullAutomationModeMinutes"] = input.ResumeFullAutomationModeMinutes;
      }
      if (input.NetworkType !== void 0 && input.NetworkType !== null) {
        entries["NetworkType"] = input.NetworkType;
      }
      return entries;
    };
    var serializeAws_queryModifyDBParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.Parameters !== void 0 && input.Parameters !== null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBProxyEndpointRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyEndpointName !== void 0 && input.DBProxyEndpointName !== null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
      }
      if (input.NewDBProxyEndpointName !== void 0 && input.NewDBProxyEndpointName !== null) {
        entries["NewDBProxyEndpointName"] = input.NewDBProxyEndpointName;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBProxyRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.NewDBProxyName !== void 0 && input.NewDBProxyName !== null) {
        entries["NewDBProxyName"] = input.NewDBProxyName;
      }
      if (input.Auth !== void 0 && input.Auth !== null) {
        const memberEntries = serializeAws_queryUserAuthConfigList(input.Auth, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Auth.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RequireTLS !== void 0 && input.RequireTLS !== null) {
        entries["RequireTLS"] = input.RequireTLS;
      }
      if (input.IdleClientTimeout !== void 0 && input.IdleClientTimeout !== null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
      }
      if (input.DebugLogging !== void 0 && input.DebugLogging !== null) {
        entries["DebugLogging"] = input.DebugLogging;
      }
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.SecurityGroups !== void 0 && input.SecurityGroups !== null) {
        const memberEntries = serializeAws_queryStringList(input.SecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SecurityGroups.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBProxyTargetGroupRequest = (input, context) => {
      const entries = {};
      if (input.TargetGroupName !== void 0 && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
      }
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.ConnectionPoolConfig !== void 0 && input.ConnectionPoolConfig !== null) {
        const memberEntries = serializeAws_queryConnectionPoolConfiguration(input.ConnectionPoolConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ConnectionPoolConfig.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NewName !== void 0 && input.NewName !== null) {
        entries["NewName"] = input.NewName;
      }
      return entries;
    };
    var serializeAws_queryModifyDBSnapshotAttributeMessage = (input, context) => {
      const entries = {};
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      if (input.AttributeName !== void 0 && input.AttributeName !== null) {
        entries["AttributeName"] = input.AttributeName;
      }
      if (input.ValuesToAdd !== void 0 && input.ValuesToAdd !== null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToAdd, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ValuesToAdd.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ValuesToRemove !== void 0 && input.ValuesToRemove !== null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToRemove, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ValuesToRemove.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyDBSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      return entries;
    };
    var serializeAws_queryModifyDBSubnetGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.DBSubnetGroupDescription !== void 0 && input.DBSubnetGroupDescription !== null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
      }
      if (input.SubnetIds !== void 0 && input.SubnetIds !== null) {
        const memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SubnetIds.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryModifyEventSubscriptionMessage = (input, context) => {
      const entries = {};
      if (input.SubscriptionName !== void 0 && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
      }
      if (input.SnsTopicArn !== void 0 && input.SnsTopicArn !== null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
      }
      if (input.SourceType !== void 0 && input.SourceType !== null) {
        entries["SourceType"] = input.SourceType;
      }
      if (input.EventCategories !== void 0 && input.EventCategories !== null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EventCategories.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Enabled !== void 0 && input.Enabled !== null) {
        entries["Enabled"] = input.Enabled;
      }
      return entries;
    };
    var serializeAws_queryModifyGlobalClusterMessage = (input, context) => {
      const entries = {};
      if (input.GlobalClusterIdentifier !== void 0 && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
      }
      if (input.NewGlobalClusterIdentifier !== void 0 && input.NewGlobalClusterIdentifier !== null) {
        entries["NewGlobalClusterIdentifier"] = input.NewGlobalClusterIdentifier;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.AllowMajorVersionUpgrade !== void 0 && input.AllowMajorVersionUpgrade !== null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
      }
      return entries;
    };
    var serializeAws_queryModifyOptionGroupMessage = (input, context) => {
      const entries = {};
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.OptionsToInclude !== void 0 && input.OptionsToInclude !== null) {
        const memberEntries = serializeAws_queryOptionConfigurationList(input.OptionsToInclude, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OptionsToInclude.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OptionsToRemove !== void 0 && input.OptionsToRemove !== null) {
        const memberEntries = serializeAws_queryOptionNamesList(input.OptionsToRemove, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OptionsToRemove.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ApplyImmediately !== void 0 && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      return entries;
    };
    var serializeAws_queryOptionConfiguration = (input, context) => {
      const entries = {};
      if (input.OptionName !== void 0 && input.OptionName !== null) {
        entries["OptionName"] = input.OptionName;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.OptionVersion !== void 0 && input.OptionVersion !== null) {
        entries["OptionVersion"] = input.OptionVersion;
      }
      if (input.DBSecurityGroupMemberships !== void 0 && input.DBSecurityGroupMemberships !== null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroupMemberships, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBSecurityGroupMemberships.${key}`;
          entries[loc] = value;
        });
      }
      if (input.VpcSecurityGroupMemberships !== void 0 && input.VpcSecurityGroupMemberships !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupMemberships, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupMemberships.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OptionSettings !== void 0 && input.OptionSettings !== null) {
        const memberEntries = serializeAws_queryOptionSettingsList(input.OptionSettings, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OptionSettings.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryOptionConfigurationList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryOptionConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`OptionConfiguration.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryOptionNamesList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryOptionSetting = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      if (input.DefaultValue !== void 0 && input.DefaultValue !== null) {
        entries["DefaultValue"] = input.DefaultValue;
      }
      if (input.Description !== void 0 && input.Description !== null) {
        entries["Description"] = input.Description;
      }
      if (input.ApplyType !== void 0 && input.ApplyType !== null) {
        entries["ApplyType"] = input.ApplyType;
      }
      if (input.DataType !== void 0 && input.DataType !== null) {
        entries["DataType"] = input.DataType;
      }
      if (input.AllowedValues !== void 0 && input.AllowedValues !== null) {
        entries["AllowedValues"] = input.AllowedValues;
      }
      if (input.IsModifiable !== void 0 && input.IsModifiable !== null) {
        entries["IsModifiable"] = input.IsModifiable;
      }
      if (input.IsCollection !== void 0 && input.IsCollection !== null) {
        entries["IsCollection"] = input.IsCollection;
      }
      return entries;
    };
    var serializeAws_queryOptionSettingsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryOptionSetting(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`OptionSetting.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryParameter = (input, context) => {
      const entries = {};
      if (input.ParameterName !== void 0 && input.ParameterName !== null) {
        entries["ParameterName"] = input.ParameterName;
      }
      if (input.ParameterValue !== void 0 && input.ParameterValue !== null) {
        entries["ParameterValue"] = input.ParameterValue;
      }
      if (input.Description !== void 0 && input.Description !== null) {
        entries["Description"] = input.Description;
      }
      if (input.Source !== void 0 && input.Source !== null) {
        entries["Source"] = input.Source;
      }
      if (input.ApplyType !== void 0 && input.ApplyType !== null) {
        entries["ApplyType"] = input.ApplyType;
      }
      if (input.DataType !== void 0 && input.DataType !== null) {
        entries["DataType"] = input.DataType;
      }
      if (input.AllowedValues !== void 0 && input.AllowedValues !== null) {
        entries["AllowedValues"] = input.AllowedValues;
      }
      if (input.IsModifiable !== void 0 && input.IsModifiable !== null) {
        entries["IsModifiable"] = input.IsModifiable;
      }
      if (input.MinimumEngineVersion !== void 0 && input.MinimumEngineVersion !== null) {
        entries["MinimumEngineVersion"] = input.MinimumEngineVersion;
      }
      if (input.ApplyMethod !== void 0 && input.ApplyMethod !== null) {
        entries["ApplyMethod"] = input.ApplyMethod;
      }
      if (input.SupportedEngineModes !== void 0 && input.SupportedEngineModes !== null) {
        const memberEntries = serializeAws_queryEngineModeList(input.SupportedEngineModes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SupportedEngineModes.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryParametersList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryParameter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`Parameter.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryProcessorFeature = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_queryProcessorFeatureList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryProcessorFeature(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`ProcessorFeature.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPromoteReadReplicaDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      return entries;
    };
    var serializeAws_queryPromoteReadReplicaMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.PreferredBackupWindow !== void 0 && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
      }
      return entries;
    };
    var serializeAws_queryPurchaseReservedDBInstancesOfferingMessage = (input, context) => {
      const entries = {};
      if (input.ReservedDBInstancesOfferingId !== void 0 && input.ReservedDBInstancesOfferingId !== null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
      }
      if (input.ReservedDBInstanceId !== void 0 && input.ReservedDBInstanceId !== null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
      }
      if (input.DBInstanceCount !== void 0 && input.DBInstanceCount !== null) {
        entries["DBInstanceCount"] = input.DBInstanceCount;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryRebootDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      return entries;
    };
    var serializeAws_queryRebootDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.ForceFailover !== void 0 && input.ForceFailover !== null) {
        entries["ForceFailover"] = input.ForceFailover;
      }
      return entries;
    };
    var serializeAws_queryRegisterDBProxyTargetsRequest = (input, context) => {
      const entries = {};
      if (input.DBProxyName !== void 0 && input.DBProxyName !== null) {
        entries["DBProxyName"] = input.DBProxyName;
      }
      if (input.TargetGroupName !== void 0 && input.TargetGroupName !== null) {
        entries["TargetGroupName"] = input.TargetGroupName;
      }
      if (input.DBInstanceIdentifiers !== void 0 && input.DBInstanceIdentifiers !== null) {
        const memberEntries = serializeAws_queryStringList(input.DBInstanceIdentifiers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBInstanceIdentifiers.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBClusterIdentifiers !== void 0 && input.DBClusterIdentifiers !== null) {
        const memberEntries = serializeAws_queryStringList(input.DBClusterIdentifiers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBClusterIdentifiers.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryRemoveFromGlobalClusterMessage = (input, context) => {
      const entries = {};
      if (input.GlobalClusterIdentifier !== void 0 && input.GlobalClusterIdentifier !== null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
      }
      if (input.DbClusterIdentifier !== void 0 && input.DbClusterIdentifier !== null) {
        entries["DbClusterIdentifier"] = input.DbClusterIdentifier;
      }
      return entries;
    };
    var serializeAws_queryRemoveRoleFromDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.FeatureName !== void 0 && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
      }
      return entries;
    };
    var serializeAws_queryRemoveRoleFromDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.FeatureName !== void 0 && input.FeatureName !== null) {
        entries["FeatureName"] = input.FeatureName;
      }
      return entries;
    };
    var serializeAws_queryRemoveSourceIdentifierFromSubscriptionMessage = (input, context) => {
      const entries = {};
      if (input.SubscriptionName !== void 0 && input.SubscriptionName !== null) {
        entries["SubscriptionName"] = input.SubscriptionName;
      }
      if (input.SourceIdentifier !== void 0 && input.SourceIdentifier !== null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
      }
      return entries;
    };
    var serializeAws_queryRemoveTagsFromResourceMessage = (input, context) => {
      const entries = {};
      if (input.ResourceName !== void 0 && input.ResourceName !== null) {
        entries["ResourceName"] = input.ResourceName;
      }
      if (input.TagKeys !== void 0 && input.TagKeys !== null) {
        const memberEntries = serializeAws_queryKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryResetDBClusterParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.ResetAllParameters !== void 0 && input.ResetAllParameters !== null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
      }
      if (input.Parameters !== void 0 && input.Parameters !== null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryResetDBParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.ResetAllParameters !== void 0 && input.ResetAllParameters !== null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
      }
      if (input.Parameters !== void 0 && input.Parameters !== null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryRestoreDBClusterFromS3Message = (input, context) => {
      const entries = {};
      if (input.AvailabilityZones !== void 0 && input.AvailabilityZones !== null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.CharacterSetName !== void 0 && input.CharacterSetName !== null) {
        entries["CharacterSetName"] = input.CharacterSetName;
      }
      if (input.DatabaseName !== void 0 && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
      }
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.MasterUsername !== void 0 && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
      }
      if (input.MasterUserPassword !== void 0 && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.PreferredBackupWindow !== void 0 && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
      }
      if (input.PreferredMaintenanceWindow !== void 0 && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StorageEncrypted !== void 0 && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.SourceEngine !== void 0 && input.SourceEngine !== null) {
        entries["SourceEngine"] = input.SourceEngine;
      }
      if (input.SourceEngineVersion !== void 0 && input.SourceEngineVersion !== null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
      }
      if (input.S3BucketName !== void 0 && input.S3BucketName !== null) {
        entries["S3BucketName"] = input.S3BucketName;
      }
      if (input.S3Prefix !== void 0 && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
      }
      if (input.S3IngestionRoleArn !== void 0 && input.S3IngestionRoleArn !== null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
      }
      if (input.BacktrackWindow !== void 0 && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.ServerlessV2ScalingConfiguration !== void 0 && input.ServerlessV2ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServerlessV2ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryRestoreDBClusterFromSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.AvailabilityZones !== void 0 && input.AvailabilityZones !== null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.SnapshotIdentifier !== void 0 && input.SnapshotIdentifier !== null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.DatabaseName !== void 0 && input.DatabaseName !== null) {
        entries["DatabaseName"] = input.DatabaseName;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.BacktrackWindow !== void 0 && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.EngineMode !== void 0 && input.EngineMode !== null) {
        entries["EngineMode"] = input.EngineMode;
      }
      if (input.ScalingConfiguration !== void 0 && input.ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.DBClusterInstanceClass !== void 0 && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.ServerlessV2ScalingConfiguration !== void 0 && input.ServerlessV2ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServerlessV2ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryRestoreDBClusterToPointInTimeMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      if (input.RestoreType !== void 0 && input.RestoreType !== null) {
        entries["RestoreType"] = input.RestoreType;
      }
      if (input.SourceDBClusterIdentifier !== void 0 && input.SourceDBClusterIdentifier !== null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
      }
      if (input.RestoreToTime !== void 0 && input.RestoreToTime !== null) {
        entries["RestoreToTime"] = input.RestoreToTime.toISOString().split(".")[0] + "Z";
      }
      if (input.UseLatestRestorableTime !== void 0 && input.UseLatestRestorableTime !== null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.BacktrackWindow !== void 0 && input.BacktrackWindow !== null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DBClusterParameterGroupName !== void 0 && input.DBClusterParameterGroupName !== null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.ScalingConfiguration !== void 0 && input.ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.EngineMode !== void 0 && input.EngineMode !== null) {
        entries["EngineMode"] = input.EngineMode;
      }
      if (input.DBClusterInstanceClass !== void 0 && input.DBClusterInstanceClass !== null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.ServerlessV2ScalingConfiguration !== void 0 && input.ServerlessV2ScalingConfiguration !== null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServerlessV2ScalingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryRestoreDBInstanceFromDBSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.AvailabilityZone !== void 0 && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.LicenseModel !== void 0 && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
      }
      if (input.DBName !== void 0 && input.DBName !== null) {
        entries["DBName"] = input.DBName;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.TdeCredentialArn !== void 0 && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
      }
      if (input.TdeCredentialPassword !== void 0 && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ProcessorFeatures !== void 0 && input.ProcessorFeatures !== null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProcessorFeatures.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UseDefaultProcessorFeatures !== void 0 && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
      }
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.EnableCustomerOwnedIp !== void 0 && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
      }
      if (input.CustomIamInstanceProfile !== void 0 && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
      }
      if (input.BackupTarget !== void 0 && input.BackupTarget !== null) {
        entries["BackupTarget"] = input.BackupTarget;
      }
      if (input.NetworkType !== void 0 && input.NetworkType !== null) {
        entries["NetworkType"] = input.NetworkType;
      }
      return entries;
    };
    var serializeAws_queryRestoreDBInstanceFromS3Message = (input, context) => {
      const entries = {};
      if (input.DBName !== void 0 && input.DBName !== null) {
        entries["DBName"] = input.DBName;
      }
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.AllocatedStorage !== void 0 && input.AllocatedStorage !== null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.MasterUsername !== void 0 && input.MasterUsername !== null) {
        entries["MasterUsername"] = input.MasterUsername;
      }
      if (input.MasterUserPassword !== void 0 && input.MasterUserPassword !== null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
      }
      if (input.DBSecurityGroups !== void 0 && input.DBSecurityGroups !== null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DBSecurityGroups.${key}`;
          entries[loc] = value;
        });
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AvailabilityZone !== void 0 && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.PreferredMaintenanceWindow !== void 0 && input.PreferredMaintenanceWindow !== null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.PreferredBackupWindow !== void 0 && input.PreferredBackupWindow !== null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.EngineVersion !== void 0 && input.EngineVersion !== null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.LicenseModel !== void 0 && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.StorageEncrypted !== void 0 && input.StorageEncrypted !== null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.MonitoringInterval !== void 0 && input.MonitoringInterval !== null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
      }
      if (input.MonitoringRoleArn !== void 0 && input.MonitoringRoleArn !== null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.SourceEngine !== void 0 && input.SourceEngine !== null) {
        entries["SourceEngine"] = input.SourceEngine;
      }
      if (input.SourceEngineVersion !== void 0 && input.SourceEngineVersion !== null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
      }
      if (input.S3BucketName !== void 0 && input.S3BucketName !== null) {
        entries["S3BucketName"] = input.S3BucketName;
      }
      if (input.S3Prefix !== void 0 && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
      }
      if (input.S3IngestionRoleArn !== void 0 && input.S3IngestionRoleArn !== null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
      }
      if (input.EnablePerformanceInsights !== void 0 && input.EnablePerformanceInsights !== null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
      }
      if (input.PerformanceInsightsKMSKeyId !== void 0 && input.PerformanceInsightsKMSKeyId !== null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
      }
      if (input.PerformanceInsightsRetentionPeriod !== void 0 && input.PerformanceInsightsRetentionPeriod !== null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ProcessorFeatures !== void 0 && input.ProcessorFeatures !== null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProcessorFeatures.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UseDefaultProcessorFeatures !== void 0 && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.MaxAllocatedStorage !== void 0 && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
      }
      if (input.NetworkType !== void 0 && input.NetworkType !== null) {
        entries["NetworkType"] = input.NetworkType;
      }
      return entries;
    };
    var serializeAws_queryRestoreDBInstanceToPointInTimeMessage = (input, context) => {
      const entries = {};
      if (input.SourceDBInstanceIdentifier !== void 0 && input.SourceDBInstanceIdentifier !== null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
      }
      if (input.TargetDBInstanceIdentifier !== void 0 && input.TargetDBInstanceIdentifier !== null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
      }
      if (input.RestoreTime !== void 0 && input.RestoreTime !== null) {
        entries["RestoreTime"] = input.RestoreTime.toISOString().split(".")[0] + "Z";
      }
      if (input.UseLatestRestorableTime !== void 0 && input.UseLatestRestorableTime !== null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
      }
      if (input.DBInstanceClass !== void 0 && input.DBInstanceClass !== null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
      }
      if (input.Port !== void 0 && input.Port !== null) {
        entries["Port"] = input.Port;
      }
      if (input.AvailabilityZone !== void 0 && input.AvailabilityZone !== null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
      }
      if (input.DBSubnetGroupName !== void 0 && input.DBSubnetGroupName !== null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
      }
      if (input.MultiAZ !== void 0 && input.MultiAZ !== null) {
        entries["MultiAZ"] = input.MultiAZ;
      }
      if (input.PubliclyAccessible !== void 0 && input.PubliclyAccessible !== null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
      }
      if (input.AutoMinorVersionUpgrade !== void 0 && input.AutoMinorVersionUpgrade !== null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.LicenseModel !== void 0 && input.LicenseModel !== null) {
        entries["LicenseModel"] = input.LicenseModel;
      }
      if (input.DBName !== void 0 && input.DBName !== null) {
        entries["DBName"] = input.DBName;
      }
      if (input.Engine !== void 0 && input.Engine !== null) {
        entries["Engine"] = input.Engine;
      }
      if (input.Iops !== void 0 && input.Iops !== null) {
        entries["Iops"] = input.Iops;
      }
      if (input.OptionGroupName !== void 0 && input.OptionGroupName !== null) {
        entries["OptionGroupName"] = input.OptionGroupName;
      }
      if (input.CopyTagsToSnapshot !== void 0 && input.CopyTagsToSnapshot !== null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StorageType !== void 0 && input.StorageType !== null) {
        entries["StorageType"] = input.StorageType;
      }
      if (input.TdeCredentialArn !== void 0 && input.TdeCredentialArn !== null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
      }
      if (input.TdeCredentialPassword !== void 0 && input.TdeCredentialPassword !== null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
      }
      if (input.VpcSecurityGroupIds !== void 0 && input.VpcSecurityGroupIds !== null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `VpcSecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Domain !== void 0 && input.Domain !== null) {
        entries["Domain"] = input.Domain;
      }
      if (input.DomainIAMRoleName !== void 0 && input.DomainIAMRoleName !== null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
      }
      if (input.EnableIAMDatabaseAuthentication !== void 0 && input.EnableIAMDatabaseAuthentication !== null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
      }
      if (input.EnableCloudwatchLogsExports !== void 0 && input.EnableCloudwatchLogsExports !== null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `EnableCloudwatchLogsExports.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ProcessorFeatures !== void 0 && input.ProcessorFeatures !== null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProcessorFeatures.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UseDefaultProcessorFeatures !== void 0 && input.UseDefaultProcessorFeatures !== null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
      }
      if (input.DBParameterGroupName !== void 0 && input.DBParameterGroupName !== null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
      }
      if (input.DeletionProtection !== void 0 && input.DeletionProtection !== null) {
        entries["DeletionProtection"] = input.DeletionProtection;
      }
      if (input.SourceDbiResourceId !== void 0 && input.SourceDbiResourceId !== null) {
        entries["SourceDbiResourceId"] = input.SourceDbiResourceId;
      }
      if (input.MaxAllocatedStorage !== void 0 && input.MaxAllocatedStorage !== null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
      }
      if (input.SourceDBInstanceAutomatedBackupsArn !== void 0 && input.SourceDBInstanceAutomatedBackupsArn !== null) {
        entries["SourceDBInstanceAutomatedBackupsArn"] = input.SourceDBInstanceAutomatedBackupsArn;
      }
      if (input.EnableCustomerOwnedIp !== void 0 && input.EnableCustomerOwnedIp !== null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
      }
      if (input.CustomIamInstanceProfile !== void 0 && input.CustomIamInstanceProfile !== null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
      }
      if (input.BackupTarget !== void 0 && input.BackupTarget !== null) {
        entries["BackupTarget"] = input.BackupTarget;
      }
      if (input.NetworkType !== void 0 && input.NetworkType !== null) {
        entries["NetworkType"] = input.NetworkType;
      }
      return entries;
    };
    var serializeAws_queryRevokeDBSecurityGroupIngressMessage = (input, context) => {
      const entries = {};
      if (input.DBSecurityGroupName !== void 0 && input.DBSecurityGroupName !== null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
      }
      if (input.CIDRIP !== void 0 && input.CIDRIP !== null) {
        entries["CIDRIP"] = input.CIDRIP;
      }
      if (input.EC2SecurityGroupName !== void 0 && input.EC2SecurityGroupName !== null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
      }
      if (input.EC2SecurityGroupId !== void 0 && input.EC2SecurityGroupId !== null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
      }
      if (input.EC2SecurityGroupOwnerId !== void 0 && input.EC2SecurityGroupOwnerId !== null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
      }
      return entries;
    };
    var serializeAws_queryScalingConfiguration = (input, context) => {
      const entries = {};
      if (input.MinCapacity !== void 0 && input.MinCapacity !== null) {
        entries["MinCapacity"] = input.MinCapacity;
      }
      if (input.MaxCapacity !== void 0 && input.MaxCapacity !== null) {
        entries["MaxCapacity"] = input.MaxCapacity;
      }
      if (input.AutoPause !== void 0 && input.AutoPause !== null) {
        entries["AutoPause"] = input.AutoPause;
      }
      if (input.SecondsUntilAutoPause !== void 0 && input.SecondsUntilAutoPause !== null) {
        entries["SecondsUntilAutoPause"] = input.SecondsUntilAutoPause;
      }
      if (input.TimeoutAction !== void 0 && input.TimeoutAction !== null) {
        entries["TimeoutAction"] = input.TimeoutAction;
      }
      if (input.SecondsBeforeTimeout !== void 0 && input.SecondsBeforeTimeout !== null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
      }
      return entries;
    };
    var serializeAws_queryServerlessV2ScalingConfiguration = (input, context) => {
      const entries = {};
      if (input.MinCapacity !== void 0 && input.MinCapacity !== null) {
        entries["MinCapacity"] = (0, smithy_client_1.serializeFloat)(input.MinCapacity);
      }
      if (input.MaxCapacity !== void 0 && input.MaxCapacity !== null) {
        entries["MaxCapacity"] = (0, smithy_client_1.serializeFloat)(input.MaxCapacity);
      }
      return entries;
    };
    var serializeAws_querySourceIdsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`SourceId.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryStartActivityStreamRequest = (input, context) => {
      const entries = {};
      if (input.ResourceArn !== void 0 && input.ResourceArn !== null) {
        entries["ResourceArn"] = input.ResourceArn;
      }
      if (input.Mode !== void 0 && input.Mode !== null) {
        entries["Mode"] = input.Mode;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.ApplyImmediately !== void 0 && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      if (input.EngineNativeAuditFieldsIncluded !== void 0 && input.EngineNativeAuditFieldsIncluded !== null) {
        entries["EngineNativeAuditFieldsIncluded"] = input.EngineNativeAuditFieldsIncluded;
      }
      return entries;
    };
    var serializeAws_queryStartDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      return entries;
    };
    var serializeAws_queryStartDBInstanceAutomatedBackupsReplicationMessage = (input, context) => {
      const entries = {};
      if (input.SourceDBInstanceArn !== void 0 && input.SourceDBInstanceArn !== null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
      }
      if (input.BackupRetentionPeriod !== void 0 && input.BackupRetentionPeriod !== null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.PreSignedUrl !== void 0 && input.PreSignedUrl !== null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
      }
      return entries;
    };
    var serializeAws_queryStartDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      return entries;
    };
    var serializeAws_queryStartExportTaskMessage = (input, context) => {
      const entries = {};
      if (input.ExportTaskIdentifier !== void 0 && input.ExportTaskIdentifier !== null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
      }
      if (input.SourceArn !== void 0 && input.SourceArn !== null) {
        entries["SourceArn"] = input.SourceArn;
      }
      if (input.S3BucketName !== void 0 && input.S3BucketName !== null) {
        entries["S3BucketName"] = input.S3BucketName;
      }
      if (input.IamRoleArn !== void 0 && input.IamRoleArn !== null) {
        entries["IamRoleArn"] = input.IamRoleArn;
      }
      if (input.KmsKeyId !== void 0 && input.KmsKeyId !== null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.S3Prefix !== void 0 && input.S3Prefix !== null) {
        entries["S3Prefix"] = input.S3Prefix;
      }
      if (input.ExportOnly !== void 0 && input.ExportOnly !== null) {
        const memberEntries = serializeAws_queryStringList(input.ExportOnly, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ExportOnly.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryStopActivityStreamRequest = (input, context) => {
      const entries = {};
      if (input.ResourceArn !== void 0 && input.ResourceArn !== null) {
        entries["ResourceArn"] = input.ResourceArn;
      }
      if (input.ApplyImmediately !== void 0 && input.ApplyImmediately !== null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      return entries;
    };
    var serializeAws_queryStopDBClusterMessage = (input, context) => {
      const entries = {};
      if (input.DBClusterIdentifier !== void 0 && input.DBClusterIdentifier !== null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
      }
      return entries;
    };
    var serializeAws_queryStopDBInstanceAutomatedBackupsReplicationMessage = (input, context) => {
      const entries = {};
      if (input.SourceDBInstanceArn !== void 0 && input.SourceDBInstanceArn !== null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
      }
      return entries;
    };
    var serializeAws_queryStopDBInstanceMessage = (input, context) => {
      const entries = {};
      if (input.DBInstanceIdentifier !== void 0 && input.DBInstanceIdentifier !== null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
      }
      if (input.DBSnapshotIdentifier !== void 0 && input.DBSnapshotIdentifier !== null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
      }
      return entries;
    };
    var serializeAws_queryStringList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querySubnetIdentifierList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`SubnetIdentifier.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key !== void 0 && input.Key !== null) {
        entries["Key"] = input.Key;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_queryTagList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`Tag.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryUserAuthConfig = (input, context) => {
      const entries = {};
      if (input.Description !== void 0 && input.Description !== null) {
        entries["Description"] = input.Description;
      }
      if (input.UserName !== void 0 && input.UserName !== null) {
        entries["UserName"] = input.UserName;
      }
      if (input.AuthScheme !== void 0 && input.AuthScheme !== null) {
        entries["AuthScheme"] = input.AuthScheme;
      }
      if (input.SecretArn !== void 0 && input.SecretArn !== null) {
        entries["SecretArn"] = input.SecretArn;
      }
      if (input.IAMAuth !== void 0 && input.IAMAuth !== null) {
        entries["IAMAuth"] = input.IAMAuth;
      }
      return entries;
    };
    var serializeAws_queryUserAuthConfigList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryUserAuthConfig(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryVpcSecurityGroupIdList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`VpcSecurityGroupId.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAccountAttributesMessage = (output, context) => {
      const contents = {
        AccountQuotas: void 0
      };
      if (output.AccountQuotas === "") {
        contents.AccountQuotas = [];
      } else if (output["AccountQuotas"] !== void 0 && output["AccountQuotas"]["AccountQuota"] !== void 0) {
        contents.AccountQuotas = deserializeAws_queryAccountQuotaList((0, smithy_client_1.getArrayIfSingleItem)(output["AccountQuotas"]["AccountQuota"]), context);
      }
      return contents;
    };
    var deserializeAws_queryAccountQuota = (output, context) => {
      const contents = {
        AccountQuotaName: void 0,
        Used: void 0,
        Max: void 0
      };
      if (output["AccountQuotaName"] !== void 0) {
        contents.AccountQuotaName = (0, smithy_client_1.expectString)(output["AccountQuotaName"]);
      }
      if (output["Used"] !== void 0) {
        contents.Used = (0, smithy_client_1.strictParseLong)(output["Used"]);
      }
      if (output["Max"] !== void 0) {
        contents.Max = (0, smithy_client_1.strictParseLong)(output["Max"]);
      }
      return contents;
    };
    var deserializeAws_queryAccountQuotaList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryAccountQuota(entry, context);
      });
    };
    var deserializeAws_queryActivityStreamModeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryAddSourceIdentifierToSubscriptionResult = (output, context) => {
      const contents = {
        EventSubscription: void 0
      };
      if (output["EventSubscription"] !== void 0) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
      }
      return contents;
    };
    var deserializeAws_queryApplyPendingMaintenanceActionResult = (output, context) => {
      const contents = {
        ResourcePendingMaintenanceActions: void 0
      };
      if (output["ResourcePendingMaintenanceActions"] !== void 0) {
        contents.ResourcePendingMaintenanceActions = deserializeAws_queryResourcePendingMaintenanceActions(output["ResourcePendingMaintenanceActions"], context);
      }
      return contents;
    };
    var deserializeAws_queryAttributeValueList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryAuthorizationAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryAuthorizationNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryAuthorizationQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryAuthorizeDBSecurityGroupIngressResult = (output, context) => {
      const contents = {
        DBSecurityGroup: void 0
      };
      if (output["DBSecurityGroup"] !== void 0) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryAvailabilityZone = (output, context) => {
      const contents = {
        Name: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      return contents;
    };
    var deserializeAws_queryAvailabilityZoneList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryAvailabilityZone(entry, context);
      });
    };
    var deserializeAws_queryAvailabilityZones = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryAvailableProcessorFeature = (output, context) => {
      const contents = {
        Name: void 0,
        DefaultValue: void 0,
        AllowedValues: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["DefaultValue"] !== void 0) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
      }
      if (output["AllowedValues"] !== void 0) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
      }
      return contents;
    };
    var deserializeAws_queryAvailableProcessorFeatureList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryAvailableProcessorFeature(entry, context);
      });
    };
    var deserializeAws_queryBackupPolicyNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCertificate = (output, context) => {
      const contents = {
        CertificateIdentifier: void 0,
        CertificateType: void 0,
        Thumbprint: void 0,
        ValidFrom: void 0,
        ValidTill: void 0,
        CertificateArn: void 0,
        CustomerOverride: void 0,
        CustomerOverrideValidTill: void 0
      };
      if (output["CertificateIdentifier"] !== void 0) {
        contents.CertificateIdentifier = (0, smithy_client_1.expectString)(output["CertificateIdentifier"]);
      }
      if (output["CertificateType"] !== void 0) {
        contents.CertificateType = (0, smithy_client_1.expectString)(output["CertificateType"]);
      }
      if (output["Thumbprint"] !== void 0) {
        contents.Thumbprint = (0, smithy_client_1.expectString)(output["Thumbprint"]);
      }
      if (output["ValidFrom"] !== void 0) {
        contents.ValidFrom = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ValidFrom"]));
      }
      if (output["ValidTill"] !== void 0) {
        contents.ValidTill = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ValidTill"]));
      }
      if (output["CertificateArn"] !== void 0) {
        contents.CertificateArn = (0, smithy_client_1.expectString)(output["CertificateArn"]);
      }
      if (output["CustomerOverride"] !== void 0) {
        contents.CustomerOverride = (0, smithy_client_1.parseBoolean)(output["CustomerOverride"]);
      }
      if (output["CustomerOverrideValidTill"] !== void 0) {
        contents.CustomerOverrideValidTill = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CustomerOverrideValidTill"]));
      }
      return contents;
    };
    var deserializeAws_queryCertificateList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryCertificate(entry, context);
      });
    };
    var deserializeAws_queryCertificateMessage = (output, context) => {
      const contents = {
        Certificates: void 0,
        Marker: void 0
      };
      if (output.Certificates === "") {
        contents.Certificates = [];
      } else if (output["Certificates"] !== void 0 && output["Certificates"]["Certificate"] !== void 0) {
        contents.Certificates = deserializeAws_queryCertificateList((0, smithy_client_1.getArrayIfSingleItem)(output["Certificates"]["Certificate"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryCertificateNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCharacterSet = (output, context) => {
      const contents = {
        CharacterSetName: void 0,
        CharacterSetDescription: void 0
      };
      if (output["CharacterSetName"] !== void 0) {
        contents.CharacterSetName = (0, smithy_client_1.expectString)(output["CharacterSetName"]);
      }
      if (output["CharacterSetDescription"] !== void 0) {
        contents.CharacterSetDescription = (0, smithy_client_1.expectString)(output["CharacterSetDescription"]);
      }
      return contents;
    };
    var deserializeAws_queryClusterPendingModifiedValues = (output, context) => {
      const contents = {
        PendingCloudwatchLogsExports: void 0,
        DBClusterIdentifier: void 0,
        MasterUserPassword: void 0,
        IAMDatabaseAuthenticationEnabled: void 0,
        EngineVersion: void 0
      };
      if (output["PendingCloudwatchLogsExports"] !== void 0) {
        contents.PendingCloudwatchLogsExports = deserializeAws_queryPendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
      }
      if (output["DBClusterIdentifier"] !== void 0) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
      }
      if (output["MasterUserPassword"] !== void 0) {
        contents.MasterUserPassword = (0, smithy_client_1.expectString)(output["MasterUserPassword"]);
      }
      if (output["IAMDatabaseAuthenticationEnabled"] !== void 0) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      return contents;
    };
    var deserializeAws_queryConnectionPoolConfigurationInfo = (output, context) => {
      const contents = {
        MaxConnectionsPercent: void 0,
        MaxIdleConnectionsPercent: void 0,
        ConnectionBorrowTimeout: void 0,
        SessionPinningFilters: void 0,
        InitQuery: void 0
      };
      if (output["MaxConnectionsPercent"] !== void 0) {
        contents.MaxConnectionsPercent = (0, smithy_client_1.strictParseInt32)(output["MaxConnectionsPercent"]);
      }
      if (output["MaxIdleConnectionsPercent"] !== void 0) {
        contents.MaxIdleConnectionsPercent = (0, smithy_client_1.strictParseInt32)(output["MaxIdleConnectionsPercent"]);
      }
      if (output["ConnectionBorrowTimeout"] !== void 0) {
        contents.ConnectionBorrowTimeout = (0, smithy_client_1.strictParseInt32)(output["ConnectionBorrowTimeout"]);
      }
      if (output.SessionPinningFilters === "") {
        contents.SessionPinningFilters = [];
      } else if (output["SessionPinningFilters"] !== void 0 && output["SessionPinningFilters"]["member"] !== void 0) {
        contents.SessionPinningFilters = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["SessionPinningFilters"]["member"]), context);
      }
      if (output["InitQuery"] !== void 0) {
        contents.InitQuery = (0, smithy_client_1.expectString)(output["InitQuery"]);
      }
      return contents;
    };
    var deserializeAws_queryCopyDBClusterParameterGroupResult = (output, context) => {
      const contents = {
        DBClusterParameterGroup: void 0
      };
      if (output["DBClusterParameterGroup"] !== void 0) {
        contents.DBClusterParameterGroup = deserializeAws_queryDBClusterParameterGroup(output["DBClusterParameterGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCopyDBClusterSnapshotResult = (output, context) => {
      const contents = {
        DBClusterSnapshot: void 0
      };
      if (output["DBClusterSnapshot"] !== void 0) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
      }
      return contents;
    };
    var deserializeAws_queryCopyDBParameterGroupResult = (output, context) => {
      const contents = {
        DBParameterGroup: void 0
      };
      if (output["DBParameterGroup"] !== void 0) {
        contents.DBParameterGroup = deserializeAws_queryDBParameterGroup(output["DBParameterGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCopyDBSnapshotResult = (output, context) => {
      const contents = {
        DBSnapshot: void 0
      };
      if (output["DBSnapshot"] !== void 0) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
      }
      return contents;
    };
    var deserializeAws_queryCopyOptionGroupResult = (output, context) => {
      const contents = {
        OptionGroup: void 0
      };
      if (output["OptionGroup"] !== void 0) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBClusterParameterGroupResult = (output, context) => {
      const contents = {
        DBClusterParameterGroup: void 0
      };
      if (output["DBClusterParameterGroup"] !== void 0) {
        contents.DBClusterParameterGroup = deserializeAws_queryDBClusterParameterGroup(output["DBClusterParameterGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBClusterSnapshotResult = (output, context) => {
      const contents = {
        DBClusterSnapshot: void 0
      };
      if (output["DBClusterSnapshot"] !== void 0) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBInstanceReadReplicaResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBInstanceResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBParameterGroupResult = (output, context) => {
      const contents = {
        DBParameterGroup: void 0
      };
      if (output["DBParameterGroup"] !== void 0) {
        contents.DBParameterGroup = deserializeAws_queryDBParameterGroup(output["DBParameterGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBProxyEndpointResponse = (output, context) => {
      const contents = {
        DBProxyEndpoint: void 0
      };
      if (output["DBProxyEndpoint"] !== void 0) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBProxyResponse = (output, context) => {
      const contents = {
        DBProxy: void 0
      };
      if (output["DBProxy"] !== void 0) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBSecurityGroupResult = (output, context) => {
      const contents = {
        DBSecurityGroup: void 0
      };
      if (output["DBSecurityGroup"] !== void 0) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBSnapshotResult = (output, context) => {
      const contents = {
        DBSnapshot: void 0
      };
      if (output["DBSnapshot"] !== void 0) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateDBSubnetGroupResult = (output, context) => {
      const contents = {
        DBSubnetGroup: void 0
      };
      if (output["DBSubnetGroup"] !== void 0) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateEventSubscriptionResult = (output, context) => {
      const contents = {
        EventSubscription: void 0
      };
      if (output["EventSubscription"] !== void 0) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateGlobalClusterResult = (output, context) => {
      const contents = {
        GlobalCluster: void 0
      };
      if (output["GlobalCluster"] !== void 0) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateOptionGroupResult = (output, context) => {
      const contents = {
        OptionGroup: void 0
      };
      if (output["OptionGroup"] !== void 0) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryCustomAvailabilityZoneNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCustomDBEngineVersionAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCustomDBEngineVersionNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCustomDBEngineVersionQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBCluster = (output, context) => {
      const contents = {
        AllocatedStorage: void 0,
        AvailabilityZones: void 0,
        BackupRetentionPeriod: void 0,
        CharacterSetName: void 0,
        DatabaseName: void 0,
        DBClusterIdentifier: void 0,
        DBClusterParameterGroup: void 0,
        DBSubnetGroup: void 0,
        Status: void 0,
        AutomaticRestartTime: void 0,
        PercentProgress: void 0,
        EarliestRestorableTime: void 0,
        Endpoint: void 0,
        ReaderEndpoint: void 0,
        CustomEndpoints: void 0,
        MultiAZ: void 0,
        Engine: void 0,
        EngineVersion: void 0,
        LatestRestorableTime: void 0,
        Port: void 0,
        MasterUsername: void 0,
        DBClusterOptionGroupMemberships: void 0,
        PreferredBackupWindow: void 0,
        PreferredMaintenanceWindow: void 0,
        ReplicationSourceIdentifier: void 0,
        ReadReplicaIdentifiers: void 0,
        DBClusterMembers: void 0,
        VpcSecurityGroups: void 0,
        HostedZoneId: void 0,
        StorageEncrypted: void 0,
        KmsKeyId: void 0,
        DbClusterResourceId: void 0,
        DBClusterArn: void 0,
        AssociatedRoles: void 0,
        IAMDatabaseAuthenticationEnabled: void 0,
        CloneGroupId: void 0,
        ClusterCreateTime: void 0,
        EarliestBacktrackTime: void 0,
        BacktrackWindow: void 0,
        BacktrackConsumedChangeRecords: void 0,
        EnabledCloudwatchLogsExports: void 0,
        Capacity: void 0,
        EngineMode: void 0,
        ScalingConfigurationInfo: void 0,
        DeletionProtection: void 0,
        HttpEndpointEnabled: void 0,
        ActivityStreamMode: void 0,
        ActivityStreamStatus: void 0,
        ActivityStreamKmsKeyId: void 0,
        ActivityStreamKinesisStreamName: void 0,
        CopyTagsToSnapshot: void 0,
        CrossAccountClone: void 0,
        DomainMemberships: void 0,
        TagList: void 0,
        GlobalWriteForwardingStatus: void 0,
        GlobalWriteForwardingRequested: void 0,
        PendingModifiedValues: void 0,
        DBClusterInstanceClass: void 0,
        StorageType: void 0,
        Iops: void 0,
        PubliclyAccessible: void 0,
        AutoMinorVersionUpgrade: void 0,
        MonitoringInterval: void 0,
        MonitoringRoleArn: void 0,
        PerformanceInsightsEnabled: void 0,
        PerformanceInsightsKMSKeyId: void 0,
        PerformanceInsightsRetentionPeriod: void 0,
        ServerlessV2ScalingConfiguration: void 0
      };
      if (output["AllocatedStorage"] !== void 0) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
      }
      if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
      } else if (output["AvailabilityZones"] !== void 0 && output["AvailabilityZones"]["AvailabilityZone"] !== void 0) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZones((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["AvailabilityZone"]), context);
      }
      if (output["BackupRetentionPeriod"] !== void 0) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
      }
      if (output["CharacterSetName"] !== void 0) {
        contents.CharacterSetName = (0, smithy_client_1.expectString)(output["CharacterSetName"]);
      }
      if (output["DatabaseName"] !== void 0) {
        contents.DatabaseName = (0, smithy_client_1.expectString)(output["DatabaseName"]);
      }
      if (output["DBClusterIdentifier"] !== void 0) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
      }
      if (output["DBClusterParameterGroup"] !== void 0) {
        contents.DBClusterParameterGroup = (0, smithy_client_1.expectString)(output["DBClusterParameterGroup"]);
      }
      if (output["DBSubnetGroup"] !== void 0) {
        contents.DBSubnetGroup = (0, smithy_client_1.expectString)(output["DBSubnetGroup"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["AutomaticRestartTime"] !== void 0) {
        contents.AutomaticRestartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["AutomaticRestartTime"]));
      }
      if (output["PercentProgress"] !== void 0) {
        contents.PercentProgress = (0, smithy_client_1.expectString)(output["PercentProgress"]);
      }
      if (output["EarliestRestorableTime"] !== void 0) {
        contents.EarliestRestorableTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EarliestRestorableTime"]));
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
      }
      if (output["ReaderEndpoint"] !== void 0) {
        contents.ReaderEndpoint = (0, smithy_client_1.expectString)(output["ReaderEndpoint"]);
      }
      if (output.CustomEndpoints === "") {
        contents.CustomEndpoints = [];
      } else if (output["CustomEndpoints"] !== void 0 && output["CustomEndpoints"]["member"] !== void 0) {
        contents.CustomEndpoints = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["CustomEndpoints"]["member"]), context);
      }
      if (output["MultiAZ"] !== void 0) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["LatestRestorableTime"] !== void 0) {
        contents.LatestRestorableTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LatestRestorableTime"]));
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["MasterUsername"] !== void 0) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
      }
      if (output.DBClusterOptionGroupMemberships === "") {
        contents.DBClusterOptionGroupMemberships = [];
      } else if (output["DBClusterOptionGroupMemberships"] !== void 0 && output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"] !== void 0) {
        contents.DBClusterOptionGroupMemberships = deserializeAws_queryDBClusterOptionGroupMemberships((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"]), context);
      }
      if (output["PreferredBackupWindow"] !== void 0) {
        contents.PreferredBackupWindow = (0, smithy_client_1.expectString)(output["PreferredBackupWindow"]);
      }
      if (output["PreferredMaintenanceWindow"] !== void 0) {
        contents.PreferredMaintenanceWindow = (0, smithy_client_1.expectString)(output["PreferredMaintenanceWindow"]);
      }
      if (output["ReplicationSourceIdentifier"] !== void 0) {
        contents.ReplicationSourceIdentifier = (0, smithy_client_1.expectString)(output["ReplicationSourceIdentifier"]);
      }
      if (output.ReadReplicaIdentifiers === "") {
        contents.ReadReplicaIdentifiers = [];
      } else if (output["ReadReplicaIdentifiers"] !== void 0 && output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"] !== void 0) {
        contents.ReadReplicaIdentifiers = deserializeAws_queryReadReplicaIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"]), context);
      }
      if (output.DBClusterMembers === "") {
        contents.DBClusterMembers = [];
      } else if (output["DBClusterMembers"] !== void 0 && output["DBClusterMembers"]["DBClusterMember"] !== void 0) {
        contents.DBClusterMembers = deserializeAws_queryDBClusterMemberList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterMembers"]["DBClusterMember"]), context);
      }
      if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
      } else if (output["VpcSecurityGroups"] !== void 0 && output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== void 0) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
      }
      if (output["HostedZoneId"] !== void 0) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
      }
      if (output["StorageEncrypted"] !== void 0) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["DbClusterResourceId"] !== void 0) {
        contents.DbClusterResourceId = (0, smithy_client_1.expectString)(output["DbClusterResourceId"]);
      }
      if (output["DBClusterArn"] !== void 0) {
        contents.DBClusterArn = (0, smithy_client_1.expectString)(output["DBClusterArn"]);
      }
      if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
      } else if (output["AssociatedRoles"] !== void 0 && output["AssociatedRoles"]["DBClusterRole"] !== void 0) {
        contents.AssociatedRoles = deserializeAws_queryDBClusterRoles((0, smithy_client_1.getArrayIfSingleItem)(output["AssociatedRoles"]["DBClusterRole"]), context);
      }
      if (output["IAMDatabaseAuthenticationEnabled"] !== void 0) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
      }
      if (output["CloneGroupId"] !== void 0) {
        contents.CloneGroupId = (0, smithy_client_1.expectString)(output["CloneGroupId"]);
      }
      if (output["ClusterCreateTime"] !== void 0) {
        contents.ClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ClusterCreateTime"]));
      }
      if (output["EarliestBacktrackTime"] !== void 0) {
        contents.EarliestBacktrackTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EarliestBacktrackTime"]));
      }
      if (output["BacktrackWindow"] !== void 0) {
        contents.BacktrackWindow = (0, smithy_client_1.strictParseLong)(output["BacktrackWindow"]);
      }
      if (output["BacktrackConsumedChangeRecords"] !== void 0) {
        contents.BacktrackConsumedChangeRecords = (0, smithy_client_1.strictParseLong)(output["BacktrackConsumedChangeRecords"]);
      }
      if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
      } else if (output["EnabledCloudwatchLogsExports"] !== void 0 && output["EnabledCloudwatchLogsExports"]["member"] !== void 0) {
        contents.EnabledCloudwatchLogsExports = deserializeAws_queryLogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["EnabledCloudwatchLogsExports"]["member"]), context);
      }
      if (output["Capacity"] !== void 0) {
        contents.Capacity = (0, smithy_client_1.strictParseInt32)(output["Capacity"]);
      }
      if (output["EngineMode"] !== void 0) {
        contents.EngineMode = (0, smithy_client_1.expectString)(output["EngineMode"]);
      }
      if (output["ScalingConfigurationInfo"] !== void 0) {
        contents.ScalingConfigurationInfo = deserializeAws_queryScalingConfigurationInfo(output["ScalingConfigurationInfo"], context);
      }
      if (output["DeletionProtection"] !== void 0) {
        contents.DeletionProtection = (0, smithy_client_1.parseBoolean)(output["DeletionProtection"]);
      }
      if (output["HttpEndpointEnabled"] !== void 0) {
        contents.HttpEndpointEnabled = (0, smithy_client_1.parseBoolean)(output["HttpEndpointEnabled"]);
      }
      if (output["ActivityStreamMode"] !== void 0) {
        contents.ActivityStreamMode = (0, smithy_client_1.expectString)(output["ActivityStreamMode"]);
      }
      if (output["ActivityStreamStatus"] !== void 0) {
        contents.ActivityStreamStatus = (0, smithy_client_1.expectString)(output["ActivityStreamStatus"]);
      }
      if (output["ActivityStreamKmsKeyId"] !== void 0) {
        contents.ActivityStreamKmsKeyId = (0, smithy_client_1.expectString)(output["ActivityStreamKmsKeyId"]);
      }
      if (output["ActivityStreamKinesisStreamName"] !== void 0) {
        contents.ActivityStreamKinesisStreamName = (0, smithy_client_1.expectString)(output["ActivityStreamKinesisStreamName"]);
      }
      if (output["CopyTagsToSnapshot"] !== void 0) {
        contents.CopyTagsToSnapshot = (0, smithy_client_1.parseBoolean)(output["CopyTagsToSnapshot"]);
      }
      if (output["CrossAccountClone"] !== void 0) {
        contents.CrossAccountClone = (0, smithy_client_1.parseBoolean)(output["CrossAccountClone"]);
      }
      if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
      } else if (output["DomainMemberships"] !== void 0 && output["DomainMemberships"]["DomainMembership"] !== void 0) {
        contents.DomainMemberships = deserializeAws_queryDomainMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DomainMemberships"]["DomainMembership"]), context);
      }
      if (output.TagList === "") {
        contents.TagList = [];
      } else if (output["TagList"] !== void 0 && output["TagList"]["Tag"] !== void 0) {
        contents.TagList = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
      }
      if (output["GlobalWriteForwardingStatus"] !== void 0) {
        contents.GlobalWriteForwardingStatus = (0, smithy_client_1.expectString)(output["GlobalWriteForwardingStatus"]);
      }
      if (output["GlobalWriteForwardingRequested"] !== void 0) {
        contents.GlobalWriteForwardingRequested = (0, smithy_client_1.parseBoolean)(output["GlobalWriteForwardingRequested"]);
      }
      if (output["PendingModifiedValues"] !== void 0) {
        contents.PendingModifiedValues = deserializeAws_queryClusterPendingModifiedValues(output["PendingModifiedValues"], context);
      }
      if (output["DBClusterInstanceClass"] !== void 0) {
        contents.DBClusterInstanceClass = (0, smithy_client_1.expectString)(output["DBClusterInstanceClass"]);
      }
      if (output["StorageType"] !== void 0) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
      }
      if (output["Iops"] !== void 0) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
      }
      if (output["PubliclyAccessible"] !== void 0) {
        contents.PubliclyAccessible = (0, smithy_client_1.parseBoolean)(output["PubliclyAccessible"]);
      }
      if (output["AutoMinorVersionUpgrade"] !== void 0) {
        contents.AutoMinorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoMinorVersionUpgrade"]);
      }
      if (output["MonitoringInterval"] !== void 0) {
        contents.MonitoringInterval = (0, smithy_client_1.strictParseInt32)(output["MonitoringInterval"]);
      }
      if (output["MonitoringRoleArn"] !== void 0) {
        contents.MonitoringRoleArn = (0, smithy_client_1.expectString)(output["MonitoringRoleArn"]);
      }
      if (output["PerformanceInsightsEnabled"] !== void 0) {
        contents.PerformanceInsightsEnabled = (0, smithy_client_1.parseBoolean)(output["PerformanceInsightsEnabled"]);
      }
      if (output["PerformanceInsightsKMSKeyId"] !== void 0) {
        contents.PerformanceInsightsKMSKeyId = (0, smithy_client_1.expectString)(output["PerformanceInsightsKMSKeyId"]);
      }
      if (output["PerformanceInsightsRetentionPeriod"] !== void 0) {
        contents.PerformanceInsightsRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["PerformanceInsightsRetentionPeriod"]);
      }
      if (output["ServerlessV2ScalingConfiguration"] !== void 0) {
        contents.ServerlessV2ScalingConfiguration = deserializeAws_queryServerlessV2ScalingConfigurationInfo(output["ServerlessV2ScalingConfiguration"], context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterBacktrack = (output, context) => {
      const contents = {
        DBClusterIdentifier: void 0,
        BacktrackIdentifier: void 0,
        BacktrackTo: void 0,
        BacktrackedFrom: void 0,
        BacktrackRequestCreationTime: void 0,
        Status: void 0
      };
      if (output["DBClusterIdentifier"] !== void 0) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
      }
      if (output["BacktrackIdentifier"] !== void 0) {
        contents.BacktrackIdentifier = (0, smithy_client_1.expectString)(output["BacktrackIdentifier"]);
      }
      if (output["BacktrackTo"] !== void 0) {
        contents.BacktrackTo = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["BacktrackTo"]));
      }
      if (output["BacktrackedFrom"] !== void 0) {
        contents.BacktrackedFrom = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["BacktrackedFrom"]));
      }
      if (output["BacktrackRequestCreationTime"] !== void 0) {
        contents.BacktrackRequestCreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["BacktrackRequestCreationTime"]));
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterBacktrackList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterBacktrack(entry, context);
      });
    };
    var deserializeAws_queryDBClusterBacktrackMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBClusterBacktracks: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBClusterBacktracks === "") {
        contents.DBClusterBacktracks = [];
      } else if (output["DBClusterBacktracks"] !== void 0 && output["DBClusterBacktracks"]["DBClusterBacktrack"] !== void 0) {
        contents.DBClusterBacktracks = deserializeAws_queryDBClusterBacktrackList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterBacktracks"]["DBClusterBacktrack"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterBacktrackNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterCapacityInfo = (output, context) => {
      const contents = {
        DBClusterIdentifier: void 0,
        PendingCapacity: void 0,
        CurrentCapacity: void 0,
        SecondsBeforeTimeout: void 0,
        TimeoutAction: void 0
      };
      if (output["DBClusterIdentifier"] !== void 0) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
      }
      if (output["PendingCapacity"] !== void 0) {
        contents.PendingCapacity = (0, smithy_client_1.strictParseInt32)(output["PendingCapacity"]);
      }
      if (output["CurrentCapacity"] !== void 0) {
        contents.CurrentCapacity = (0, smithy_client_1.strictParseInt32)(output["CurrentCapacity"]);
      }
      if (output["SecondsBeforeTimeout"] !== void 0) {
        contents.SecondsBeforeTimeout = (0, smithy_client_1.strictParseInt32)(output["SecondsBeforeTimeout"]);
      }
      if (output["TimeoutAction"] !== void 0) {
        contents.TimeoutAction = (0, smithy_client_1.expectString)(output["TimeoutAction"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterEndpoint = (output, context) => {
      const contents = {
        DBClusterEndpointIdentifier: void 0,
        DBClusterIdentifier: void 0,
        DBClusterEndpointResourceIdentifier: void 0,
        Endpoint: void 0,
        Status: void 0,
        EndpointType: void 0,
        CustomEndpointType: void 0,
        StaticMembers: void 0,
        ExcludedMembers: void 0,
        DBClusterEndpointArn: void 0
      };
      if (output["DBClusterEndpointIdentifier"] !== void 0) {
        contents.DBClusterEndpointIdentifier = (0, smithy_client_1.expectString)(output["DBClusterEndpointIdentifier"]);
      }
      if (output["DBClusterIdentifier"] !== void 0) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
      }
      if (output["DBClusterEndpointResourceIdentifier"] !== void 0) {
        contents.DBClusterEndpointResourceIdentifier = (0, smithy_client_1.expectString)(output["DBClusterEndpointResourceIdentifier"]);
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["EndpointType"] !== void 0) {
        contents.EndpointType = (0, smithy_client_1.expectString)(output["EndpointType"]);
      }
      if (output["CustomEndpointType"] !== void 0) {
        contents.CustomEndpointType = (0, smithy_client_1.expectString)(output["CustomEndpointType"]);
      }
      if (output.StaticMembers === "") {
        contents.StaticMembers = [];
      } else if (output["StaticMembers"] !== void 0 && output["StaticMembers"]["member"] !== void 0) {
        contents.StaticMembers = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["StaticMembers"]["member"]), context);
      }
      if (output.ExcludedMembers === "") {
        contents.ExcludedMembers = [];
      } else if (output["ExcludedMembers"] !== void 0 && output["ExcludedMembers"]["member"] !== void 0) {
        contents.ExcludedMembers = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["ExcludedMembers"]["member"]), context);
      }
      if (output["DBClusterEndpointArn"] !== void 0) {
        contents.DBClusterEndpointArn = (0, smithy_client_1.expectString)(output["DBClusterEndpointArn"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterEndpointAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterEndpointList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterEndpoint(entry, context);
      });
    };
    var deserializeAws_queryDBClusterEndpointMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBClusterEndpoints: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBClusterEndpoints === "") {
        contents.DBClusterEndpoints = [];
      } else if (output["DBClusterEndpoints"] !== void 0 && output["DBClusterEndpoints"]["DBClusterEndpointList"] !== void 0) {
        contents.DBClusterEndpoints = deserializeAws_queryDBClusterEndpointList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterEndpoints"]["DBClusterEndpointList"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterEndpointNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterEndpointQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBCluster(entry, context);
      });
    };
    var deserializeAws_queryDBClusterMember = (output, context) => {
      const contents = {
        DBInstanceIdentifier: void 0,
        IsClusterWriter: void 0,
        DBClusterParameterGroupStatus: void 0,
        PromotionTier: void 0
      };
      if (output["DBInstanceIdentifier"] !== void 0) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
      }
      if (output["IsClusterWriter"] !== void 0) {
        contents.IsClusterWriter = (0, smithy_client_1.parseBoolean)(output["IsClusterWriter"]);
      }
      if (output["DBClusterParameterGroupStatus"] !== void 0) {
        contents.DBClusterParameterGroupStatus = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupStatus"]);
      }
      if (output["PromotionTier"] !== void 0) {
        contents.PromotionTier = (0, smithy_client_1.strictParseInt32)(output["PromotionTier"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterMemberList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterMember(entry, context);
      });
    };
    var deserializeAws_queryDBClusterMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBClusters: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBClusters === "") {
        contents.DBClusters = [];
      } else if (output["DBClusters"] !== void 0 && output["DBClusters"]["DBCluster"] !== void 0) {
        contents.DBClusters = deserializeAws_queryDBClusterList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusters"]["DBCluster"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterOptionGroupMemberships = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterOptionGroupStatus(entry, context);
      });
    };
    var deserializeAws_queryDBClusterOptionGroupStatus = (output, context) => {
      const contents = {
        DBClusterOptionGroupName: void 0,
        Status: void 0
      };
      if (output["DBClusterOptionGroupName"] !== void 0) {
        contents.DBClusterOptionGroupName = (0, smithy_client_1.expectString)(output["DBClusterOptionGroupName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterParameterGroup = (output, context) => {
      const contents = {
        DBClusterParameterGroupName: void 0,
        DBParameterGroupFamily: void 0,
        Description: void 0,
        DBClusterParameterGroupArn: void 0
      };
      if (output["DBClusterParameterGroupName"] !== void 0) {
        contents.DBClusterParameterGroupName = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupName"]);
      }
      if (output["DBParameterGroupFamily"] !== void 0) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["DBClusterParameterGroupArn"] !== void 0) {
        contents.DBClusterParameterGroupArn = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupArn"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterParameterGroupDetails = (output, context) => {
      const contents = {
        Parameters: void 0,
        Marker: void 0
      };
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["Parameter"] !== void 0) {
        contents.Parameters = deserializeAws_queryParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterParameterGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterParameterGroup(entry, context);
      });
    };
    var deserializeAws_queryDBClusterParameterGroupNameMessage = (output, context) => {
      const contents = {
        DBClusterParameterGroupName: void 0
      };
      if (output["DBClusterParameterGroupName"] !== void 0) {
        contents.DBClusterParameterGroupName = (0, smithy_client_1.expectString)(output["DBClusterParameterGroupName"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterParameterGroupNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterParameterGroupsMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBClusterParameterGroups: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBClusterParameterGroups === "") {
        contents.DBClusterParameterGroups = [];
      } else if (output["DBClusterParameterGroups"] !== void 0 && output["DBClusterParameterGroups"]["DBClusterParameterGroup"] !== void 0) {
        contents.DBClusterParameterGroups = deserializeAws_queryDBClusterParameterGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterParameterGroups"]["DBClusterParameterGroup"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterRole = (output, context) => {
      const contents = {
        RoleArn: void 0,
        Status: void 0,
        FeatureName: void 0
      };
      if (output["RoleArn"] !== void 0) {
        contents.RoleArn = (0, smithy_client_1.expectString)(output["RoleArn"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["FeatureName"] !== void 0) {
        contents.FeatureName = (0, smithy_client_1.expectString)(output["FeatureName"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterRoleAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterRoleNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterRoleQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterRoles = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterRole(entry, context);
      });
    };
    var deserializeAws_queryDBClusterSnapshot = (output, context) => {
      const contents = {
        AvailabilityZones: void 0,
        DBClusterSnapshotIdentifier: void 0,
        DBClusterIdentifier: void 0,
        SnapshotCreateTime: void 0,
        Engine: void 0,
        EngineMode: void 0,
        AllocatedStorage: void 0,
        Status: void 0,
        Port: void 0,
        VpcId: void 0,
        ClusterCreateTime: void 0,
        MasterUsername: void 0,
        EngineVersion: void 0,
        LicenseModel: void 0,
        SnapshotType: void 0,
        PercentProgress: void 0,
        StorageEncrypted: void 0,
        KmsKeyId: void 0,
        DBClusterSnapshotArn: void 0,
        SourceDBClusterSnapshotArn: void 0,
        IAMDatabaseAuthenticationEnabled: void 0,
        TagList: void 0
      };
      if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
      } else if (output["AvailabilityZones"] !== void 0 && output["AvailabilityZones"]["AvailabilityZone"] !== void 0) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZones((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["AvailabilityZone"]), context);
      }
      if (output["DBClusterSnapshotIdentifier"] !== void 0) {
        contents.DBClusterSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBClusterSnapshotIdentifier"]);
      }
      if (output["DBClusterIdentifier"] !== void 0) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
      }
      if (output["SnapshotCreateTime"] !== void 0) {
        contents.SnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SnapshotCreateTime"]));
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineMode"] !== void 0) {
        contents.EngineMode = (0, smithy_client_1.expectString)(output["EngineMode"]);
      }
      if (output["AllocatedStorage"] !== void 0) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output["ClusterCreateTime"] !== void 0) {
        contents.ClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ClusterCreateTime"]));
      }
      if (output["MasterUsername"] !== void 0) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["LicenseModel"] !== void 0) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
      }
      if (output["SnapshotType"] !== void 0) {
        contents.SnapshotType = (0, smithy_client_1.expectString)(output["SnapshotType"]);
      }
      if (output["PercentProgress"] !== void 0) {
        contents.PercentProgress = (0, smithy_client_1.strictParseInt32)(output["PercentProgress"]);
      }
      if (output["StorageEncrypted"] !== void 0) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["DBClusterSnapshotArn"] !== void 0) {
        contents.DBClusterSnapshotArn = (0, smithy_client_1.expectString)(output["DBClusterSnapshotArn"]);
      }
      if (output["SourceDBClusterSnapshotArn"] !== void 0) {
        contents.SourceDBClusterSnapshotArn = (0, smithy_client_1.expectString)(output["SourceDBClusterSnapshotArn"]);
      }
      if (output["IAMDatabaseAuthenticationEnabled"] !== void 0) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
      }
      if (output.TagList === "") {
        contents.TagList = [];
      } else if (output["TagList"] !== void 0 && output["TagList"]["Tag"] !== void 0) {
        contents.TagList = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterSnapshotAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterSnapshotAttribute = (output, context) => {
      const contents = {
        AttributeName: void 0,
        AttributeValues: void 0
      };
      if (output["AttributeName"] !== void 0) {
        contents.AttributeName = (0, smithy_client_1.expectString)(output["AttributeName"]);
      }
      if (output.AttributeValues === "") {
        contents.AttributeValues = [];
      } else if (output["AttributeValues"] !== void 0 && output["AttributeValues"]["AttributeValue"] !== void 0) {
        contents.AttributeValues = deserializeAws_queryAttributeValueList((0, smithy_client_1.getArrayIfSingleItem)(output["AttributeValues"]["AttributeValue"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterSnapshotAttributeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterSnapshotAttribute(entry, context);
      });
    };
    var deserializeAws_queryDBClusterSnapshotAttributesResult = (output, context) => {
      const contents = {
        DBClusterSnapshotIdentifier: void 0,
        DBClusterSnapshotAttributes: void 0
      };
      if (output["DBClusterSnapshotIdentifier"] !== void 0) {
        contents.DBClusterSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBClusterSnapshotIdentifier"]);
      }
      if (output.DBClusterSnapshotAttributes === "") {
        contents.DBClusterSnapshotAttributes = [];
      } else if (output["DBClusterSnapshotAttributes"] !== void 0 && output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"] !== void 0) {
        contents.DBClusterSnapshotAttributes = deserializeAws_queryDBClusterSnapshotAttributeList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterSnapshotList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBClusterSnapshot(entry, context);
      });
    };
    var deserializeAws_queryDBClusterSnapshotMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBClusterSnapshots: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBClusterSnapshots === "") {
        contents.DBClusterSnapshots = [];
      } else if (output["DBClusterSnapshots"] !== void 0 && output["DBClusterSnapshots"]["DBClusterSnapshot"] !== void 0) {
        contents.DBClusterSnapshots = deserializeAws_queryDBClusterSnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["DBClusterSnapshots"]["DBClusterSnapshot"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBClusterSnapshotNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBEngineVersion = (output, context) => {
      const contents = {
        Engine: void 0,
        EngineVersion: void 0,
        DBParameterGroupFamily: void 0,
        DBEngineDescription: void 0,
        DBEngineVersionDescription: void 0,
        DefaultCharacterSet: void 0,
        SupportedCharacterSets: void 0,
        SupportedNcharCharacterSets: void 0,
        ValidUpgradeTarget: void 0,
        SupportedTimezones: void 0,
        ExportableLogTypes: void 0,
        SupportsLogExportsToCloudwatchLogs: void 0,
        SupportsReadReplica: void 0,
        SupportedEngineModes: void 0,
        SupportedFeatureNames: void 0,
        Status: void 0,
        SupportsParallelQuery: void 0,
        SupportsGlobalDatabases: void 0,
        MajorEngineVersion: void 0,
        DatabaseInstallationFilesS3BucketName: void 0,
        DatabaseInstallationFilesS3Prefix: void 0,
        DBEngineVersionArn: void 0,
        KMSKeyId: void 0,
        CreateTime: void 0,
        TagList: void 0,
        SupportsBabelfish: void 0
      };
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["DBParameterGroupFamily"] !== void 0) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
      }
      if (output["DBEngineDescription"] !== void 0) {
        contents.DBEngineDescription = (0, smithy_client_1.expectString)(output["DBEngineDescription"]);
      }
      if (output["DBEngineVersionDescription"] !== void 0) {
        contents.DBEngineVersionDescription = (0, smithy_client_1.expectString)(output["DBEngineVersionDescription"]);
      }
      if (output["DefaultCharacterSet"] !== void 0) {
        contents.DefaultCharacterSet = deserializeAws_queryCharacterSet(output["DefaultCharacterSet"], context);
      }
      if (output.SupportedCharacterSets === "") {
        contents.SupportedCharacterSets = [];
      } else if (output["SupportedCharacterSets"] !== void 0 && output["SupportedCharacterSets"]["CharacterSet"] !== void 0) {
        contents.SupportedCharacterSets = deserializeAws_querySupportedCharacterSetsList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedCharacterSets"]["CharacterSet"]), context);
      }
      if (output.SupportedNcharCharacterSets === "") {
        contents.SupportedNcharCharacterSets = [];
      } else if (output["SupportedNcharCharacterSets"] !== void 0 && output["SupportedNcharCharacterSets"]["CharacterSet"] !== void 0) {
        contents.SupportedNcharCharacterSets = deserializeAws_querySupportedCharacterSetsList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNcharCharacterSets"]["CharacterSet"]), context);
      }
      if (output.ValidUpgradeTarget === "") {
        contents.ValidUpgradeTarget = [];
      } else if (output["ValidUpgradeTarget"] !== void 0 && output["ValidUpgradeTarget"]["UpgradeTarget"] !== void 0) {
        contents.ValidUpgradeTarget = deserializeAws_queryValidUpgradeTargetList((0, smithy_client_1.getArrayIfSingleItem)(output["ValidUpgradeTarget"]["UpgradeTarget"]), context);
      }
      if (output.SupportedTimezones === "") {
        contents.SupportedTimezones = [];
      } else if (output["SupportedTimezones"] !== void 0 && output["SupportedTimezones"]["Timezone"] !== void 0) {
        contents.SupportedTimezones = deserializeAws_querySupportedTimezonesList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedTimezones"]["Timezone"]), context);
      }
      if (output.ExportableLogTypes === "") {
        contents.ExportableLogTypes = [];
      } else if (output["ExportableLogTypes"] !== void 0 && output["ExportableLogTypes"]["member"] !== void 0) {
        contents.ExportableLogTypes = deserializeAws_queryLogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["ExportableLogTypes"]["member"]), context);
      }
      if (output["SupportsLogExportsToCloudwatchLogs"] !== void 0) {
        contents.SupportsLogExportsToCloudwatchLogs = (0, smithy_client_1.parseBoolean)(output["SupportsLogExportsToCloudwatchLogs"]);
      }
      if (output["SupportsReadReplica"] !== void 0) {
        contents.SupportsReadReplica = (0, smithy_client_1.parseBoolean)(output["SupportsReadReplica"]);
      }
      if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
      } else if (output["SupportedEngineModes"] !== void 0 && output["SupportedEngineModes"]["member"] !== void 0) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
      }
      if (output.SupportedFeatureNames === "") {
        contents.SupportedFeatureNames = [];
      } else if (output["SupportedFeatureNames"] !== void 0 && output["SupportedFeatureNames"]["member"] !== void 0) {
        contents.SupportedFeatureNames = deserializeAws_queryFeatureNameList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedFeatureNames"]["member"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["SupportsParallelQuery"] !== void 0) {
        contents.SupportsParallelQuery = (0, smithy_client_1.parseBoolean)(output["SupportsParallelQuery"]);
      }
      if (output["SupportsGlobalDatabases"] !== void 0) {
        contents.SupportsGlobalDatabases = (0, smithy_client_1.parseBoolean)(output["SupportsGlobalDatabases"]);
      }
      if (output["MajorEngineVersion"] !== void 0) {
        contents.MajorEngineVersion = (0, smithy_client_1.expectString)(output["MajorEngineVersion"]);
      }
      if (output["DatabaseInstallationFilesS3BucketName"] !== void 0) {
        contents.DatabaseInstallationFilesS3BucketName = (0, smithy_client_1.expectString)(output["DatabaseInstallationFilesS3BucketName"]);
      }
      if (output["DatabaseInstallationFilesS3Prefix"] !== void 0) {
        contents.DatabaseInstallationFilesS3Prefix = (0, smithy_client_1.expectString)(output["DatabaseInstallationFilesS3Prefix"]);
      }
      if (output["DBEngineVersionArn"] !== void 0) {
        contents.DBEngineVersionArn = (0, smithy_client_1.expectString)(output["DBEngineVersionArn"]);
      }
      if (output["KMSKeyId"] !== void 0) {
        contents.KMSKeyId = (0, smithy_client_1.expectString)(output["KMSKeyId"]);
      }
      if (output["CreateTime"] !== void 0) {
        contents.CreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreateTime"]));
      }
      if (output.TagList === "") {
        contents.TagList = [];
      } else if (output["TagList"] !== void 0 && output["TagList"]["Tag"] !== void 0) {
        contents.TagList = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
      }
      if (output["SupportsBabelfish"] !== void 0) {
        contents.SupportsBabelfish = (0, smithy_client_1.parseBoolean)(output["SupportsBabelfish"]);
      }
      return contents;
    };
    var deserializeAws_queryDBEngineVersionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBEngineVersion(entry, context);
      });
    };
    var deserializeAws_queryDBEngineVersionMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBEngineVersions: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBEngineVersions === "") {
        contents.DBEngineVersions = [];
      } else if (output["DBEngineVersions"] !== void 0 && output["DBEngineVersions"]["DBEngineVersion"] !== void 0) {
        contents.DBEngineVersions = deserializeAws_queryDBEngineVersionList((0, smithy_client_1.getArrayIfSingleItem)(output["DBEngineVersions"]["DBEngineVersion"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBInstance = (output, context) => {
      const contents = {
        DBInstanceIdentifier: void 0,
        DBInstanceClass: void 0,
        Engine: void 0,
        DBInstanceStatus: void 0,
        AutomaticRestartTime: void 0,
        MasterUsername: void 0,
        DBName: void 0,
        Endpoint: void 0,
        AllocatedStorage: void 0,
        InstanceCreateTime: void 0,
        PreferredBackupWindow: void 0,
        BackupRetentionPeriod: void 0,
        DBSecurityGroups: void 0,
        VpcSecurityGroups: void 0,
        DBParameterGroups: void 0,
        AvailabilityZone: void 0,
        DBSubnetGroup: void 0,
        PreferredMaintenanceWindow: void 0,
        PendingModifiedValues: void 0,
        LatestRestorableTime: void 0,
        MultiAZ: void 0,
        EngineVersion: void 0,
        AutoMinorVersionUpgrade: void 0,
        ReadReplicaSourceDBInstanceIdentifier: void 0,
        ReadReplicaDBInstanceIdentifiers: void 0,
        ReadReplicaDBClusterIdentifiers: void 0,
        ReplicaMode: void 0,
        LicenseModel: void 0,
        Iops: void 0,
        OptionGroupMemberships: void 0,
        CharacterSetName: void 0,
        NcharCharacterSetName: void 0,
        SecondaryAvailabilityZone: void 0,
        PubliclyAccessible: void 0,
        StatusInfos: void 0,
        StorageType: void 0,
        TdeCredentialArn: void 0,
        DbInstancePort: void 0,
        DBClusterIdentifier: void 0,
        StorageEncrypted: void 0,
        KmsKeyId: void 0,
        DbiResourceId: void 0,
        CACertificateIdentifier: void 0,
        DomainMemberships: void 0,
        CopyTagsToSnapshot: void 0,
        MonitoringInterval: void 0,
        EnhancedMonitoringResourceArn: void 0,
        MonitoringRoleArn: void 0,
        PromotionTier: void 0,
        DBInstanceArn: void 0,
        Timezone: void 0,
        IAMDatabaseAuthenticationEnabled: void 0,
        PerformanceInsightsEnabled: void 0,
        PerformanceInsightsKMSKeyId: void 0,
        PerformanceInsightsRetentionPeriod: void 0,
        EnabledCloudwatchLogsExports: void 0,
        ProcessorFeatures: void 0,
        DeletionProtection: void 0,
        AssociatedRoles: void 0,
        ListenerEndpoint: void 0,
        MaxAllocatedStorage: void 0,
        TagList: void 0,
        DBInstanceAutomatedBackupsReplications: void 0,
        CustomerOwnedIpEnabled: void 0,
        AwsBackupRecoveryPointArn: void 0,
        ActivityStreamStatus: void 0,
        ActivityStreamKmsKeyId: void 0,
        ActivityStreamKinesisStreamName: void 0,
        ActivityStreamMode: void 0,
        ActivityStreamEngineNativeAuditFieldsIncluded: void 0,
        AutomationMode: void 0,
        ResumeFullAutomationModeTime: void 0,
        CustomIamInstanceProfile: void 0,
        BackupTarget: void 0,
        NetworkType: void 0
      };
      if (output["DBInstanceIdentifier"] !== void 0) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
      }
      if (output["DBInstanceClass"] !== void 0) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["DBInstanceStatus"] !== void 0) {
        contents.DBInstanceStatus = (0, smithy_client_1.expectString)(output["DBInstanceStatus"]);
      }
      if (output["AutomaticRestartTime"] !== void 0) {
        contents.AutomaticRestartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["AutomaticRestartTime"]));
      }
      if (output["MasterUsername"] !== void 0) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
      }
      if (output["DBName"] !== void 0) {
        contents.DBName = (0, smithy_client_1.expectString)(output["DBName"]);
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = deserializeAws_queryEndpoint(output["Endpoint"], context);
      }
      if (output["AllocatedStorage"] !== void 0) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
      }
      if (output["InstanceCreateTime"] !== void 0) {
        contents.InstanceCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["InstanceCreateTime"]));
      }
      if (output["PreferredBackupWindow"] !== void 0) {
        contents.PreferredBackupWindow = (0, smithy_client_1.expectString)(output["PreferredBackupWindow"]);
      }
      if (output["BackupRetentionPeriod"] !== void 0) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
      }
      if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
      } else if (output["DBSecurityGroups"] !== void 0 && output["DBSecurityGroups"]["DBSecurityGroup"] !== void 0) {
        contents.DBSecurityGroups = deserializeAws_queryDBSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
      }
      if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
      } else if (output["VpcSecurityGroups"] !== void 0 && output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== void 0) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
      }
      if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
      } else if (output["DBParameterGroups"] !== void 0 && output["DBParameterGroups"]["DBParameterGroup"] !== void 0) {
        contents.DBParameterGroups = deserializeAws_queryDBParameterGroupStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["DBParameterGroups"]["DBParameterGroup"]), context);
      }
      if (output["AvailabilityZone"] !== void 0) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
      }
      if (output["DBSubnetGroup"] !== void 0) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
      }
      if (output["PreferredMaintenanceWindow"] !== void 0) {
        contents.PreferredMaintenanceWindow = (0, smithy_client_1.expectString)(output["PreferredMaintenanceWindow"]);
      }
      if (output["PendingModifiedValues"] !== void 0) {
        contents.PendingModifiedValues = deserializeAws_queryPendingModifiedValues(output["PendingModifiedValues"], context);
      }
      if (output["LatestRestorableTime"] !== void 0) {
        contents.LatestRestorableTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LatestRestorableTime"]));
      }
      if (output["MultiAZ"] !== void 0) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["AutoMinorVersionUpgrade"] !== void 0) {
        contents.AutoMinorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoMinorVersionUpgrade"]);
      }
      if (output["ReadReplicaSourceDBInstanceIdentifier"] !== void 0) {
        contents.ReadReplicaSourceDBInstanceIdentifier = (0, smithy_client_1.expectString)(output["ReadReplicaSourceDBInstanceIdentifier"]);
      }
      if (output.ReadReplicaDBInstanceIdentifiers === "") {
        contents.ReadReplicaDBInstanceIdentifiers = [];
      } else if (output["ReadReplicaDBInstanceIdentifiers"] !== void 0 && output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"] !== void 0) {
        contents.ReadReplicaDBInstanceIdentifiers = deserializeAws_queryReadReplicaDBInstanceIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"]), context);
      }
      if (output.ReadReplicaDBClusterIdentifiers === "") {
        contents.ReadReplicaDBClusterIdentifiers = [];
      } else if (output["ReadReplicaDBClusterIdentifiers"] !== void 0 && output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"] !== void 0) {
        contents.ReadReplicaDBClusterIdentifiers = deserializeAws_queryReadReplicaDBClusterIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"]), context);
      }
      if (output["ReplicaMode"] !== void 0) {
        contents.ReplicaMode = (0, smithy_client_1.expectString)(output["ReplicaMode"]);
      }
      if (output["LicenseModel"] !== void 0) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
      }
      if (output["Iops"] !== void 0) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
      }
      if (output.OptionGroupMemberships === "") {
        contents.OptionGroupMemberships = [];
      } else if (output["OptionGroupMemberships"] !== void 0 && output["OptionGroupMemberships"]["OptionGroupMembership"] !== void 0) {
        contents.OptionGroupMemberships = deserializeAws_queryOptionGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupMemberships"]["OptionGroupMembership"]), context);
      }
      if (output["CharacterSetName"] !== void 0) {
        contents.CharacterSetName = (0, smithy_client_1.expectString)(output["CharacterSetName"]);
      }
      if (output["NcharCharacterSetName"] !== void 0) {
        contents.NcharCharacterSetName = (0, smithy_client_1.expectString)(output["NcharCharacterSetName"]);
      }
      if (output["SecondaryAvailabilityZone"] !== void 0) {
        contents.SecondaryAvailabilityZone = (0, smithy_client_1.expectString)(output["SecondaryAvailabilityZone"]);
      }
      if (output["PubliclyAccessible"] !== void 0) {
        contents.PubliclyAccessible = (0, smithy_client_1.parseBoolean)(output["PubliclyAccessible"]);
      }
      if (output.StatusInfos === "") {
        contents.StatusInfos = [];
      } else if (output["StatusInfos"] !== void 0 && output["StatusInfos"]["DBInstanceStatusInfo"] !== void 0) {
        contents.StatusInfos = deserializeAws_queryDBInstanceStatusInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["StatusInfos"]["DBInstanceStatusInfo"]), context);
      }
      if (output["StorageType"] !== void 0) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
      }
      if (output["TdeCredentialArn"] !== void 0) {
        contents.TdeCredentialArn = (0, smithy_client_1.expectString)(output["TdeCredentialArn"]);
      }
      if (output["DbInstancePort"] !== void 0) {
        contents.DbInstancePort = (0, smithy_client_1.strictParseInt32)(output["DbInstancePort"]);
      }
      if (output["DBClusterIdentifier"] !== void 0) {
        contents.DBClusterIdentifier = (0, smithy_client_1.expectString)(output["DBClusterIdentifier"]);
      }
      if (output["StorageEncrypted"] !== void 0) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["DbiResourceId"] !== void 0) {
        contents.DbiResourceId = (0, smithy_client_1.expectString)(output["DbiResourceId"]);
      }
      if (output["CACertificateIdentifier"] !== void 0) {
        contents.CACertificateIdentifier = (0, smithy_client_1.expectString)(output["CACertificateIdentifier"]);
      }
      if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
      } else if (output["DomainMemberships"] !== void 0 && output["DomainMemberships"]["DomainMembership"] !== void 0) {
        contents.DomainMemberships = deserializeAws_queryDomainMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DomainMemberships"]["DomainMembership"]), context);
      }
      if (output["CopyTagsToSnapshot"] !== void 0) {
        contents.CopyTagsToSnapshot = (0, smithy_client_1.parseBoolean)(output["CopyTagsToSnapshot"]);
      }
      if (output["MonitoringInterval"] !== void 0) {
        contents.MonitoringInterval = (0, smithy_client_1.strictParseInt32)(output["MonitoringInterval"]);
      }
      if (output["EnhancedMonitoringResourceArn"] !== void 0) {
        contents.EnhancedMonitoringResourceArn = (0, smithy_client_1.expectString)(output["EnhancedMonitoringResourceArn"]);
      }
      if (output["MonitoringRoleArn"] !== void 0) {
        contents.MonitoringRoleArn = (0, smithy_client_1.expectString)(output["MonitoringRoleArn"]);
      }
      if (output["PromotionTier"] !== void 0) {
        contents.PromotionTier = (0, smithy_client_1.strictParseInt32)(output["PromotionTier"]);
      }
      if (output["DBInstanceArn"] !== void 0) {
        contents.DBInstanceArn = (0, smithy_client_1.expectString)(output["DBInstanceArn"]);
      }
      if (output["Timezone"] !== void 0) {
        contents.Timezone = (0, smithy_client_1.expectString)(output["Timezone"]);
      }
      if (output["IAMDatabaseAuthenticationEnabled"] !== void 0) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
      }
      if (output["PerformanceInsightsEnabled"] !== void 0) {
        contents.PerformanceInsightsEnabled = (0, smithy_client_1.parseBoolean)(output["PerformanceInsightsEnabled"]);
      }
      if (output["PerformanceInsightsKMSKeyId"] !== void 0) {
        contents.PerformanceInsightsKMSKeyId = (0, smithy_client_1.expectString)(output["PerformanceInsightsKMSKeyId"]);
      }
      if (output["PerformanceInsightsRetentionPeriod"] !== void 0) {
        contents.PerformanceInsightsRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["PerformanceInsightsRetentionPeriod"]);
      }
      if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
      } else if (output["EnabledCloudwatchLogsExports"] !== void 0 && output["EnabledCloudwatchLogsExports"]["member"] !== void 0) {
        contents.EnabledCloudwatchLogsExports = deserializeAws_queryLogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["EnabledCloudwatchLogsExports"]["member"]), context);
      }
      if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
      } else if (output["ProcessorFeatures"] !== void 0 && output["ProcessorFeatures"]["ProcessorFeature"] !== void 0) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ProcessorFeatures"]["ProcessorFeature"]), context);
      }
      if (output["DeletionProtection"] !== void 0) {
        contents.DeletionProtection = (0, smithy_client_1.parseBoolean)(output["DeletionProtection"]);
      }
      if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
      } else if (output["AssociatedRoles"] !== void 0 && output["AssociatedRoles"]["DBInstanceRole"] !== void 0) {
        contents.AssociatedRoles = deserializeAws_queryDBInstanceRoles((0, smithy_client_1.getArrayIfSingleItem)(output["AssociatedRoles"]["DBInstanceRole"]), context);
      }
      if (output["ListenerEndpoint"] !== void 0) {
        contents.ListenerEndpoint = deserializeAws_queryEndpoint(output["ListenerEndpoint"], context);
      }
      if (output["MaxAllocatedStorage"] !== void 0) {
        contents.MaxAllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["MaxAllocatedStorage"]);
      }
      if (output.TagList === "") {
        contents.TagList = [];
      } else if (output["TagList"] !== void 0 && output["TagList"]["Tag"] !== void 0) {
        contents.TagList = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
      }
      if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
      } else if (output["DBInstanceAutomatedBackupsReplications"] !== void 0 && output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== void 0) {
        contents.DBInstanceAutomatedBackupsReplications = deserializeAws_queryDBInstanceAutomatedBackupsReplicationList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
      }
      if (output["CustomerOwnedIpEnabled"] !== void 0) {
        contents.CustomerOwnedIpEnabled = (0, smithy_client_1.parseBoolean)(output["CustomerOwnedIpEnabled"]);
      }
      if (output["AwsBackupRecoveryPointArn"] !== void 0) {
        contents.AwsBackupRecoveryPointArn = (0, smithy_client_1.expectString)(output["AwsBackupRecoveryPointArn"]);
      }
      if (output["ActivityStreamStatus"] !== void 0) {
        contents.ActivityStreamStatus = (0, smithy_client_1.expectString)(output["ActivityStreamStatus"]);
      }
      if (output["ActivityStreamKmsKeyId"] !== void 0) {
        contents.ActivityStreamKmsKeyId = (0, smithy_client_1.expectString)(output["ActivityStreamKmsKeyId"]);
      }
      if (output["ActivityStreamKinesisStreamName"] !== void 0) {
        contents.ActivityStreamKinesisStreamName = (0, smithy_client_1.expectString)(output["ActivityStreamKinesisStreamName"]);
      }
      if (output["ActivityStreamMode"] !== void 0) {
        contents.ActivityStreamMode = (0, smithy_client_1.expectString)(output["ActivityStreamMode"]);
      }
      if (output["ActivityStreamEngineNativeAuditFieldsIncluded"] !== void 0) {
        contents.ActivityStreamEngineNativeAuditFieldsIncluded = (0, smithy_client_1.parseBoolean)(output["ActivityStreamEngineNativeAuditFieldsIncluded"]);
      }
      if (output["AutomationMode"] !== void 0) {
        contents.AutomationMode = (0, smithy_client_1.expectString)(output["AutomationMode"]);
      }
      if (output["ResumeFullAutomationModeTime"] !== void 0) {
        contents.ResumeFullAutomationModeTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ResumeFullAutomationModeTime"]));
      }
      if (output["CustomIamInstanceProfile"] !== void 0) {
        contents.CustomIamInstanceProfile = (0, smithy_client_1.expectString)(output["CustomIamInstanceProfile"]);
      }
      if (output["BackupTarget"] !== void 0) {
        contents.BackupTarget = (0, smithy_client_1.expectString)(output["BackupTarget"]);
      }
      if (output["NetworkType"] !== void 0) {
        contents.NetworkType = (0, smithy_client_1.expectString)(output["NetworkType"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceAutomatedBackup = (output, context) => {
      const contents = {
        DBInstanceArn: void 0,
        DbiResourceId: void 0,
        Region: void 0,
        DBInstanceIdentifier: void 0,
        RestoreWindow: void 0,
        AllocatedStorage: void 0,
        Status: void 0,
        Port: void 0,
        AvailabilityZone: void 0,
        VpcId: void 0,
        InstanceCreateTime: void 0,
        MasterUsername: void 0,
        Engine: void 0,
        EngineVersion: void 0,
        LicenseModel: void 0,
        Iops: void 0,
        OptionGroupName: void 0,
        TdeCredentialArn: void 0,
        Encrypted: void 0,
        StorageType: void 0,
        KmsKeyId: void 0,
        Timezone: void 0,
        IAMDatabaseAuthenticationEnabled: void 0,
        BackupRetentionPeriod: void 0,
        DBInstanceAutomatedBackupsArn: void 0,
        DBInstanceAutomatedBackupsReplications: void 0,
        BackupTarget: void 0
      };
      if (output["DBInstanceArn"] !== void 0) {
        contents.DBInstanceArn = (0, smithy_client_1.expectString)(output["DBInstanceArn"]);
      }
      if (output["DbiResourceId"] !== void 0) {
        contents.DbiResourceId = (0, smithy_client_1.expectString)(output["DbiResourceId"]);
      }
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      if (output["DBInstanceIdentifier"] !== void 0) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
      }
      if (output["RestoreWindow"] !== void 0) {
        contents.RestoreWindow = deserializeAws_queryRestoreWindow(output["RestoreWindow"], context);
      }
      if (output["AllocatedStorage"] !== void 0) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["AvailabilityZone"] !== void 0) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output["InstanceCreateTime"] !== void 0) {
        contents.InstanceCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["InstanceCreateTime"]));
      }
      if (output["MasterUsername"] !== void 0) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["LicenseModel"] !== void 0) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
      }
      if (output["Iops"] !== void 0) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
      }
      if (output["OptionGroupName"] !== void 0) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
      }
      if (output["TdeCredentialArn"] !== void 0) {
        contents.TdeCredentialArn = (0, smithy_client_1.expectString)(output["TdeCredentialArn"]);
      }
      if (output["Encrypted"] !== void 0) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["Encrypted"]);
      }
      if (output["StorageType"] !== void 0) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["Timezone"] !== void 0) {
        contents.Timezone = (0, smithy_client_1.expectString)(output["Timezone"]);
      }
      if (output["IAMDatabaseAuthenticationEnabled"] !== void 0) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
      }
      if (output["BackupRetentionPeriod"] !== void 0) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
      }
      if (output["DBInstanceAutomatedBackupsArn"] !== void 0) {
        contents.DBInstanceAutomatedBackupsArn = (0, smithy_client_1.expectString)(output["DBInstanceAutomatedBackupsArn"]);
      }
      if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
      } else if (output["DBInstanceAutomatedBackupsReplications"] !== void 0 && output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== void 0) {
        contents.DBInstanceAutomatedBackupsReplications = deserializeAws_queryDBInstanceAutomatedBackupsReplicationList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
      }
      if (output["BackupTarget"] !== void 0) {
        contents.BackupTarget = (0, smithy_client_1.expectString)(output["BackupTarget"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceAutomatedBackupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBInstanceAutomatedBackup(entry, context);
      });
    };
    var deserializeAws_queryDBInstanceAutomatedBackupMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBInstanceAutomatedBackups: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBInstanceAutomatedBackups === "") {
        contents.DBInstanceAutomatedBackups = [];
      } else if (output["DBInstanceAutomatedBackups"] !== void 0 && output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"] !== void 0) {
        contents.DBInstanceAutomatedBackups = deserializeAws_queryDBInstanceAutomatedBackupList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceAutomatedBackupNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceAutomatedBackupsReplication = (output, context) => {
      const contents = {
        DBInstanceAutomatedBackupsArn: void 0
      };
      if (output["DBInstanceAutomatedBackupsArn"] !== void 0) {
        contents.DBInstanceAutomatedBackupsArn = (0, smithy_client_1.expectString)(output["DBInstanceAutomatedBackupsArn"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceAutomatedBackupsReplicationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBInstanceAutomatedBackupsReplication(entry, context);
      });
    };
    var deserializeAws_queryDBInstanceList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBInstance(entry, context);
      });
    };
    var deserializeAws_queryDBInstanceMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBInstances: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBInstances === "") {
        contents.DBInstances = [];
      } else if (output["DBInstances"] !== void 0 && output["DBInstances"]["DBInstance"] !== void 0) {
        contents.DBInstances = deserializeAws_queryDBInstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["DBInstances"]["DBInstance"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceRole = (output, context) => {
      const contents = {
        RoleArn: void 0,
        FeatureName: void 0,
        Status: void 0
      };
      if (output["RoleArn"] !== void 0) {
        contents.RoleArn = (0, smithy_client_1.expectString)(output["RoleArn"]);
      }
      if (output["FeatureName"] !== void 0) {
        contents.FeatureName = (0, smithy_client_1.expectString)(output["FeatureName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceRoleAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceRoleNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceRoleQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceRoles = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBInstanceRole(entry, context);
      });
    };
    var deserializeAws_queryDBInstanceStatusInfo = (output, context) => {
      const contents = {
        StatusType: void 0,
        Normal: void 0,
        Status: void 0,
        Message: void 0
      };
      if (output["StatusType"] !== void 0) {
        contents.StatusType = (0, smithy_client_1.expectString)(output["StatusType"]);
      }
      if (output["Normal"] !== void 0) {
        contents.Normal = (0, smithy_client_1.parseBoolean)(output["Normal"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBInstanceStatusInfoList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBInstanceStatusInfo(entry, context);
      });
    };
    var deserializeAws_queryDBLogFileNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroup = (output, context) => {
      const contents = {
        DBParameterGroupName: void 0,
        DBParameterGroupFamily: void 0,
        Description: void 0,
        DBParameterGroupArn: void 0
      };
      if (output["DBParameterGroupName"] !== void 0) {
        contents.DBParameterGroupName = (0, smithy_client_1.expectString)(output["DBParameterGroupName"]);
      }
      if (output["DBParameterGroupFamily"] !== void 0) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["DBParameterGroupArn"] !== void 0) {
        contents.DBParameterGroupArn = (0, smithy_client_1.expectString)(output["DBParameterGroupArn"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupDetails = (output, context) => {
      const contents = {
        Parameters: void 0,
        Marker: void 0
      };
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["Parameter"] !== void 0) {
        contents.Parameters = deserializeAws_queryParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBParameterGroup(entry, context);
      });
    };
    var deserializeAws_queryDBParameterGroupNameMessage = (output, context) => {
      const contents = {
        DBParameterGroupName: void 0
      };
      if (output["DBParameterGroupName"] !== void 0) {
        contents.DBParameterGroupName = (0, smithy_client_1.expectString)(output["DBParameterGroupName"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupsMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBParameterGroups: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
      } else if (output["DBParameterGroups"] !== void 0 && output["DBParameterGroups"]["DBParameterGroup"] !== void 0) {
        contents.DBParameterGroups = deserializeAws_queryDBParameterGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["DBParameterGroups"]["DBParameterGroup"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupStatus = (output, context) => {
      const contents = {
        DBParameterGroupName: void 0,
        ParameterApplyStatus: void 0
      };
      if (output["DBParameterGroupName"] !== void 0) {
        contents.DBParameterGroupName = (0, smithy_client_1.expectString)(output["DBParameterGroupName"]);
      }
      if (output["ParameterApplyStatus"] !== void 0) {
        contents.ParameterApplyStatus = (0, smithy_client_1.expectString)(output["ParameterApplyStatus"]);
      }
      return contents;
    };
    var deserializeAws_queryDBParameterGroupStatusList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBParameterGroupStatus(entry, context);
      });
    };
    var deserializeAws_queryDBProxy = (output, context) => {
      const contents = {
        DBProxyName: void 0,
        DBProxyArn: void 0,
        Status: void 0,
        EngineFamily: void 0,
        VpcId: void 0,
        VpcSecurityGroupIds: void 0,
        VpcSubnetIds: void 0,
        Auth: void 0,
        RoleArn: void 0,
        Endpoint: void 0,
        RequireTLS: void 0,
        IdleClientTimeout: void 0,
        DebugLogging: void 0,
        CreatedDate: void 0,
        UpdatedDate: void 0
      };
      if (output["DBProxyName"] !== void 0) {
        contents.DBProxyName = (0, smithy_client_1.expectString)(output["DBProxyName"]);
      }
      if (output["DBProxyArn"] !== void 0) {
        contents.DBProxyArn = (0, smithy_client_1.expectString)(output["DBProxyArn"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["EngineFamily"] !== void 0) {
        contents.EngineFamily = (0, smithy_client_1.expectString)(output["EngineFamily"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
      } else if (output["VpcSecurityGroupIds"] !== void 0 && output["VpcSecurityGroupIds"]["member"] !== void 0) {
        contents.VpcSecurityGroupIds = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroupIds"]["member"]), context);
      }
      if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
      } else if (output["VpcSubnetIds"] !== void 0 && output["VpcSubnetIds"]["member"] !== void 0) {
        contents.VpcSubnetIds = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSubnetIds"]["member"]), context);
      }
      if (output.Auth === "") {
        contents.Auth = [];
      } else if (output["Auth"] !== void 0 && output["Auth"]["member"] !== void 0) {
        contents.Auth = deserializeAws_queryUserAuthConfigInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["Auth"]["member"]), context);
      }
      if (output["RoleArn"] !== void 0) {
        contents.RoleArn = (0, smithy_client_1.expectString)(output["RoleArn"]);
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
      }
      if (output["RequireTLS"] !== void 0) {
        contents.RequireTLS = (0, smithy_client_1.parseBoolean)(output["RequireTLS"]);
      }
      if (output["IdleClientTimeout"] !== void 0) {
        contents.IdleClientTimeout = (0, smithy_client_1.strictParseInt32)(output["IdleClientTimeout"]);
      }
      if (output["DebugLogging"] !== void 0) {
        contents.DebugLogging = (0, smithy_client_1.parseBoolean)(output["DebugLogging"]);
      }
      if (output["CreatedDate"] !== void 0) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedDate"]));
      }
      if (output["UpdatedDate"] !== void 0) {
        contents.UpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["UpdatedDate"]));
      }
      return contents;
    };
    var deserializeAws_queryDBProxyAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyEndpoint = (output, context) => {
      const contents = {
        DBProxyEndpointName: void 0,
        DBProxyEndpointArn: void 0,
        DBProxyName: void 0,
        Status: void 0,
        VpcId: void 0,
        VpcSecurityGroupIds: void 0,
        VpcSubnetIds: void 0,
        Endpoint: void 0,
        CreatedDate: void 0,
        TargetRole: void 0,
        IsDefault: void 0
      };
      if (output["DBProxyEndpointName"] !== void 0) {
        contents.DBProxyEndpointName = (0, smithy_client_1.expectString)(output["DBProxyEndpointName"]);
      }
      if (output["DBProxyEndpointArn"] !== void 0) {
        contents.DBProxyEndpointArn = (0, smithy_client_1.expectString)(output["DBProxyEndpointArn"]);
      }
      if (output["DBProxyName"] !== void 0) {
        contents.DBProxyName = (0, smithy_client_1.expectString)(output["DBProxyName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
      } else if (output["VpcSecurityGroupIds"] !== void 0 && output["VpcSecurityGroupIds"]["member"] !== void 0) {
        contents.VpcSecurityGroupIds = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroupIds"]["member"]), context);
      }
      if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
      } else if (output["VpcSubnetIds"] !== void 0 && output["VpcSubnetIds"]["member"] !== void 0) {
        contents.VpcSubnetIds = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSubnetIds"]["member"]), context);
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
      }
      if (output["CreatedDate"] !== void 0) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedDate"]));
      }
      if (output["TargetRole"] !== void 0) {
        contents.TargetRole = (0, smithy_client_1.expectString)(output["TargetRole"]);
      }
      if (output["IsDefault"] !== void 0) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["IsDefault"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyEndpointAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyEndpointList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBProxyEndpoint(entry, context);
      });
    };
    var deserializeAws_queryDBProxyEndpointNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyEndpointQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBProxy(entry, context);
      });
    };
    var deserializeAws_queryDBProxyNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyTarget = (output, context) => {
      const contents = {
        TargetArn: void 0,
        Endpoint: void 0,
        TrackedClusterId: void 0,
        RdsResourceId: void 0,
        Port: void 0,
        Type: void 0,
        Role: void 0,
        TargetHealth: void 0
      };
      if (output["TargetArn"] !== void 0) {
        contents.TargetArn = (0, smithy_client_1.expectString)(output["TargetArn"]);
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
      }
      if (output["TrackedClusterId"] !== void 0) {
        contents.TrackedClusterId = (0, smithy_client_1.expectString)(output["TrackedClusterId"]);
      }
      if (output["RdsResourceId"] !== void 0) {
        contents.RdsResourceId = (0, smithy_client_1.expectString)(output["RdsResourceId"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["Role"] !== void 0) {
        contents.Role = (0, smithy_client_1.expectString)(output["Role"]);
      }
      if (output["TargetHealth"] !== void 0) {
        contents.TargetHealth = deserializeAws_queryTargetHealth(output["TargetHealth"], context);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyTargetAlreadyRegisteredFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyTargetGroup = (output, context) => {
      const contents = {
        DBProxyName: void 0,
        TargetGroupName: void 0,
        TargetGroupArn: void 0,
        IsDefault: void 0,
        Status: void 0,
        ConnectionPoolConfig: void 0,
        CreatedDate: void 0,
        UpdatedDate: void 0
      };
      if (output["DBProxyName"] !== void 0) {
        contents.DBProxyName = (0, smithy_client_1.expectString)(output["DBProxyName"]);
      }
      if (output["TargetGroupName"] !== void 0) {
        contents.TargetGroupName = (0, smithy_client_1.expectString)(output["TargetGroupName"]);
      }
      if (output["TargetGroupArn"] !== void 0) {
        contents.TargetGroupArn = (0, smithy_client_1.expectString)(output["TargetGroupArn"]);
      }
      if (output["IsDefault"] !== void 0) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["IsDefault"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["ConnectionPoolConfig"] !== void 0) {
        contents.ConnectionPoolConfig = deserializeAws_queryConnectionPoolConfigurationInfo(output["ConnectionPoolConfig"], context);
      }
      if (output["CreatedDate"] !== void 0) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedDate"]));
      }
      if (output["UpdatedDate"] !== void 0) {
        contents.UpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["UpdatedDate"]));
      }
      return contents;
    };
    var deserializeAws_queryDBProxyTargetGroupNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBProxyTargetNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroup = (output, context) => {
      const contents = {
        OwnerId: void 0,
        DBSecurityGroupName: void 0,
        DBSecurityGroupDescription: void 0,
        VpcId: void 0,
        EC2SecurityGroups: void 0,
        IPRanges: void 0,
        DBSecurityGroupArn: void 0
      };
      if (output["OwnerId"] !== void 0) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["OwnerId"]);
      }
      if (output["DBSecurityGroupName"] !== void 0) {
        contents.DBSecurityGroupName = (0, smithy_client_1.expectString)(output["DBSecurityGroupName"]);
      }
      if (output["DBSecurityGroupDescription"] !== void 0) {
        contents.DBSecurityGroupDescription = (0, smithy_client_1.expectString)(output["DBSecurityGroupDescription"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output.EC2SecurityGroups === "") {
        contents.EC2SecurityGroups = [];
      } else if (output["EC2SecurityGroups"] !== void 0 && output["EC2SecurityGroups"]["EC2SecurityGroup"] !== void 0) {
        contents.EC2SecurityGroups = deserializeAws_queryEC2SecurityGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["EC2SecurityGroups"]["EC2SecurityGroup"]), context);
      }
      if (output.IPRanges === "") {
        contents.IPRanges = [];
      } else if (output["IPRanges"] !== void 0 && output["IPRanges"]["IPRange"] !== void 0) {
        contents.IPRanges = deserializeAws_queryIPRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["IPRanges"]["IPRange"]), context);
      }
      if (output["DBSecurityGroupArn"] !== void 0) {
        contents.DBSecurityGroupArn = (0, smithy_client_1.expectString)(output["DBSecurityGroupArn"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroupAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroupMembership = (output, context) => {
      const contents = {
        DBSecurityGroupName: void 0,
        Status: void 0
      };
      if (output["DBSecurityGroupName"] !== void 0) {
        contents.DBSecurityGroupName = (0, smithy_client_1.expectString)(output["DBSecurityGroupName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroupMembershipList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBSecurityGroupMembership(entry, context);
      });
    };
    var deserializeAws_queryDBSecurityGroupMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBSecurityGroups: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
      } else if (output["DBSecurityGroups"] !== void 0 && output["DBSecurityGroups"]["DBSecurityGroup"] !== void 0) {
        contents.DBSecurityGroups = deserializeAws_queryDBSecurityGroups((0, smithy_client_1.getArrayIfSingleItem)(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroupNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroupNotSupportedFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroupQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSecurityGroups = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBSecurityGroup(entry, context);
      });
    };
    var deserializeAws_queryDBSnapshot = (output, context) => {
      const contents = {
        DBSnapshotIdentifier: void 0,
        DBInstanceIdentifier: void 0,
        SnapshotCreateTime: void 0,
        Engine: void 0,
        AllocatedStorage: void 0,
        Status: void 0,
        Port: void 0,
        AvailabilityZone: void 0,
        VpcId: void 0,
        InstanceCreateTime: void 0,
        MasterUsername: void 0,
        EngineVersion: void 0,
        LicenseModel: void 0,
        SnapshotType: void 0,
        Iops: void 0,
        OptionGroupName: void 0,
        PercentProgress: void 0,
        SourceRegion: void 0,
        SourceDBSnapshotIdentifier: void 0,
        StorageType: void 0,
        TdeCredentialArn: void 0,
        Encrypted: void 0,
        KmsKeyId: void 0,
        DBSnapshotArn: void 0,
        Timezone: void 0,
        IAMDatabaseAuthenticationEnabled: void 0,
        ProcessorFeatures: void 0,
        DbiResourceId: void 0,
        TagList: void 0,
        OriginalSnapshotCreateTime: void 0,
        SnapshotTarget: void 0
      };
      if (output["DBSnapshotIdentifier"] !== void 0) {
        contents.DBSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBSnapshotIdentifier"]);
      }
      if (output["DBInstanceIdentifier"] !== void 0) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
      }
      if (output["SnapshotCreateTime"] !== void 0) {
        contents.SnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SnapshotCreateTime"]));
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["AllocatedStorage"] !== void 0) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["AvailabilityZone"] !== void 0) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output["InstanceCreateTime"] !== void 0) {
        contents.InstanceCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["InstanceCreateTime"]));
      }
      if (output["MasterUsername"] !== void 0) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["LicenseModel"] !== void 0) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
      }
      if (output["SnapshotType"] !== void 0) {
        contents.SnapshotType = (0, smithy_client_1.expectString)(output["SnapshotType"]);
      }
      if (output["Iops"] !== void 0) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
      }
      if (output["OptionGroupName"] !== void 0) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
      }
      if (output["PercentProgress"] !== void 0) {
        contents.PercentProgress = (0, smithy_client_1.strictParseInt32)(output["PercentProgress"]);
      }
      if (output["SourceRegion"] !== void 0) {
        contents.SourceRegion = (0, smithy_client_1.expectString)(output["SourceRegion"]);
      }
      if (output["SourceDBSnapshotIdentifier"] !== void 0) {
        contents.SourceDBSnapshotIdentifier = (0, smithy_client_1.expectString)(output["SourceDBSnapshotIdentifier"]);
      }
      if (output["StorageType"] !== void 0) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
      }
      if (output["TdeCredentialArn"] !== void 0) {
        contents.TdeCredentialArn = (0, smithy_client_1.expectString)(output["TdeCredentialArn"]);
      }
      if (output["Encrypted"] !== void 0) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["Encrypted"]);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["DBSnapshotArn"] !== void 0) {
        contents.DBSnapshotArn = (0, smithy_client_1.expectString)(output["DBSnapshotArn"]);
      }
      if (output["Timezone"] !== void 0) {
        contents.Timezone = (0, smithy_client_1.expectString)(output["Timezone"]);
      }
      if (output["IAMDatabaseAuthenticationEnabled"] !== void 0) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
      }
      if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
      } else if (output["ProcessorFeatures"] !== void 0 && output["ProcessorFeatures"]["ProcessorFeature"] !== void 0) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ProcessorFeatures"]["ProcessorFeature"]), context);
      }
      if (output["DbiResourceId"] !== void 0) {
        contents.DbiResourceId = (0, smithy_client_1.expectString)(output["DbiResourceId"]);
      }
      if (output.TagList === "") {
        contents.TagList = [];
      } else if (output["TagList"] !== void 0 && output["TagList"]["Tag"] !== void 0) {
        contents.TagList = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
      }
      if (output["OriginalSnapshotCreateTime"] !== void 0) {
        contents.OriginalSnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["OriginalSnapshotCreateTime"]));
      }
      if (output["SnapshotTarget"] !== void 0) {
        contents.SnapshotTarget = (0, smithy_client_1.expectString)(output["SnapshotTarget"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSnapshotAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSnapshotAttribute = (output, context) => {
      const contents = {
        AttributeName: void 0,
        AttributeValues: void 0
      };
      if (output["AttributeName"] !== void 0) {
        contents.AttributeName = (0, smithy_client_1.expectString)(output["AttributeName"]);
      }
      if (output.AttributeValues === "") {
        contents.AttributeValues = [];
      } else if (output["AttributeValues"] !== void 0 && output["AttributeValues"]["AttributeValue"] !== void 0) {
        contents.AttributeValues = deserializeAws_queryAttributeValueList((0, smithy_client_1.getArrayIfSingleItem)(output["AttributeValues"]["AttributeValue"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBSnapshotAttributeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBSnapshotAttribute(entry, context);
      });
    };
    var deserializeAws_queryDBSnapshotAttributesResult = (output, context) => {
      const contents = {
        DBSnapshotIdentifier: void 0,
        DBSnapshotAttributes: void 0
      };
      if (output["DBSnapshotIdentifier"] !== void 0) {
        contents.DBSnapshotIdentifier = (0, smithy_client_1.expectString)(output["DBSnapshotIdentifier"]);
      }
      if (output.DBSnapshotAttributes === "") {
        contents.DBSnapshotAttributes = [];
      } else if (output["DBSnapshotAttributes"] !== void 0 && output["DBSnapshotAttributes"]["DBSnapshotAttribute"] !== void 0) {
        contents.DBSnapshotAttributes = deserializeAws_queryDBSnapshotAttributeList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSnapshotAttributes"]["DBSnapshotAttribute"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBSnapshotList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBSnapshot(entry, context);
      });
    };
    var deserializeAws_queryDBSnapshotMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBSnapshots: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBSnapshots === "") {
        contents.DBSnapshots = [];
      } else if (output["DBSnapshots"] !== void 0 && output["DBSnapshots"]["DBSnapshot"] !== void 0) {
        contents.DBSnapshots = deserializeAws_queryDBSnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSnapshots"]["DBSnapshot"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBSnapshotNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroup = (output, context) => {
      const contents = {
        DBSubnetGroupName: void 0,
        DBSubnetGroupDescription: void 0,
        VpcId: void 0,
        SubnetGroupStatus: void 0,
        Subnets: void 0,
        DBSubnetGroupArn: void 0,
        SupportedNetworkTypes: void 0
      };
      if (output["DBSubnetGroupName"] !== void 0) {
        contents.DBSubnetGroupName = (0, smithy_client_1.expectString)(output["DBSubnetGroupName"]);
      }
      if (output["DBSubnetGroupDescription"] !== void 0) {
        contents.DBSubnetGroupDescription = (0, smithy_client_1.expectString)(output["DBSubnetGroupDescription"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output["SubnetGroupStatus"] !== void 0) {
        contents.SubnetGroupStatus = (0, smithy_client_1.expectString)(output["SubnetGroupStatus"]);
      }
      if (output.Subnets === "") {
        contents.Subnets = [];
      } else if (output["Subnets"] !== void 0 && output["Subnets"]["Subnet"] !== void 0) {
        contents.Subnets = deserializeAws_querySubnetList((0, smithy_client_1.getArrayIfSingleItem)(output["Subnets"]["Subnet"]), context);
      }
      if (output["DBSubnetGroupArn"] !== void 0) {
        contents.DBSubnetGroupArn = (0, smithy_client_1.expectString)(output["DBSubnetGroupArn"]);
      }
      if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
      } else if (output["SupportedNetworkTypes"] !== void 0 && output["SupportedNetworkTypes"]["member"] !== void 0) {
        contents.SupportedNetworkTypes = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNetworkTypes"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroupAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZs = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroupMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        DBSubnetGroups: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.DBSubnetGroups === "") {
        contents.DBSubnetGroups = [];
      } else if (output["DBSubnetGroups"] !== void 0 && output["DBSubnetGroups"]["DBSubnetGroup"] !== void 0) {
        contents.DBSubnetGroups = deserializeAws_queryDBSubnetGroups((0, smithy_client_1.getArrayIfSingleItem)(output["DBSubnetGroups"]["DBSubnetGroup"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroupNotAllowedFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroupNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroupQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBSubnetGroups = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBSubnetGroup(entry, context);
      });
    };
    var deserializeAws_queryDBSubnetQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDBUpgradeDependencyFailureFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDeleteDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteDBClusterSnapshotResult = (output, context) => {
      const contents = {
        DBClusterSnapshot: void 0
      };
      if (output["DBClusterSnapshot"] !== void 0) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteDBInstanceAutomatedBackupResult = (output, context) => {
      const contents = {
        DBInstanceAutomatedBackup: void 0
      };
      if (output["DBInstanceAutomatedBackup"] !== void 0) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteDBInstanceResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteDBProxyEndpointResponse = (output, context) => {
      const contents = {
        DBProxyEndpoint: void 0
      };
      if (output["DBProxyEndpoint"] !== void 0) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteDBProxyResponse = (output, context) => {
      const contents = {
        DBProxy: void 0
      };
      if (output["DBProxy"] !== void 0) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteDBSnapshotResult = (output, context) => {
      const contents = {
        DBSnapshot: void 0
      };
      if (output["DBSnapshot"] !== void 0) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteEventSubscriptionResult = (output, context) => {
      const contents = {
        EventSubscription: void 0
      };
      if (output["EventSubscription"] !== void 0) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeleteGlobalClusterResult = (output, context) => {
      const contents = {
        GlobalCluster: void 0
      };
      if (output["GlobalCluster"] !== void 0) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryDeregisterDBProxyTargetsResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDescribeDBClusterSnapshotAttributesResult = (output, context) => {
      const contents = {
        DBClusterSnapshotAttributesResult: void 0
      };
      if (output["DBClusterSnapshotAttributesResult"] !== void 0) {
        contents.DBClusterSnapshotAttributesResult = deserializeAws_queryDBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeDBLogFilesDetails = (output, context) => {
      const contents = {
        LogFileName: void 0,
        LastWritten: void 0,
        Size: void 0
      };
      if (output["LogFileName"] !== void 0) {
        contents.LogFileName = (0, smithy_client_1.expectString)(output["LogFileName"]);
      }
      if (output["LastWritten"] !== void 0) {
        contents.LastWritten = (0, smithy_client_1.strictParseLong)(output["LastWritten"]);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeDBLogFilesList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDescribeDBLogFilesDetails(entry, context);
      });
    };
    var deserializeAws_queryDescribeDBLogFilesResponse = (output, context) => {
      const contents = {
        DescribeDBLogFiles: void 0,
        Marker: void 0
      };
      if (output.DescribeDBLogFiles === "") {
        contents.DescribeDBLogFiles = [];
      } else if (output["DescribeDBLogFiles"] !== void 0 && output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"] !== void 0) {
        contents.DescribeDBLogFiles = deserializeAws_queryDescribeDBLogFilesList((0, smithy_client_1.getArrayIfSingleItem)(output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeDBProxiesResponse = (output, context) => {
      const contents = {
        DBProxies: void 0,
        Marker: void 0
      };
      if (output.DBProxies === "") {
        contents.DBProxies = [];
      } else if (output["DBProxies"] !== void 0 && output["DBProxies"]["member"] !== void 0) {
        contents.DBProxies = deserializeAws_queryDBProxyList((0, smithy_client_1.getArrayIfSingleItem)(output["DBProxies"]["member"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeDBProxyEndpointsResponse = (output, context) => {
      const contents = {
        DBProxyEndpoints: void 0,
        Marker: void 0
      };
      if (output.DBProxyEndpoints === "") {
        contents.DBProxyEndpoints = [];
      } else if (output["DBProxyEndpoints"] !== void 0 && output["DBProxyEndpoints"]["member"] !== void 0) {
        contents.DBProxyEndpoints = deserializeAws_queryDBProxyEndpointList((0, smithy_client_1.getArrayIfSingleItem)(output["DBProxyEndpoints"]["member"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeDBProxyTargetGroupsResponse = (output, context) => {
      const contents = {
        TargetGroups: void 0,
        Marker: void 0
      };
      if (output.TargetGroups === "") {
        contents.TargetGroups = [];
      } else if (output["TargetGroups"] !== void 0 && output["TargetGroups"]["member"] !== void 0) {
        contents.TargetGroups = deserializeAws_queryTargetGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["TargetGroups"]["member"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeDBProxyTargetsResponse = (output, context) => {
      const contents = {
        Targets: void 0,
        Marker: void 0
      };
      if (output.Targets === "") {
        contents.Targets = [];
      } else if (output["Targets"] !== void 0 && output["Targets"]["member"] !== void 0) {
        contents.Targets = deserializeAws_queryTargetList((0, smithy_client_1.getArrayIfSingleItem)(output["Targets"]["member"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeDBSnapshotAttributesResult = (output, context) => {
      const contents = {
        DBSnapshotAttributesResult: void 0
      };
      if (output["DBSnapshotAttributesResult"] !== void 0) {
        contents.DBSnapshotAttributesResult = deserializeAws_queryDBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeEngineDefaultClusterParametersResult = (output, context) => {
      const contents = {
        EngineDefaults: void 0
      };
      if (output["EngineDefaults"] !== void 0) {
        contents.EngineDefaults = deserializeAws_queryEngineDefaults(output["EngineDefaults"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeEngineDefaultParametersResult = (output, context) => {
      const contents = {
        EngineDefaults: void 0
      };
      if (output["EngineDefaults"] !== void 0) {
        contents.EngineDefaults = deserializeAws_queryEngineDefaults(output["EngineDefaults"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeValidDBInstanceModificationsResult = (output, context) => {
      const contents = {
        ValidDBInstanceModificationsMessage: void 0
      };
      if (output["ValidDBInstanceModificationsMessage"] !== void 0) {
        contents.ValidDBInstanceModificationsMessage = deserializeAws_queryValidDBInstanceModificationsMessage(output["ValidDBInstanceModificationsMessage"], context);
      }
      return contents;
    };
    var deserializeAws_queryDomainMembership = (output, context) => {
      const contents = {
        Domain: void 0,
        Status: void 0,
        FQDN: void 0,
        IAMRoleName: void 0
      };
      if (output["Domain"] !== void 0) {
        contents.Domain = (0, smithy_client_1.expectString)(output["Domain"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["FQDN"] !== void 0) {
        contents.FQDN = (0, smithy_client_1.expectString)(output["FQDN"]);
      }
      if (output["IAMRoleName"] !== void 0) {
        contents.IAMRoleName = (0, smithy_client_1.expectString)(output["IAMRoleName"]);
      }
      return contents;
    };
    var deserializeAws_queryDomainMembershipList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDomainMembership(entry, context);
      });
    };
    var deserializeAws_queryDomainNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDoubleRange = (output, context) => {
      const contents = {
        From: void 0,
        To: void 0
      };
      if (output["From"] !== void 0) {
        contents.From = (0, smithy_client_1.strictParseFloat)(output["From"]);
      }
      if (output["To"] !== void 0) {
        contents.To = (0, smithy_client_1.strictParseFloat)(output["To"]);
      }
      return contents;
    };
    var deserializeAws_queryDoubleRangeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDoubleRange(entry, context);
      });
    };
    var deserializeAws_queryDownloadDBLogFilePortionDetails = (output, context) => {
      const contents = {
        LogFileData: void 0,
        Marker: void 0,
        AdditionalDataPending: void 0
      };
      if (output["LogFileData"] !== void 0) {
        contents.LogFileData = (0, smithy_client_1.expectString)(output["LogFileData"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output["AdditionalDataPending"] !== void 0) {
        contents.AdditionalDataPending = (0, smithy_client_1.parseBoolean)(output["AdditionalDataPending"]);
      }
      return contents;
    };
    var deserializeAws_queryEC2SecurityGroup = (output, context) => {
      const contents = {
        Status: void 0,
        EC2SecurityGroupName: void 0,
        EC2SecurityGroupId: void 0,
        EC2SecurityGroupOwnerId: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["EC2SecurityGroupName"] !== void 0) {
        contents.EC2SecurityGroupName = (0, smithy_client_1.expectString)(output["EC2SecurityGroupName"]);
      }
      if (output["EC2SecurityGroupId"] !== void 0) {
        contents.EC2SecurityGroupId = (0, smithy_client_1.expectString)(output["EC2SecurityGroupId"]);
      }
      if (output["EC2SecurityGroupOwnerId"] !== void 0) {
        contents.EC2SecurityGroupOwnerId = (0, smithy_client_1.expectString)(output["EC2SecurityGroupOwnerId"]);
      }
      return contents;
    };
    var deserializeAws_queryEC2SecurityGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryEC2SecurityGroup(entry, context);
      });
    };
    var deserializeAws_queryEndpoint = (output, context) => {
      const contents = {
        Address: void 0,
        Port: void 0,
        HostedZoneId: void 0
      };
      if (output["Address"] !== void 0) {
        contents.Address = (0, smithy_client_1.expectString)(output["Address"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["HostedZoneId"] !== void 0) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
      }
      return contents;
    };
    var deserializeAws_queryEngineDefaults = (output, context) => {
      const contents = {
        DBParameterGroupFamily: void 0,
        Marker: void 0,
        Parameters: void 0
      };
      if (output["DBParameterGroupFamily"] !== void 0) {
        contents.DBParameterGroupFamily = (0, smithy_client_1.expectString)(output["DBParameterGroupFamily"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["Parameter"] !== void 0) {
        contents.Parameters = deserializeAws_queryParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
      }
      return contents;
    };
    var deserializeAws_queryEngineModeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryEvent = (output, context) => {
      const contents = {
        SourceIdentifier: void 0,
        SourceType: void 0,
        Message: void 0,
        EventCategories: void 0,
        Date: void 0,
        SourceArn: void 0
      };
      if (output["SourceIdentifier"] !== void 0) {
        contents.SourceIdentifier = (0, smithy_client_1.expectString)(output["SourceIdentifier"]);
      }
      if (output["SourceType"] !== void 0) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      if (output.EventCategories === "") {
        contents.EventCategories = [];
      } else if (output["EventCategories"] !== void 0 && output["EventCategories"]["EventCategory"] !== void 0) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategories"]["EventCategory"]), context);
      }
      if (output["Date"] !== void 0) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Date"]));
      }
      if (output["SourceArn"] !== void 0) {
        contents.SourceArn = (0, smithy_client_1.expectString)(output["SourceArn"]);
      }
      return contents;
    };
    var deserializeAws_queryEventCategoriesList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryEventCategoriesMap = (output, context) => {
      const contents = {
        SourceType: void 0,
        EventCategories: void 0
      };
      if (output["SourceType"] !== void 0) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
      }
      if (output.EventCategories === "") {
        contents.EventCategories = [];
      } else if (output["EventCategories"] !== void 0 && output["EventCategories"]["EventCategory"] !== void 0) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategories"]["EventCategory"]), context);
      }
      return contents;
    };
    var deserializeAws_queryEventCategoriesMapList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryEventCategoriesMap(entry, context);
      });
    };
    var deserializeAws_queryEventCategoriesMessage = (output, context) => {
      const contents = {
        EventCategoriesMapList: void 0
      };
      if (output.EventCategoriesMapList === "") {
        contents.EventCategoriesMapList = [];
      } else if (output["EventCategoriesMapList"] !== void 0 && output["EventCategoriesMapList"]["EventCategoriesMap"] !== void 0) {
        contents.EventCategoriesMapList = deserializeAws_queryEventCategoriesMapList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategoriesMapList"]["EventCategoriesMap"]), context);
      }
      return contents;
    };
    var deserializeAws_queryEventList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryEvent(entry, context);
      });
    };
    var deserializeAws_queryEventsMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        Events: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.Events === "") {
        contents.Events = [];
      } else if (output["Events"] !== void 0 && output["Events"]["Event"] !== void 0) {
        contents.Events = deserializeAws_queryEventList((0, smithy_client_1.getArrayIfSingleItem)(output["Events"]["Event"]), context);
      }
      return contents;
    };
    var deserializeAws_queryEventSubscription = (output, context) => {
      const contents = {
        CustomerAwsId: void 0,
        CustSubscriptionId: void 0,
        SnsTopicArn: void 0,
        Status: void 0,
        SubscriptionCreationTime: void 0,
        SourceType: void 0,
        SourceIdsList: void 0,
        EventCategoriesList: void 0,
        Enabled: void 0,
        EventSubscriptionArn: void 0
      };
      if (output["CustomerAwsId"] !== void 0) {
        contents.CustomerAwsId = (0, smithy_client_1.expectString)(output["CustomerAwsId"]);
      }
      if (output["CustSubscriptionId"] !== void 0) {
        contents.CustSubscriptionId = (0, smithy_client_1.expectString)(output["CustSubscriptionId"]);
      }
      if (output["SnsTopicArn"] !== void 0) {
        contents.SnsTopicArn = (0, smithy_client_1.expectString)(output["SnsTopicArn"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["SubscriptionCreationTime"] !== void 0) {
        contents.SubscriptionCreationTime = (0, smithy_client_1.expectString)(output["SubscriptionCreationTime"]);
      }
      if (output["SourceType"] !== void 0) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
      }
      if (output.SourceIdsList === "") {
        contents.SourceIdsList = [];
      } else if (output["SourceIdsList"] !== void 0 && output["SourceIdsList"]["SourceId"] !== void 0) {
        contents.SourceIdsList = deserializeAws_querySourceIdsList((0, smithy_client_1.getArrayIfSingleItem)(output["SourceIdsList"]["SourceId"]), context);
      }
      if (output.EventCategoriesList === "") {
        contents.EventCategoriesList = [];
      } else if (output["EventCategoriesList"] !== void 0 && output["EventCategoriesList"]["EventCategory"] !== void 0) {
        contents.EventCategoriesList = deserializeAws_queryEventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategoriesList"]["EventCategory"]), context);
      }
      if (output["Enabled"] !== void 0) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
      }
      if (output["EventSubscriptionArn"] !== void 0) {
        contents.EventSubscriptionArn = (0, smithy_client_1.expectString)(output["EventSubscriptionArn"]);
      }
      return contents;
    };
    var deserializeAws_queryEventSubscriptionQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryEventSubscriptionsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryEventSubscription(entry, context);
      });
    };
    var deserializeAws_queryEventSubscriptionsMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        EventSubscriptionsList: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.EventSubscriptionsList === "") {
        contents.EventSubscriptionsList = [];
      } else if (output["EventSubscriptionsList"] !== void 0 && output["EventSubscriptionsList"]["EventSubscription"] !== void 0) {
        contents.EventSubscriptionsList = deserializeAws_queryEventSubscriptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["EventSubscriptionsList"]["EventSubscription"]), context);
      }
      return contents;
    };
    var deserializeAws_queryExportTask = (output, context) => {
      const contents = {
        ExportTaskIdentifier: void 0,
        SourceArn: void 0,
        ExportOnly: void 0,
        SnapshotTime: void 0,
        TaskStartTime: void 0,
        TaskEndTime: void 0,
        S3Bucket: void 0,
        S3Prefix: void 0,
        IamRoleArn: void 0,
        KmsKeyId: void 0,
        Status: void 0,
        PercentProgress: void 0,
        TotalExtractedDataInGB: void 0,
        FailureCause: void 0,
        WarningMessage: void 0
      };
      if (output["ExportTaskIdentifier"] !== void 0) {
        contents.ExportTaskIdentifier = (0, smithy_client_1.expectString)(output["ExportTaskIdentifier"]);
      }
      if (output["SourceArn"] !== void 0) {
        contents.SourceArn = (0, smithy_client_1.expectString)(output["SourceArn"]);
      }
      if (output.ExportOnly === "") {
        contents.ExportOnly = [];
      } else if (output["ExportOnly"] !== void 0 && output["ExportOnly"]["member"] !== void 0) {
        contents.ExportOnly = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["ExportOnly"]["member"]), context);
      }
      if (output["SnapshotTime"] !== void 0) {
        contents.SnapshotTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SnapshotTime"]));
      }
      if (output["TaskStartTime"] !== void 0) {
        contents.TaskStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["TaskStartTime"]));
      }
      if (output["TaskEndTime"] !== void 0) {
        contents.TaskEndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["TaskEndTime"]));
      }
      if (output["S3Bucket"] !== void 0) {
        contents.S3Bucket = (0, smithy_client_1.expectString)(output["S3Bucket"]);
      }
      if (output["S3Prefix"] !== void 0) {
        contents.S3Prefix = (0, smithy_client_1.expectString)(output["S3Prefix"]);
      }
      if (output["IamRoleArn"] !== void 0) {
        contents.IamRoleArn = (0, smithy_client_1.expectString)(output["IamRoleArn"]);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["PercentProgress"] !== void 0) {
        contents.PercentProgress = (0, smithy_client_1.strictParseInt32)(output["PercentProgress"]);
      }
      if (output["TotalExtractedDataInGB"] !== void 0) {
        contents.TotalExtractedDataInGB = (0, smithy_client_1.strictParseInt32)(output["TotalExtractedDataInGB"]);
      }
      if (output["FailureCause"] !== void 0) {
        contents.FailureCause = (0, smithy_client_1.expectString)(output["FailureCause"]);
      }
      if (output["WarningMessage"] !== void 0) {
        contents.WarningMessage = (0, smithy_client_1.expectString)(output["WarningMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExportTaskAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryExportTaskNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryExportTasksList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryExportTask(entry, context);
      });
    };
    var deserializeAws_queryExportTasksMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        ExportTasks: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.ExportTasks === "") {
        contents.ExportTasks = [];
      } else if (output["ExportTasks"] !== void 0 && output["ExportTasks"]["ExportTask"] !== void 0) {
        contents.ExportTasks = deserializeAws_queryExportTasksList((0, smithy_client_1.getArrayIfSingleItem)(output["ExportTasks"]["ExportTask"]), context);
      }
      return contents;
    };
    var deserializeAws_queryFailoverDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryFailoverGlobalClusterResult = (output, context) => {
      const contents = {
        GlobalCluster: void 0
      };
      if (output["GlobalCluster"] !== void 0) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryFailoverState = (output, context) => {
      const contents = {
        Status: void 0,
        FromDbClusterArn: void 0,
        ToDbClusterArn: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["FromDbClusterArn"] !== void 0) {
        contents.FromDbClusterArn = (0, smithy_client_1.expectString)(output["FromDbClusterArn"]);
      }
      if (output["ToDbClusterArn"] !== void 0) {
        contents.ToDbClusterArn = (0, smithy_client_1.expectString)(output["ToDbClusterArn"]);
      }
      return contents;
    };
    var deserializeAws_queryFeatureNameList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryGlobalCluster = (output, context) => {
      const contents = {
        GlobalClusterIdentifier: void 0,
        GlobalClusterResourceId: void 0,
        GlobalClusterArn: void 0,
        Status: void 0,
        Engine: void 0,
        EngineVersion: void 0,
        DatabaseName: void 0,
        StorageEncrypted: void 0,
        DeletionProtection: void 0,
        GlobalClusterMembers: void 0,
        FailoverState: void 0
      };
      if (output["GlobalClusterIdentifier"] !== void 0) {
        contents.GlobalClusterIdentifier = (0, smithy_client_1.expectString)(output["GlobalClusterIdentifier"]);
      }
      if (output["GlobalClusterResourceId"] !== void 0) {
        contents.GlobalClusterResourceId = (0, smithy_client_1.expectString)(output["GlobalClusterResourceId"]);
      }
      if (output["GlobalClusterArn"] !== void 0) {
        contents.GlobalClusterArn = (0, smithy_client_1.expectString)(output["GlobalClusterArn"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["DatabaseName"] !== void 0) {
        contents.DatabaseName = (0, smithy_client_1.expectString)(output["DatabaseName"]);
      }
      if (output["StorageEncrypted"] !== void 0) {
        contents.StorageEncrypted = (0, smithy_client_1.parseBoolean)(output["StorageEncrypted"]);
      }
      if (output["DeletionProtection"] !== void 0) {
        contents.DeletionProtection = (0, smithy_client_1.parseBoolean)(output["DeletionProtection"]);
      }
      if (output.GlobalClusterMembers === "") {
        contents.GlobalClusterMembers = [];
      } else if (output["GlobalClusterMembers"] !== void 0 && output["GlobalClusterMembers"]["GlobalClusterMember"] !== void 0) {
        contents.GlobalClusterMembers = deserializeAws_queryGlobalClusterMemberList((0, smithy_client_1.getArrayIfSingleItem)(output["GlobalClusterMembers"]["GlobalClusterMember"]), context);
      }
      if (output["FailoverState"] !== void 0) {
        contents.FailoverState = deserializeAws_queryFailoverState(output["FailoverState"], context);
      }
      return contents;
    };
    var deserializeAws_queryGlobalClusterAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryGlobalClusterList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryGlobalCluster(entry, context);
      });
    };
    var deserializeAws_queryGlobalClusterMember = (output, context) => {
      const contents = {
        DBClusterArn: void 0,
        Readers: void 0,
        IsWriter: void 0,
        GlobalWriteForwardingStatus: void 0
      };
      if (output["DBClusterArn"] !== void 0) {
        contents.DBClusterArn = (0, smithy_client_1.expectString)(output["DBClusterArn"]);
      }
      if (output.Readers === "") {
        contents.Readers = [];
      } else if (output["Readers"] !== void 0 && output["Readers"]["member"] !== void 0) {
        contents.Readers = deserializeAws_queryReadersArnList((0, smithy_client_1.getArrayIfSingleItem)(output["Readers"]["member"]), context);
      }
      if (output["IsWriter"] !== void 0) {
        contents.IsWriter = (0, smithy_client_1.parseBoolean)(output["IsWriter"]);
      }
      if (output["GlobalWriteForwardingStatus"] !== void 0) {
        contents.GlobalWriteForwardingStatus = (0, smithy_client_1.expectString)(output["GlobalWriteForwardingStatus"]);
      }
      return contents;
    };
    var deserializeAws_queryGlobalClusterMemberList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryGlobalClusterMember(entry, context);
      });
    };
    var deserializeAws_queryGlobalClusterNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryGlobalClusterQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryGlobalClustersMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        GlobalClusters: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.GlobalClusters === "") {
        contents.GlobalClusters = [];
      } else if (output["GlobalClusters"] !== void 0 && output["GlobalClusters"]["GlobalClusterMember"] !== void 0) {
        contents.GlobalClusters = deserializeAws_queryGlobalClusterList((0, smithy_client_1.getArrayIfSingleItem)(output["GlobalClusters"]["GlobalClusterMember"]), context);
      }
      return contents;
    };
    var deserializeAws_queryIamRoleMissingPermissionsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIamRoleNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInstanceQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInsufficientAvailableIPsInSubnetFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInsufficientDBClusterCapacityFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInsufficientDBInstanceCapacityFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInsufficientStorageClusterCapacityFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidCustomDBEngineVersionStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBClusterCapacityFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBClusterEndpointStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBClusterSnapshotStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBClusterStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBInstanceStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBParameterGroupStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBProxyEndpointStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBProxyStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBSecurityGroupStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBSnapshotStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBSubnetGroupFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBSubnetGroupStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidDBSubnetStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidEventSubscriptionStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidExportOnlyFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidExportSourceStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidExportTaskStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidGlobalClusterStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidOptionGroupStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidRestoreFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidS3BucketFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidSubnet = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidVPCNetworkStateFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIPRange = (output, context) => {
      const contents = {
        Status: void 0,
        CIDRIP: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["CIDRIP"] !== void 0) {
        contents.CIDRIP = (0, smithy_client_1.expectString)(output["CIDRIP"]);
      }
      return contents;
    };
    var deserializeAws_queryIPRangeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryIPRange(entry, context);
      });
    };
    var deserializeAws_queryKMSKeyNotAccessibleFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryLogTypeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryMinimumEngineVersionPerAllowedValue = (output, context) => {
      const contents = {
        AllowedValue: void 0,
        MinimumEngineVersion: void 0
      };
      if (output["AllowedValue"] !== void 0) {
        contents.AllowedValue = (0, smithy_client_1.expectString)(output["AllowedValue"]);
      }
      if (output["MinimumEngineVersion"] !== void 0) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
      }
      return contents;
    };
    var deserializeAws_queryMinimumEngineVersionPerAllowedValueList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryMinimumEngineVersionPerAllowedValue(entry, context);
      });
    };
    var deserializeAws_queryModifyCertificatesResult = (output, context) => {
      const contents = {
        Certificate: void 0
      };
      if (output["Certificate"] !== void 0) {
        contents.Certificate = deserializeAws_queryCertificate(output["Certificate"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBClusterSnapshotAttributeResult = (output, context) => {
      const contents = {
        DBClusterSnapshotAttributesResult: void 0
      };
      if (output["DBClusterSnapshotAttributesResult"] !== void 0) {
        contents.DBClusterSnapshotAttributesResult = deserializeAws_queryDBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBInstanceResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBProxyEndpointResponse = (output, context) => {
      const contents = {
        DBProxyEndpoint: void 0
      };
      if (output["DBProxyEndpoint"] !== void 0) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBProxyResponse = (output, context) => {
      const contents = {
        DBProxy: void 0
      };
      if (output["DBProxy"] !== void 0) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBProxyTargetGroupResponse = (output, context) => {
      const contents = {
        DBProxyTargetGroup: void 0
      };
      if (output["DBProxyTargetGroup"] !== void 0) {
        contents.DBProxyTargetGroup = deserializeAws_queryDBProxyTargetGroup(output["DBProxyTargetGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBSnapshotAttributeResult = (output, context) => {
      const contents = {
        DBSnapshotAttributesResult: void 0
      };
      if (output["DBSnapshotAttributesResult"] !== void 0) {
        contents.DBSnapshotAttributesResult = deserializeAws_queryDBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBSnapshotResult = (output, context) => {
      const contents = {
        DBSnapshot: void 0
      };
      if (output["DBSnapshot"] !== void 0) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyDBSubnetGroupResult = (output, context) => {
      const contents = {
        DBSubnetGroup: void 0
      };
      if (output["DBSubnetGroup"] !== void 0) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyEventSubscriptionResult = (output, context) => {
      const contents = {
        EventSubscription: void 0
      };
      if (output["EventSubscription"] !== void 0) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyGlobalClusterResult = (output, context) => {
      const contents = {
        GlobalCluster: void 0
      };
      if (output["GlobalCluster"] !== void 0) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryModifyOptionGroupResult = (output, context) => {
      const contents = {
        OptionGroup: void 0
      };
      if (output["OptionGroup"] !== void 0) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryNetworkTypeNotSupported = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryOption = (output, context) => {
      const contents = {
        OptionName: void 0,
        OptionDescription: void 0,
        Persistent: void 0,
        Permanent: void 0,
        Port: void 0,
        OptionVersion: void 0,
        OptionSettings: void 0,
        DBSecurityGroupMemberships: void 0,
        VpcSecurityGroupMemberships: void 0
      };
      if (output["OptionName"] !== void 0) {
        contents.OptionName = (0, smithy_client_1.expectString)(output["OptionName"]);
      }
      if (output["OptionDescription"] !== void 0) {
        contents.OptionDescription = (0, smithy_client_1.expectString)(output["OptionDescription"]);
      }
      if (output["Persistent"] !== void 0) {
        contents.Persistent = (0, smithy_client_1.parseBoolean)(output["Persistent"]);
      }
      if (output["Permanent"] !== void 0) {
        contents.Permanent = (0, smithy_client_1.parseBoolean)(output["Permanent"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["OptionVersion"] !== void 0) {
        contents.OptionVersion = (0, smithy_client_1.expectString)(output["OptionVersion"]);
      }
      if (output.OptionSettings === "") {
        contents.OptionSettings = [];
      } else if (output["OptionSettings"] !== void 0 && output["OptionSettings"]["OptionSetting"] !== void 0) {
        contents.OptionSettings = deserializeAws_queryOptionSettingConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionSettings"]["OptionSetting"]), context);
      }
      if (output.DBSecurityGroupMemberships === "") {
        contents.DBSecurityGroupMemberships = [];
      } else if (output["DBSecurityGroupMemberships"] !== void 0 && output["DBSecurityGroupMemberships"]["DBSecurityGroup"] !== void 0) {
        contents.DBSecurityGroupMemberships = deserializeAws_queryDBSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["DBSecurityGroupMemberships"]["DBSecurityGroup"]), context);
      }
      if (output.VpcSecurityGroupMemberships === "") {
        contents.VpcSecurityGroupMemberships = [];
      } else if (output["VpcSecurityGroupMemberships"] !== void 0 && output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"] !== void 0) {
        contents.VpcSecurityGroupMemberships = deserializeAws_queryVpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"]), context);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroup = (output, context) => {
      const contents = {
        OptionGroupName: void 0,
        OptionGroupDescription: void 0,
        EngineName: void 0,
        MajorEngineVersion: void 0,
        Options: void 0,
        AllowsVpcAndNonVpcInstanceMemberships: void 0,
        VpcId: void 0,
        OptionGroupArn: void 0
      };
      if (output["OptionGroupName"] !== void 0) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
      }
      if (output["OptionGroupDescription"] !== void 0) {
        contents.OptionGroupDescription = (0, smithy_client_1.expectString)(output["OptionGroupDescription"]);
      }
      if (output["EngineName"] !== void 0) {
        contents.EngineName = (0, smithy_client_1.expectString)(output["EngineName"]);
      }
      if (output["MajorEngineVersion"] !== void 0) {
        contents.MajorEngineVersion = (0, smithy_client_1.expectString)(output["MajorEngineVersion"]);
      }
      if (output.Options === "") {
        contents.Options = [];
      } else if (output["Options"] !== void 0 && output["Options"]["Option"] !== void 0) {
        contents.Options = deserializeAws_queryOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["Options"]["Option"]), context);
      }
      if (output["AllowsVpcAndNonVpcInstanceMemberships"] !== void 0) {
        contents.AllowsVpcAndNonVpcInstanceMemberships = (0, smithy_client_1.parseBoolean)(output["AllowsVpcAndNonVpcInstanceMemberships"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output["OptionGroupArn"] !== void 0) {
        contents.OptionGroupArn = (0, smithy_client_1.expectString)(output["OptionGroupArn"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupMembership = (output, context) => {
      const contents = {
        OptionGroupName: void 0,
        Status: void 0
      };
      if (output["OptionGroupName"] !== void 0) {
        contents.OptionGroupName = (0, smithy_client_1.expectString)(output["OptionGroupName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupMembershipList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOptionGroupMembership(entry, context);
      });
    };
    var deserializeAws_queryOptionGroupNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupOption = (output, context) => {
      const contents = {
        Name: void 0,
        Description: void 0,
        EngineName: void 0,
        MajorEngineVersion: void 0,
        MinimumRequiredMinorEngineVersion: void 0,
        PortRequired: void 0,
        DefaultPort: void 0,
        OptionsDependedOn: void 0,
        OptionsConflictsWith: void 0,
        Persistent: void 0,
        Permanent: void 0,
        RequiresAutoMinorEngineVersionUpgrade: void 0,
        VpcOnly: void 0,
        SupportsOptionVersionDowngrade: void 0,
        OptionGroupOptionSettings: void 0,
        OptionGroupOptionVersions: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["EngineName"] !== void 0) {
        contents.EngineName = (0, smithy_client_1.expectString)(output["EngineName"]);
      }
      if (output["MajorEngineVersion"] !== void 0) {
        contents.MajorEngineVersion = (0, smithy_client_1.expectString)(output["MajorEngineVersion"]);
      }
      if (output["MinimumRequiredMinorEngineVersion"] !== void 0) {
        contents.MinimumRequiredMinorEngineVersion = (0, smithy_client_1.expectString)(output["MinimumRequiredMinorEngineVersion"]);
      }
      if (output["PortRequired"] !== void 0) {
        contents.PortRequired = (0, smithy_client_1.parseBoolean)(output["PortRequired"]);
      }
      if (output["DefaultPort"] !== void 0) {
        contents.DefaultPort = (0, smithy_client_1.strictParseInt32)(output["DefaultPort"]);
      }
      if (output.OptionsDependedOn === "") {
        contents.OptionsDependedOn = [];
      } else if (output["OptionsDependedOn"] !== void 0 && output["OptionsDependedOn"]["OptionName"] !== void 0) {
        contents.OptionsDependedOn = deserializeAws_queryOptionsDependedOn((0, smithy_client_1.getArrayIfSingleItem)(output["OptionsDependedOn"]["OptionName"]), context);
      }
      if (output.OptionsConflictsWith === "") {
        contents.OptionsConflictsWith = [];
      } else if (output["OptionsConflictsWith"] !== void 0 && output["OptionsConflictsWith"]["OptionConflictName"] !== void 0) {
        contents.OptionsConflictsWith = deserializeAws_queryOptionsConflictsWith((0, smithy_client_1.getArrayIfSingleItem)(output["OptionsConflictsWith"]["OptionConflictName"]), context);
      }
      if (output["Persistent"] !== void 0) {
        contents.Persistent = (0, smithy_client_1.parseBoolean)(output["Persistent"]);
      }
      if (output["Permanent"] !== void 0) {
        contents.Permanent = (0, smithy_client_1.parseBoolean)(output["Permanent"]);
      }
      if (output["RequiresAutoMinorEngineVersionUpgrade"] !== void 0) {
        contents.RequiresAutoMinorEngineVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["RequiresAutoMinorEngineVersionUpgrade"]);
      }
      if (output["VpcOnly"] !== void 0) {
        contents.VpcOnly = (0, smithy_client_1.parseBoolean)(output["VpcOnly"]);
      }
      if (output["SupportsOptionVersionDowngrade"] !== void 0) {
        contents.SupportsOptionVersionDowngrade = (0, smithy_client_1.parseBoolean)(output["SupportsOptionVersionDowngrade"]);
      }
      if (output.OptionGroupOptionSettings === "") {
        contents.OptionGroupOptionSettings = [];
      } else if (output["OptionGroupOptionSettings"] !== void 0 && output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"] !== void 0) {
        contents.OptionGroupOptionSettings = deserializeAws_queryOptionGroupOptionSettingsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"]), context);
      }
      if (output.OptionGroupOptionVersions === "") {
        contents.OptionGroupOptionVersions = [];
      } else if (output["OptionGroupOptionVersions"] !== void 0 && output["OptionGroupOptionVersions"]["OptionVersion"] !== void 0) {
        contents.OptionGroupOptionVersions = deserializeAws_queryOptionGroupOptionVersionsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupOptionVersions"]["OptionVersion"]), context);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupOptionSetting = (output, context) => {
      const contents = {
        SettingName: void 0,
        SettingDescription: void 0,
        DefaultValue: void 0,
        ApplyType: void 0,
        AllowedValues: void 0,
        IsModifiable: void 0,
        IsRequired: void 0,
        MinimumEngineVersionPerAllowedValue: void 0
      };
      if (output["SettingName"] !== void 0) {
        contents.SettingName = (0, smithy_client_1.expectString)(output["SettingName"]);
      }
      if (output["SettingDescription"] !== void 0) {
        contents.SettingDescription = (0, smithy_client_1.expectString)(output["SettingDescription"]);
      }
      if (output["DefaultValue"] !== void 0) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
      }
      if (output["ApplyType"] !== void 0) {
        contents.ApplyType = (0, smithy_client_1.expectString)(output["ApplyType"]);
      }
      if (output["AllowedValues"] !== void 0) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
      }
      if (output["IsModifiable"] !== void 0) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
      }
      if (output["IsRequired"] !== void 0) {
        contents.IsRequired = (0, smithy_client_1.parseBoolean)(output["IsRequired"]);
      }
      if (output.MinimumEngineVersionPerAllowedValue === "") {
        contents.MinimumEngineVersionPerAllowedValue = [];
      } else if (output["MinimumEngineVersionPerAllowedValue"] !== void 0 && output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"] !== void 0) {
        contents.MinimumEngineVersionPerAllowedValue = deserializeAws_queryMinimumEngineVersionPerAllowedValueList((0, smithy_client_1.getArrayIfSingleItem)(output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"]), context);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupOptionSettingsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOptionGroupOptionSetting(entry, context);
      });
    };
    var deserializeAws_queryOptionGroupOptionsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOptionGroupOption(entry, context);
      });
    };
    var deserializeAws_queryOptionGroupOptionsMessage = (output, context) => {
      const contents = {
        OptionGroupOptions: void 0,
        Marker: void 0
      };
      if (output.OptionGroupOptions === "") {
        contents.OptionGroupOptions = [];
      } else if (output["OptionGroupOptions"] !== void 0 && output["OptionGroupOptions"]["OptionGroupOption"] !== void 0) {
        contents.OptionGroupOptions = deserializeAws_queryOptionGroupOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupOptions"]["OptionGroupOption"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupOptionVersionsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOptionVersion(entry, context);
      });
    };
    var deserializeAws_queryOptionGroupQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroups = (output, context) => {
      const contents = {
        OptionGroupsList: void 0,
        Marker: void 0
      };
      if (output.OptionGroupsList === "") {
        contents.OptionGroupsList = [];
      } else if (output["OptionGroupsList"] !== void 0 && output["OptionGroupsList"]["OptionGroup"] !== void 0) {
        contents.OptionGroupsList = deserializeAws_queryOptionGroupsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionGroupsList"]["OptionGroup"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionGroupsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOptionGroup(entry, context);
      });
    };
    var deserializeAws_queryOptionsConflictsWith = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryOptionsDependedOn = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryOptionSetting = (output, context) => {
      const contents = {
        Name: void 0,
        Value: void 0,
        DefaultValue: void 0,
        Description: void 0,
        ApplyType: void 0,
        DataType: void 0,
        AllowedValues: void 0,
        IsModifiable: void 0,
        IsCollection: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      if (output["DefaultValue"] !== void 0) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["ApplyType"] !== void 0) {
        contents.ApplyType = (0, smithy_client_1.expectString)(output["ApplyType"]);
      }
      if (output["DataType"] !== void 0) {
        contents.DataType = (0, smithy_client_1.expectString)(output["DataType"]);
      }
      if (output["AllowedValues"] !== void 0) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
      }
      if (output["IsModifiable"] !== void 0) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
      }
      if (output["IsCollection"] !== void 0) {
        contents.IsCollection = (0, smithy_client_1.parseBoolean)(output["IsCollection"]);
      }
      return contents;
    };
    var deserializeAws_queryOptionSettingConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOptionSetting(entry, context);
      });
    };
    var deserializeAws_queryOptionsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOption(entry, context);
      });
    };
    var deserializeAws_queryOptionVersion = (output, context) => {
      const contents = {
        Version: void 0,
        IsDefault: void 0
      };
      if (output["Version"] !== void 0) {
        contents.Version = (0, smithy_client_1.expectString)(output["Version"]);
      }
      if (output["IsDefault"] !== void 0) {
        contents.IsDefault = (0, smithy_client_1.parseBoolean)(output["IsDefault"]);
      }
      return contents;
    };
    var deserializeAws_queryOrderableDBInstanceOption = (output, context) => {
      const contents = {
        Engine: void 0,
        EngineVersion: void 0,
        DBInstanceClass: void 0,
        LicenseModel: void 0,
        AvailabilityZoneGroup: void 0,
        AvailabilityZones: void 0,
        MultiAZCapable: void 0,
        ReadReplicaCapable: void 0,
        Vpc: void 0,
        SupportsStorageEncryption: void 0,
        StorageType: void 0,
        SupportsIops: void 0,
        SupportsEnhancedMonitoring: void 0,
        SupportsIAMDatabaseAuthentication: void 0,
        SupportsPerformanceInsights: void 0,
        MinStorageSize: void 0,
        MaxStorageSize: void 0,
        MinIopsPerDbInstance: void 0,
        MaxIopsPerDbInstance: void 0,
        MinIopsPerGib: void 0,
        MaxIopsPerGib: void 0,
        AvailableProcessorFeatures: void 0,
        SupportedEngineModes: void 0,
        SupportsStorageAutoscaling: void 0,
        SupportsKerberosAuthentication: void 0,
        OutpostCapable: void 0,
        SupportedActivityStreamModes: void 0,
        SupportsGlobalDatabases: void 0,
        SupportsClusters: void 0,
        SupportedNetworkTypes: void 0
      };
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["DBInstanceClass"] !== void 0) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
      }
      if (output["LicenseModel"] !== void 0) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
      }
      if (output["AvailabilityZoneGroup"] !== void 0) {
        contents.AvailabilityZoneGroup = (0, smithy_client_1.expectString)(output["AvailabilityZoneGroup"]);
      }
      if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
      } else if (output["AvailabilityZones"] !== void 0 && output["AvailabilityZones"]["AvailabilityZone"] !== void 0) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZoneList((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["AvailabilityZone"]), context);
      }
      if (output["MultiAZCapable"] !== void 0) {
        contents.MultiAZCapable = (0, smithy_client_1.parseBoolean)(output["MultiAZCapable"]);
      }
      if (output["ReadReplicaCapable"] !== void 0) {
        contents.ReadReplicaCapable = (0, smithy_client_1.parseBoolean)(output["ReadReplicaCapable"]);
      }
      if (output["Vpc"] !== void 0) {
        contents.Vpc = (0, smithy_client_1.parseBoolean)(output["Vpc"]);
      }
      if (output["SupportsStorageEncryption"] !== void 0) {
        contents.SupportsStorageEncryption = (0, smithy_client_1.parseBoolean)(output["SupportsStorageEncryption"]);
      }
      if (output["StorageType"] !== void 0) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
      }
      if (output["SupportsIops"] !== void 0) {
        contents.SupportsIops = (0, smithy_client_1.parseBoolean)(output["SupportsIops"]);
      }
      if (output["SupportsEnhancedMonitoring"] !== void 0) {
        contents.SupportsEnhancedMonitoring = (0, smithy_client_1.parseBoolean)(output["SupportsEnhancedMonitoring"]);
      }
      if (output["SupportsIAMDatabaseAuthentication"] !== void 0) {
        contents.SupportsIAMDatabaseAuthentication = (0, smithy_client_1.parseBoolean)(output["SupportsIAMDatabaseAuthentication"]);
      }
      if (output["SupportsPerformanceInsights"] !== void 0) {
        contents.SupportsPerformanceInsights = (0, smithy_client_1.parseBoolean)(output["SupportsPerformanceInsights"]);
      }
      if (output["MinStorageSize"] !== void 0) {
        contents.MinStorageSize = (0, smithy_client_1.strictParseInt32)(output["MinStorageSize"]);
      }
      if (output["MaxStorageSize"] !== void 0) {
        contents.MaxStorageSize = (0, smithy_client_1.strictParseInt32)(output["MaxStorageSize"]);
      }
      if (output["MinIopsPerDbInstance"] !== void 0) {
        contents.MinIopsPerDbInstance = (0, smithy_client_1.strictParseInt32)(output["MinIopsPerDbInstance"]);
      }
      if (output["MaxIopsPerDbInstance"] !== void 0) {
        contents.MaxIopsPerDbInstance = (0, smithy_client_1.strictParseInt32)(output["MaxIopsPerDbInstance"]);
      }
      if (output["MinIopsPerGib"] !== void 0) {
        contents.MinIopsPerGib = (0, smithy_client_1.strictParseFloat)(output["MinIopsPerGib"]);
      }
      if (output["MaxIopsPerGib"] !== void 0) {
        contents.MaxIopsPerGib = (0, smithy_client_1.strictParseFloat)(output["MaxIopsPerGib"]);
      }
      if (output.AvailableProcessorFeatures === "") {
        contents.AvailableProcessorFeatures = [];
      } else if (output["AvailableProcessorFeatures"] !== void 0 && output["AvailableProcessorFeatures"]["AvailableProcessorFeature"] !== void 0) {
        contents.AvailableProcessorFeatures = deserializeAws_queryAvailableProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["AvailableProcessorFeatures"]["AvailableProcessorFeature"]), context);
      }
      if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
      } else if (output["SupportedEngineModes"] !== void 0 && output["SupportedEngineModes"]["member"] !== void 0) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
      }
      if (output["SupportsStorageAutoscaling"] !== void 0) {
        contents.SupportsStorageAutoscaling = (0, smithy_client_1.parseBoolean)(output["SupportsStorageAutoscaling"]);
      }
      if (output["SupportsKerberosAuthentication"] !== void 0) {
        contents.SupportsKerberosAuthentication = (0, smithy_client_1.parseBoolean)(output["SupportsKerberosAuthentication"]);
      }
      if (output["OutpostCapable"] !== void 0) {
        contents.OutpostCapable = (0, smithy_client_1.parseBoolean)(output["OutpostCapable"]);
      }
      if (output.SupportedActivityStreamModes === "") {
        contents.SupportedActivityStreamModes = [];
      } else if (output["SupportedActivityStreamModes"] !== void 0 && output["SupportedActivityStreamModes"]["member"] !== void 0) {
        contents.SupportedActivityStreamModes = deserializeAws_queryActivityStreamModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedActivityStreamModes"]["member"]), context);
      }
      if (output["SupportsGlobalDatabases"] !== void 0) {
        contents.SupportsGlobalDatabases = (0, smithy_client_1.parseBoolean)(output["SupportsGlobalDatabases"]);
      }
      if (output["SupportsClusters"] !== void 0) {
        contents.SupportsClusters = (0, smithy_client_1.parseBoolean)(output["SupportsClusters"]);
      }
      if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
      } else if (output["SupportedNetworkTypes"] !== void 0 && output["SupportedNetworkTypes"]["member"] !== void 0) {
        contents.SupportedNetworkTypes = deserializeAws_queryStringList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNetworkTypes"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryOrderableDBInstanceOptionsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryOrderableDBInstanceOption(entry, context);
      });
    };
    var deserializeAws_queryOrderableDBInstanceOptionsMessage = (output, context) => {
      const contents = {
        OrderableDBInstanceOptions: void 0,
        Marker: void 0
      };
      if (output.OrderableDBInstanceOptions === "") {
        contents.OrderableDBInstanceOptions = [];
      } else if (output["OrderableDBInstanceOptions"] !== void 0 && output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"] !== void 0) {
        contents.OrderableDBInstanceOptions = deserializeAws_queryOrderableDBInstanceOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryOutpost = (output, context) => {
      const contents = {
        Arn: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryParameter = (output, context) => {
      const contents = {
        ParameterName: void 0,
        ParameterValue: void 0,
        Description: void 0,
        Source: void 0,
        ApplyType: void 0,
        DataType: void 0,
        AllowedValues: void 0,
        IsModifiable: void 0,
        MinimumEngineVersion: void 0,
        ApplyMethod: void 0,
        SupportedEngineModes: void 0
      };
      if (output["ParameterName"] !== void 0) {
        contents.ParameterName = (0, smithy_client_1.expectString)(output["ParameterName"]);
      }
      if (output["ParameterValue"] !== void 0) {
        contents.ParameterValue = (0, smithy_client_1.expectString)(output["ParameterValue"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["Source"] !== void 0) {
        contents.Source = (0, smithy_client_1.expectString)(output["Source"]);
      }
      if (output["ApplyType"] !== void 0) {
        contents.ApplyType = (0, smithy_client_1.expectString)(output["ApplyType"]);
      }
      if (output["DataType"] !== void 0) {
        contents.DataType = (0, smithy_client_1.expectString)(output["DataType"]);
      }
      if (output["AllowedValues"] !== void 0) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
      }
      if (output["IsModifiable"] !== void 0) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
      }
      if (output["MinimumEngineVersion"] !== void 0) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
      }
      if (output["ApplyMethod"] !== void 0) {
        contents.ApplyMethod = (0, smithy_client_1.expectString)(output["ApplyMethod"]);
      }
      if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
      } else if (output["SupportedEngineModes"] !== void 0 && output["SupportedEngineModes"]["member"] !== void 0) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryParametersList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryParameter(entry, context);
      });
    };
    var deserializeAws_queryPendingCloudwatchLogsExports = (output, context) => {
      const contents = {
        LogTypesToEnable: void 0,
        LogTypesToDisable: void 0
      };
      if (output.LogTypesToEnable === "") {
        contents.LogTypesToEnable = [];
      } else if (output["LogTypesToEnable"] !== void 0 && output["LogTypesToEnable"]["member"] !== void 0) {
        contents.LogTypesToEnable = deserializeAws_queryLogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["LogTypesToEnable"]["member"]), context);
      }
      if (output.LogTypesToDisable === "") {
        contents.LogTypesToDisable = [];
      } else if (output["LogTypesToDisable"] !== void 0 && output["LogTypesToDisable"]["member"] !== void 0) {
        contents.LogTypesToDisable = deserializeAws_queryLogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["LogTypesToDisable"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryPendingMaintenanceAction = (output, context) => {
      const contents = {
        Action: void 0,
        AutoAppliedAfterDate: void 0,
        ForcedApplyDate: void 0,
        OptInStatus: void 0,
        CurrentApplyDate: void 0,
        Description: void 0
      };
      if (output["Action"] !== void 0) {
        contents.Action = (0, smithy_client_1.expectString)(output["Action"]);
      }
      if (output["AutoAppliedAfterDate"] !== void 0) {
        contents.AutoAppliedAfterDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["AutoAppliedAfterDate"]));
      }
      if (output["ForcedApplyDate"] !== void 0) {
        contents.ForcedApplyDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ForcedApplyDate"]));
      }
      if (output["OptInStatus"] !== void 0) {
        contents.OptInStatus = (0, smithy_client_1.expectString)(output["OptInStatus"]);
      }
      if (output["CurrentApplyDate"] !== void 0) {
        contents.CurrentApplyDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CurrentApplyDate"]));
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      return contents;
    };
    var deserializeAws_queryPendingMaintenanceActionDetails = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryPendingMaintenanceAction(entry, context);
      });
    };
    var deserializeAws_queryPendingMaintenanceActions = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryResourcePendingMaintenanceActions(entry, context);
      });
    };
    var deserializeAws_queryPendingMaintenanceActionsMessage = (output, context) => {
      const contents = {
        PendingMaintenanceActions: void 0,
        Marker: void 0
      };
      if (output.PendingMaintenanceActions === "") {
        contents.PendingMaintenanceActions = [];
      } else if (output["PendingMaintenanceActions"] !== void 0 && output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"] !== void 0) {
        contents.PendingMaintenanceActions = deserializeAws_queryPendingMaintenanceActions((0, smithy_client_1.getArrayIfSingleItem)(output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryPendingModifiedValues = (output, context) => {
      const contents = {
        DBInstanceClass: void 0,
        AllocatedStorage: void 0,
        MasterUserPassword: void 0,
        Port: void 0,
        BackupRetentionPeriod: void 0,
        MultiAZ: void 0,
        EngineVersion: void 0,
        LicenseModel: void 0,
        Iops: void 0,
        DBInstanceIdentifier: void 0,
        StorageType: void 0,
        CACertificateIdentifier: void 0,
        DBSubnetGroupName: void 0,
        PendingCloudwatchLogsExports: void 0,
        ProcessorFeatures: void 0,
        IAMDatabaseAuthenticationEnabled: void 0,
        AutomationMode: void 0,
        ResumeFullAutomationModeTime: void 0
      };
      if (output["DBInstanceClass"] !== void 0) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
      }
      if (output["AllocatedStorage"] !== void 0) {
        contents.AllocatedStorage = (0, smithy_client_1.strictParseInt32)(output["AllocatedStorage"]);
      }
      if (output["MasterUserPassword"] !== void 0) {
        contents.MasterUserPassword = (0, smithy_client_1.expectString)(output["MasterUserPassword"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["BackupRetentionPeriod"] !== void 0) {
        contents.BackupRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["BackupRetentionPeriod"]);
      }
      if (output["MultiAZ"] !== void 0) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["LicenseModel"] !== void 0) {
        contents.LicenseModel = (0, smithy_client_1.expectString)(output["LicenseModel"]);
      }
      if (output["Iops"] !== void 0) {
        contents.Iops = (0, smithy_client_1.strictParseInt32)(output["Iops"]);
      }
      if (output["DBInstanceIdentifier"] !== void 0) {
        contents.DBInstanceIdentifier = (0, smithy_client_1.expectString)(output["DBInstanceIdentifier"]);
      }
      if (output["StorageType"] !== void 0) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
      }
      if (output["CACertificateIdentifier"] !== void 0) {
        contents.CACertificateIdentifier = (0, smithy_client_1.expectString)(output["CACertificateIdentifier"]);
      }
      if (output["DBSubnetGroupName"] !== void 0) {
        contents.DBSubnetGroupName = (0, smithy_client_1.expectString)(output["DBSubnetGroupName"]);
      }
      if (output["PendingCloudwatchLogsExports"] !== void 0) {
        contents.PendingCloudwatchLogsExports = deserializeAws_queryPendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
      }
      if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
      } else if (output["ProcessorFeatures"] !== void 0 && output["ProcessorFeatures"]["ProcessorFeature"] !== void 0) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ProcessorFeatures"]["ProcessorFeature"]), context);
      }
      if (output["IAMDatabaseAuthenticationEnabled"] !== void 0) {
        contents.IAMDatabaseAuthenticationEnabled = (0, smithy_client_1.parseBoolean)(output["IAMDatabaseAuthenticationEnabled"]);
      }
      if (output["AutomationMode"] !== void 0) {
        contents.AutomationMode = (0, smithy_client_1.expectString)(output["AutomationMode"]);
      }
      if (output["ResumeFullAutomationModeTime"] !== void 0) {
        contents.ResumeFullAutomationModeTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ResumeFullAutomationModeTime"]));
      }
      return contents;
    };
    var deserializeAws_queryPointInTimeRestoreNotEnabledFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryProcessorFeature = (output, context) => {
      const contents = {
        Name: void 0,
        Value: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_queryProcessorFeatureList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryProcessorFeature(entry, context);
      });
    };
    var deserializeAws_queryPromoteReadReplicaDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryPromoteReadReplicaResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryProvisionedIopsNotAvailableInAZFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPurchaseReservedDBInstancesOfferingResult = (output, context) => {
      const contents = {
        ReservedDBInstance: void 0
      };
      if (output["ReservedDBInstance"] !== void 0) {
        contents.ReservedDBInstance = deserializeAws_queryReservedDBInstance(output["ReservedDBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryRange = (output, context) => {
      const contents = {
        From: void 0,
        To: void 0,
        Step: void 0
      };
      if (output["From"] !== void 0) {
        contents.From = (0, smithy_client_1.strictParseInt32)(output["From"]);
      }
      if (output["To"] !== void 0) {
        contents.To = (0, smithy_client_1.strictParseInt32)(output["To"]);
      }
      if (output["Step"] !== void 0) {
        contents.Step = (0, smithy_client_1.strictParseInt32)(output["Step"]);
      }
      return contents;
    };
    var deserializeAws_queryRangeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryRange(entry, context);
      });
    };
    var deserializeAws_queryReadersArnList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryReadReplicaDBClusterIdentifierList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryReadReplicaDBInstanceIdentifierList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryReadReplicaIdentifierList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryRebootDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryRebootDBInstanceResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryRecurringCharge = (output, context) => {
      const contents = {
        RecurringChargeAmount: void 0,
        RecurringChargeFrequency: void 0
      };
      if (output["RecurringChargeAmount"] !== void 0) {
        contents.RecurringChargeAmount = (0, smithy_client_1.strictParseFloat)(output["RecurringChargeAmount"]);
      }
      if (output["RecurringChargeFrequency"] !== void 0) {
        contents.RecurringChargeFrequency = (0, smithy_client_1.expectString)(output["RecurringChargeFrequency"]);
      }
      return contents;
    };
    var deserializeAws_queryRecurringChargeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryRecurringCharge(entry, context);
      });
    };
    var deserializeAws_queryRegisterDBProxyTargetsResponse = (output, context) => {
      const contents = {
        DBProxyTargets: void 0
      };
      if (output.DBProxyTargets === "") {
        contents.DBProxyTargets = [];
      } else if (output["DBProxyTargets"] !== void 0 && output["DBProxyTargets"]["member"] !== void 0) {
        contents.DBProxyTargets = deserializeAws_queryTargetList((0, smithy_client_1.getArrayIfSingleItem)(output["DBProxyTargets"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryRemoveFromGlobalClusterResult = (output, context) => {
      const contents = {
        GlobalCluster: void 0
      };
      if (output["GlobalCluster"] !== void 0) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryRemoveSourceIdentifierFromSubscriptionResult = (output, context) => {
      const contents = {
        EventSubscription: void 0
      };
      if (output["EventSubscription"] !== void 0) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstance = (output, context) => {
      const contents = {
        ReservedDBInstanceId: void 0,
        ReservedDBInstancesOfferingId: void 0,
        DBInstanceClass: void 0,
        StartTime: void 0,
        Duration: void 0,
        FixedPrice: void 0,
        UsagePrice: void 0,
        CurrencyCode: void 0,
        DBInstanceCount: void 0,
        ProductDescription: void 0,
        OfferingType: void 0,
        MultiAZ: void 0,
        State: void 0,
        RecurringCharges: void 0,
        ReservedDBInstanceArn: void 0,
        LeaseId: void 0
      };
      if (output["ReservedDBInstanceId"] !== void 0) {
        contents.ReservedDBInstanceId = (0, smithy_client_1.expectString)(output["ReservedDBInstanceId"]);
      }
      if (output["ReservedDBInstancesOfferingId"] !== void 0) {
        contents.ReservedDBInstancesOfferingId = (0, smithy_client_1.expectString)(output["ReservedDBInstancesOfferingId"]);
      }
      if (output["DBInstanceClass"] !== void 0) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
      }
      if (output["StartTime"] !== void 0) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["StartTime"]));
      }
      if (output["Duration"] !== void 0) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
      }
      if (output["FixedPrice"] !== void 0) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
      }
      if (output["UsagePrice"] !== void 0) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
      }
      if (output["CurrencyCode"] !== void 0) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["CurrencyCode"]);
      }
      if (output["DBInstanceCount"] !== void 0) {
        contents.DBInstanceCount = (0, smithy_client_1.strictParseInt32)(output["DBInstanceCount"]);
      }
      if (output["ProductDescription"] !== void 0) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["ProductDescription"]);
      }
      if (output["OfferingType"] !== void 0) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
      }
      if (output["MultiAZ"] !== void 0) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
      }
      if (output["State"] !== void 0) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
      }
      if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
      } else if (output["RecurringCharges"] !== void 0 && output["RecurringCharges"]["RecurringCharge"] !== void 0) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
      }
      if (output["ReservedDBInstanceArn"] !== void 0) {
        contents.ReservedDBInstanceArn = (0, smithy_client_1.expectString)(output["ReservedDBInstanceArn"]);
      }
      if (output["LeaseId"] !== void 0) {
        contents.LeaseId = (0, smithy_client_1.expectString)(output["LeaseId"]);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstanceAlreadyExistsFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstanceList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryReservedDBInstance(entry, context);
      });
    };
    var deserializeAws_queryReservedDBInstanceMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        ReservedDBInstances: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.ReservedDBInstances === "") {
        contents.ReservedDBInstances = [];
      } else if (output["ReservedDBInstances"] !== void 0 && output["ReservedDBInstances"]["ReservedDBInstance"] !== void 0) {
        contents.ReservedDBInstances = deserializeAws_queryReservedDBInstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedDBInstances"]["ReservedDBInstance"]), context);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstanceNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstanceQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstancesOffering = (output, context) => {
      const contents = {
        ReservedDBInstancesOfferingId: void 0,
        DBInstanceClass: void 0,
        Duration: void 0,
        FixedPrice: void 0,
        UsagePrice: void 0,
        CurrencyCode: void 0,
        ProductDescription: void 0,
        OfferingType: void 0,
        MultiAZ: void 0,
        RecurringCharges: void 0
      };
      if (output["ReservedDBInstancesOfferingId"] !== void 0) {
        contents.ReservedDBInstancesOfferingId = (0, smithy_client_1.expectString)(output["ReservedDBInstancesOfferingId"]);
      }
      if (output["DBInstanceClass"] !== void 0) {
        contents.DBInstanceClass = (0, smithy_client_1.expectString)(output["DBInstanceClass"]);
      }
      if (output["Duration"] !== void 0) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
      }
      if (output["FixedPrice"] !== void 0) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
      }
      if (output["UsagePrice"] !== void 0) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
      }
      if (output["CurrencyCode"] !== void 0) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["CurrencyCode"]);
      }
      if (output["ProductDescription"] !== void 0) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["ProductDescription"]);
      }
      if (output["OfferingType"] !== void 0) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
      }
      if (output["MultiAZ"] !== void 0) {
        contents.MultiAZ = (0, smithy_client_1.parseBoolean)(output["MultiAZ"]);
      }
      if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
      } else if (output["RecurringCharges"] !== void 0 && output["RecurringCharges"]["RecurringCharge"] !== void 0) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstancesOfferingList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryReservedDBInstancesOffering(entry, context);
      });
    };
    var deserializeAws_queryReservedDBInstancesOfferingMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        ReservedDBInstancesOfferings: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.ReservedDBInstancesOfferings === "") {
        contents.ReservedDBInstancesOfferings = [];
      } else if (output["ReservedDBInstancesOfferings"] !== void 0 && output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"] !== void 0) {
        contents.ReservedDBInstancesOfferings = deserializeAws_queryReservedDBInstancesOfferingList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"]), context);
      }
      return contents;
    };
    var deserializeAws_queryReservedDBInstancesOfferingNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryResourceNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryResourcePendingMaintenanceActions = (output, context) => {
      const contents = {
        ResourceIdentifier: void 0,
        PendingMaintenanceActionDetails: void 0
      };
      if (output["ResourceIdentifier"] !== void 0) {
        contents.ResourceIdentifier = (0, smithy_client_1.expectString)(output["ResourceIdentifier"]);
      }
      if (output.PendingMaintenanceActionDetails === "") {
        contents.PendingMaintenanceActionDetails = [];
      } else if (output["PendingMaintenanceActionDetails"] !== void 0 && output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"] !== void 0) {
        contents.PendingMaintenanceActionDetails = deserializeAws_queryPendingMaintenanceActionDetails((0, smithy_client_1.getArrayIfSingleItem)(output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"]), context);
      }
      return contents;
    };
    var deserializeAws_queryRestoreDBClusterFromS3Result = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryRestoreDBClusterFromSnapshotResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryRestoreDBClusterToPointInTimeResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryRestoreDBInstanceFromDBSnapshotResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryRestoreDBInstanceFromS3Result = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryRestoreDBInstanceToPointInTimeResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryRestoreWindow = (output, context) => {
      const contents = {
        EarliestTime: void 0,
        LatestTime: void 0
      };
      if (output["EarliestTime"] !== void 0) {
        contents.EarliestTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EarliestTime"]));
      }
      if (output["LatestTime"] !== void 0) {
        contents.LatestTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LatestTime"]));
      }
      return contents;
    };
    var deserializeAws_queryRevokeDBSecurityGroupIngressResult = (output, context) => {
      const contents = {
        DBSecurityGroup: void 0
      };
      if (output["DBSecurityGroup"] !== void 0) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
      }
      return contents;
    };
    var deserializeAws_queryScalingConfigurationInfo = (output, context) => {
      const contents = {
        MinCapacity: void 0,
        MaxCapacity: void 0,
        AutoPause: void 0,
        SecondsUntilAutoPause: void 0,
        TimeoutAction: void 0,
        SecondsBeforeTimeout: void 0
      };
      if (output["MinCapacity"] !== void 0) {
        contents.MinCapacity = (0, smithy_client_1.strictParseInt32)(output["MinCapacity"]);
      }
      if (output["MaxCapacity"] !== void 0) {
        contents.MaxCapacity = (0, smithy_client_1.strictParseInt32)(output["MaxCapacity"]);
      }
      if (output["AutoPause"] !== void 0) {
        contents.AutoPause = (0, smithy_client_1.parseBoolean)(output["AutoPause"]);
      }
      if (output["SecondsUntilAutoPause"] !== void 0) {
        contents.SecondsUntilAutoPause = (0, smithy_client_1.strictParseInt32)(output["SecondsUntilAutoPause"]);
      }
      if (output["TimeoutAction"] !== void 0) {
        contents.TimeoutAction = (0, smithy_client_1.expectString)(output["TimeoutAction"]);
      }
      if (output["SecondsBeforeTimeout"] !== void 0) {
        contents.SecondsBeforeTimeout = (0, smithy_client_1.strictParseInt32)(output["SecondsBeforeTimeout"]);
      }
      return contents;
    };
    var deserializeAws_queryServerlessV2ScalingConfigurationInfo = (output, context) => {
      const contents = {
        MinCapacity: void 0,
        MaxCapacity: void 0
      };
      if (output["MinCapacity"] !== void 0) {
        contents.MinCapacity = (0, smithy_client_1.strictParseFloat)(output["MinCapacity"]);
      }
      if (output["MaxCapacity"] !== void 0) {
        contents.MaxCapacity = (0, smithy_client_1.strictParseFloat)(output["MaxCapacity"]);
      }
      return contents;
    };
    var deserializeAws_querySharedSnapshotQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySnapshotQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySNSInvalidTopicFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySNSNoAuthorizationFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySNSTopicArnNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySourceIdsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_querySourceNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySourceRegion = (output, context) => {
      const contents = {
        RegionName: void 0,
        Endpoint: void 0,
        Status: void 0,
        SupportsDBInstanceAutomatedBackupsReplication: void 0
      };
      if (output["RegionName"] !== void 0) {
        contents.RegionName = (0, smithy_client_1.expectString)(output["RegionName"]);
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = (0, smithy_client_1.expectString)(output["Endpoint"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["SupportsDBInstanceAutomatedBackupsReplication"] !== void 0) {
        contents.SupportsDBInstanceAutomatedBackupsReplication = (0, smithy_client_1.parseBoolean)(output["SupportsDBInstanceAutomatedBackupsReplication"]);
      }
      return contents;
    };
    var deserializeAws_querySourceRegionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_querySourceRegion(entry, context);
      });
    };
    var deserializeAws_querySourceRegionMessage = (output, context) => {
      const contents = {
        Marker: void 0,
        SourceRegions: void 0
      };
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.SourceRegions === "") {
        contents.SourceRegions = [];
      } else if (output["SourceRegions"] !== void 0 && output["SourceRegions"]["SourceRegion"] !== void 0) {
        contents.SourceRegions = deserializeAws_querySourceRegionList((0, smithy_client_1.getArrayIfSingleItem)(output["SourceRegions"]["SourceRegion"]), context);
      }
      return contents;
    };
    var deserializeAws_queryStartActivityStreamResponse = (output, context) => {
      const contents = {
        KmsKeyId: void 0,
        KinesisStreamName: void 0,
        Status: void 0,
        Mode: void 0,
        ApplyImmediately: void 0,
        EngineNativeAuditFieldsIncluded: void 0
      };
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["KinesisStreamName"] !== void 0) {
        contents.KinesisStreamName = (0, smithy_client_1.expectString)(output["KinesisStreamName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Mode"] !== void 0) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
      }
      if (output["ApplyImmediately"] !== void 0) {
        contents.ApplyImmediately = (0, smithy_client_1.parseBoolean)(output["ApplyImmediately"]);
      }
      if (output["EngineNativeAuditFieldsIncluded"] !== void 0) {
        contents.EngineNativeAuditFieldsIncluded = (0, smithy_client_1.parseBoolean)(output["EngineNativeAuditFieldsIncluded"]);
      }
      return contents;
    };
    var deserializeAws_queryStartDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationResult = (output, context) => {
      const contents = {
        DBInstanceAutomatedBackup: void 0
      };
      if (output["DBInstanceAutomatedBackup"] !== void 0) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
      }
      return contents;
    };
    var deserializeAws_queryStartDBInstanceResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryStopActivityStreamResponse = (output, context) => {
      const contents = {
        KmsKeyId: void 0,
        KinesisStreamName: void 0,
        Status: void 0
      };
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["KinesisStreamName"] !== void 0) {
        contents.KinesisStreamName = (0, smithy_client_1.expectString)(output["KinesisStreamName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryStopDBClusterResult = (output, context) => {
      const contents = {
        DBCluster: void 0
      };
      if (output["DBCluster"] !== void 0) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
      }
      return contents;
    };
    var deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationResult = (output, context) => {
      const contents = {
        DBInstanceAutomatedBackup: void 0
      };
      if (output["DBInstanceAutomatedBackup"] !== void 0) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
      }
      return contents;
    };
    var deserializeAws_queryStopDBInstanceResult = (output, context) => {
      const contents = {
        DBInstance: void 0
      };
      if (output["DBInstance"] !== void 0) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryStorageQuotaExceededFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryStorageTypeNotSupportedFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryStringList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_querySubnet = (output, context) => {
      const contents = {
        SubnetIdentifier: void 0,
        SubnetAvailabilityZone: void 0,
        SubnetOutpost: void 0,
        SubnetStatus: void 0
      };
      if (output["SubnetIdentifier"] !== void 0) {
        contents.SubnetIdentifier = (0, smithy_client_1.expectString)(output["SubnetIdentifier"]);
      }
      if (output["SubnetAvailabilityZone"] !== void 0) {
        contents.SubnetAvailabilityZone = deserializeAws_queryAvailabilityZone(output["SubnetAvailabilityZone"], context);
      }
      if (output["SubnetOutpost"] !== void 0) {
        contents.SubnetOutpost = deserializeAws_queryOutpost(output["SubnetOutpost"], context);
      }
      if (output["SubnetStatus"] !== void 0) {
        contents.SubnetStatus = (0, smithy_client_1.expectString)(output["SubnetStatus"]);
      }
      return contents;
    };
    var deserializeAws_querySubnetAlreadyInUse = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySubnetList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_querySubnet(entry, context);
      });
    };
    var deserializeAws_querySubscriptionAlreadyExistFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySubscriptionCategoryNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySubscriptionNotFoundFault = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_querySupportedCharacterSetsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryCharacterSet(entry, context);
      });
    };
    var deserializeAws_querySupportedTimezonesList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryTimezone(entry, context);
      });
    };
    var deserializeAws_queryTag = (output, context) => {
      const contents = {
        Key: void 0,
        Value: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_queryTagList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryTag(entry, context);
      });
    };
    var deserializeAws_queryTagListMessage = (output, context) => {
      const contents = {
        TagList: void 0
      };
      if (output.TagList === "") {
        contents.TagList = [];
      } else if (output["TagList"] !== void 0 && output["TagList"]["Tag"] !== void 0) {
        contents.TagList = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
      }
      return contents;
    };
    var deserializeAws_queryTargetGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBProxyTargetGroup(entry, context);
      });
    };
    var deserializeAws_queryTargetHealth = (output, context) => {
      const contents = {
        State: void 0,
        Reason: void 0,
        Description: void 0
      };
      if (output["State"] !== void 0) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
      }
      if (output["Reason"] !== void 0) {
        contents.Reason = (0, smithy_client_1.expectString)(output["Reason"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      return contents;
    };
    var deserializeAws_queryTargetList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryDBProxyTarget(entry, context);
      });
    };
    var deserializeAws_queryTimezone = (output, context) => {
      const contents = {
        TimezoneName: void 0
      };
      if (output["TimezoneName"] !== void 0) {
        contents.TimezoneName = (0, smithy_client_1.expectString)(output["TimezoneName"]);
      }
      return contents;
    };
    var deserializeAws_queryUpgradeTarget = (output, context) => {
      const contents = {
        Engine: void 0,
        EngineVersion: void 0,
        Description: void 0,
        AutoUpgrade: void 0,
        IsMajorVersionUpgrade: void 0,
        SupportedEngineModes: void 0,
        SupportsParallelQuery: void 0,
        SupportsGlobalDatabases: void 0,
        SupportsBabelfish: void 0
      };
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["AutoUpgrade"] !== void 0) {
        contents.AutoUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoUpgrade"]);
      }
      if (output["IsMajorVersionUpgrade"] !== void 0) {
        contents.IsMajorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["IsMajorVersionUpgrade"]);
      }
      if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
      } else if (output["SupportedEngineModes"] !== void 0 && output["SupportedEngineModes"]["member"] !== void 0) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedEngineModes"]["member"]), context);
      }
      if (output["SupportsParallelQuery"] !== void 0) {
        contents.SupportsParallelQuery = (0, smithy_client_1.parseBoolean)(output["SupportsParallelQuery"]);
      }
      if (output["SupportsGlobalDatabases"] !== void 0) {
        contents.SupportsGlobalDatabases = (0, smithy_client_1.parseBoolean)(output["SupportsGlobalDatabases"]);
      }
      if (output["SupportsBabelfish"] !== void 0) {
        contents.SupportsBabelfish = (0, smithy_client_1.parseBoolean)(output["SupportsBabelfish"]);
      }
      return contents;
    };
    var deserializeAws_queryUserAuthConfigInfo = (output, context) => {
      const contents = {
        Description: void 0,
        UserName: void 0,
        AuthScheme: void 0,
        SecretArn: void 0,
        IAMAuth: void 0
      };
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["AuthScheme"] !== void 0) {
        contents.AuthScheme = (0, smithy_client_1.expectString)(output["AuthScheme"]);
      }
      if (output["SecretArn"] !== void 0) {
        contents.SecretArn = (0, smithy_client_1.expectString)(output["SecretArn"]);
      }
      if (output["IAMAuth"] !== void 0) {
        contents.IAMAuth = (0, smithy_client_1.expectString)(output["IAMAuth"]);
      }
      return contents;
    };
    var deserializeAws_queryUserAuthConfigInfoList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryUserAuthConfigInfo(entry, context);
      });
    };
    var deserializeAws_queryValidDBInstanceModificationsMessage = (output, context) => {
      const contents = {
        Storage: void 0,
        ValidProcessorFeatures: void 0
      };
      if (output.Storage === "") {
        contents.Storage = [];
      } else if (output["Storage"] !== void 0 && output["Storage"]["ValidStorageOptions"] !== void 0) {
        contents.Storage = deserializeAws_queryValidStorageOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["Storage"]["ValidStorageOptions"]), context);
      }
      if (output.ValidProcessorFeatures === "") {
        contents.ValidProcessorFeatures = [];
      } else if (output["ValidProcessorFeatures"] !== void 0 && output["ValidProcessorFeatures"]["AvailableProcessorFeature"] !== void 0) {
        contents.ValidProcessorFeatures = deserializeAws_queryAvailableProcessorFeatureList((0, smithy_client_1.getArrayIfSingleItem)(output["ValidProcessorFeatures"]["AvailableProcessorFeature"]), context);
      }
      return contents;
    };
    var deserializeAws_queryValidStorageOptions = (output, context) => {
      const contents = {
        StorageType: void 0,
        StorageSize: void 0,
        ProvisionedIops: void 0,
        IopsToStorageRatio: void 0,
        SupportsStorageAutoscaling: void 0
      };
      if (output["StorageType"] !== void 0) {
        contents.StorageType = (0, smithy_client_1.expectString)(output["StorageType"]);
      }
      if (output.StorageSize === "") {
        contents.StorageSize = [];
      } else if (output["StorageSize"] !== void 0 && output["StorageSize"]["Range"] !== void 0) {
        contents.StorageSize = deserializeAws_queryRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["StorageSize"]["Range"]), context);
      }
      if (output.ProvisionedIops === "") {
        contents.ProvisionedIops = [];
      } else if (output["ProvisionedIops"] !== void 0 && output["ProvisionedIops"]["Range"] !== void 0) {
        contents.ProvisionedIops = deserializeAws_queryRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["ProvisionedIops"]["Range"]), context);
      }
      if (output.IopsToStorageRatio === "") {
        contents.IopsToStorageRatio = [];
      } else if (output["IopsToStorageRatio"] !== void 0 && output["IopsToStorageRatio"]["DoubleRange"] !== void 0) {
        contents.IopsToStorageRatio = deserializeAws_queryDoubleRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["IopsToStorageRatio"]["DoubleRange"]), context);
      }
      if (output["SupportsStorageAutoscaling"] !== void 0) {
        contents.SupportsStorageAutoscaling = (0, smithy_client_1.parseBoolean)(output["SupportsStorageAutoscaling"]);
      }
      return contents;
    };
    var deserializeAws_queryValidStorageOptionsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryValidStorageOptions(entry, context);
      });
    };
    var deserializeAws_queryValidUpgradeTargetList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryUpgradeTarget(entry, context);
      });
    };
    var deserializeAws_queryVpcSecurityGroupMembership = (output, context) => {
      const contents = {
        VpcSecurityGroupId: void 0,
        Status: void 0
      };
      if (output["VpcSecurityGroupId"] !== void 0) {
        contents.VpcSecurityGroupId = (0, smithy_client_1.expectString)(output["VpcSecurityGroupId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryVpcSecurityGroupMembershipList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_queryVpcSecurityGroupMembership(entry, context);
      });
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
          attributeNamePrefix: "",
          ignoreAttributes: false,
          parseNodeValue: false,
          trimValues: false,
          tagValueProcessor: (val) => val.trim() === "" && val.includes("\n") ? "" : (0, entities_1.decodeHTML)(val)
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddRoleToDBClusterCommand.js
var require_AddRoleToDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddRoleToDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddRoleToDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AddRoleToDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "AddRoleToDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddRoleToDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAddRoleToDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAddRoleToDBClusterCommand)(output, context);
      }
    };
    exports.AddRoleToDBClusterCommand = AddRoleToDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddRoleToDBInstanceCommand.js
var require_AddRoleToDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddRoleToDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddRoleToDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AddRoleToDBInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "AddRoleToDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddRoleToDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAddRoleToDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAddRoleToDBInstanceCommand)(output, context);
      }
    };
    exports.AddRoleToDBInstanceCommand = AddRoleToDBInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddSourceIdentifierToSubscriptionCommand.js
var require_AddSourceIdentifierToSubscriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddSourceIdentifierToSubscriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddSourceIdentifierToSubscriptionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AddSourceIdentifierToSubscriptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "AddSourceIdentifierToSubscriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddSourceIdentifierToSubscriptionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddSourceIdentifierToSubscriptionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAddSourceIdentifierToSubscriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAddSourceIdentifierToSubscriptionCommand)(output, context);
      }
    };
    exports.AddSourceIdentifierToSubscriptionCommand = AddSourceIdentifierToSubscriptionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddTagsToResourceCommand.js
var require_AddTagsToResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/AddTagsToResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddTagsToResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AddTagsToResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "AddTagsToResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddTagsToResourceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAddTagsToResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAddTagsToResourceCommand)(output, context);
      }
    };
    exports.AddTagsToResourceCommand = AddTagsToResourceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ApplyPendingMaintenanceActionCommand.js
var require_ApplyPendingMaintenanceActionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ApplyPendingMaintenanceActionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplyPendingMaintenanceActionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ApplyPendingMaintenanceActionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ApplyPendingMaintenanceActionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ApplyPendingMaintenanceActionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ApplyPendingMaintenanceActionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryApplyPendingMaintenanceActionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryApplyPendingMaintenanceActionCommand)(output, context);
      }
    };
    exports.ApplyPendingMaintenanceActionCommand = ApplyPendingMaintenanceActionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/AuthorizeDBSecurityGroupIngressCommand.js
var require_AuthorizeDBSecurityGroupIngressCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/AuthorizeDBSecurityGroupIngressCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthorizeDBSecurityGroupIngressCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AuthorizeDBSecurityGroupIngressCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "AuthorizeDBSecurityGroupIngressCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AuthorizeDBSecurityGroupIngressMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AuthorizeDBSecurityGroupIngressResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAuthorizeDBSecurityGroupIngressCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAuthorizeDBSecurityGroupIngressCommand)(output, context);
      }
    };
    exports.AuthorizeDBSecurityGroupIngressCommand = AuthorizeDBSecurityGroupIngressCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/BacktrackDBClusterCommand.js
var require_BacktrackDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/BacktrackDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BacktrackDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var BacktrackDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "BacktrackDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BacktrackDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterBacktrack.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryBacktrackDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryBacktrackDBClusterCommand)(output, context);
      }
    };
    exports.BacktrackDBClusterCommand = BacktrackDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CancelExportTaskCommand.js
var require_CancelExportTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CancelExportTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelExportTaskCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CancelExportTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CancelExportTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelExportTaskMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExportTask.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCancelExportTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCancelExportTaskCommand)(output, context);
      }
    };
    exports.CancelExportTaskCommand = CancelExportTaskCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBClusterParameterGroupCommand.js
var require_CopyDBClusterParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBClusterParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CopyDBClusterParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CopyDBClusterParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CopyDBClusterParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CopyDBClusterParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CopyDBClusterParameterGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCopyDBClusterParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCopyDBClusterParameterGroupCommand)(output, context);
      }
    };
    exports.CopyDBClusterParameterGroupCommand = CopyDBClusterParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/signature-v4/node_modules/tslib/tslib.js
var require_tslib6 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  }
});

// node_modules/@aws-sdk/util-middleware/node_modules/tslib/tslib.js
var require_tslib7 = __commonJS({
  "node_modules/@aws-sdk/util-middleware/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib7();
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs5();
    var constants_1 = require_constants2();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants2();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (!headers[headerName]) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@aws-sdk/util-uri-escape/node_modules/tslib/tslib.js
var require_tslib8 = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib8();
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs7();
    var constants_1 = require_constants2();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs8();
    var util_hex_encoding_1 = require_dist_cjs5();
    var constants_1 = require_constants2();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = (_a) => {
      var _b = _a, { headers, query } = _b, rest = __objRest(_b, ["headers", "query"]);
      return __spreadProps(__spreadValues({}, rest), {
        headers: __spreadValues({}, headers),
        query: query ? (0, exports.cloneQuery)(query) : void 0
      });
    };
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return __spreadProps(__spreadValues({}, carry), {
        [paramName]: Array.isArray(param) ? [...param] : param
      });
    }, {});
    exports.cloneQuery = cloneQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return __spreadProps(__spreadValues({}, request), {
        headers,
        query
      });
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants2();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs5();
    var util_middleware_1 = require_dist_cjs6();
    var constants_1 = require_constants2();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = require_tslib6();
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs7();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// node_modules/@aws-sdk/util-format-url/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@aws-sdk/util-format-url/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatUrl = void 0;
    var querystring_builder_1 = require_dist_cjs10();
    function formatUrl(request) {
      const { port, query } = request;
      let { protocol, path, hostname } = request;
      if (protocol && protocol.slice(-1) !== ":") {
        protocol += ":";
      }
      if (port) {
        hostname += `:${port}`;
      }
      if (path && path.charAt(0) !== "/") {
        path = `/${path}`;
      }
      let queryString = query ? (0, querystring_builder_1.buildQueryString)(query) : "";
      if (queryString && queryString[0] !== "?") {
        queryString = `?${queryString}`;
      }
      return `${protocol}//${hostname}${path}${queryString}`;
    }
    exports.formatUrl = formatUrl;
  }
});

// node_modules/@aws-sdk/middleware-sdk-rds/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-rds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCrossRegionPresignedUrlPlugin = exports.crossRegionPresignedUrlMiddlewareOptions = exports.crossRegionPresignedUrlMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var signature_v4_1 = require_dist_cjs9();
    var util_format_url_1 = require_dist_cjs11();
    var regARN = /arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?/;
    var sourceIdToCommandKeyMap = {
      SourceDBSnapshotIdentifier: "CopyDBSnapshot",
      SourceDBInstanceIdentifier: "CreateDBInstanceReadReplica",
      ReplicationSourceIdentifier: "CreateDBCluster",
      SourceDBClusterSnapshotIdentifier: "CopyDBClusterSnapshot",
      SourceDBInstanceArn: "StartDBInstanceAutomatedBackupsReplication"
    };
    var version = "2014-10-31";
    function crossRegionPresignedUrlMiddleware(options) {
      return (next) => async (args) => {
        const { input } = args;
        const region = await options.region();
        const sourceIdKey = Object.keys(sourceIdToCommandKeyMap).filter((sourceKeyId) => input.hasOwnProperty(sourceKeyId))[0];
        if (!sourceIdKey)
          return next(args);
        const command = sourceIdToCommandKeyMap[sourceIdKey];
        if (!input.PreSignedUrl && isARN(input[sourceIdKey]) && region !== getEndpointFromARN(input[sourceIdKey])) {
          const sourceRegion = getEndpointFromARN(input[sourceIdKey]);
          const resolvedEndpoint = await options.endpoint();
          resolvedEndpoint.hostname = `rds.${sourceRegion}.amazonaws.com`;
          const request = new protocol_http_1.HttpRequest(__spreadProps(__spreadValues({}, resolvedEndpoint), {
            protocol: "https",
            headers: {
              host: resolvedEndpoint.hostname
            },
            query: {
              Action: command,
              Version: version,
              KmsKeyId: input.KmsKeyId,
              DestinationRegion: region,
              [sourceIdKey]: input[sourceIdKey]
            }
          }));
          const signer = new signature_v4_1.SignatureV4({
            credentials: options.credentials,
            region: sourceRegion,
            service: "rds",
            sha256: options.sha256,
            uriEscapePath: options.signingEscapePath
          });
          const presignedRequest = await signer.presign(request, {
            expiresIn: 3600
          });
          args = __spreadProps(__spreadValues({}, args), {
            input: __spreadProps(__spreadValues({}, args.input), {
              PreSignedUrl: (0, util_format_url_1.formatUrl)(presignedRequest)
            })
          });
        }
        return next(args);
      };
    }
    exports.crossRegionPresignedUrlMiddleware = crossRegionPresignedUrlMiddleware;
    exports.crossRegionPresignedUrlMiddlewareOptions = {
      step: "initialize",
      tags: ["CROSS_REGION_PRESIGNED_URL"],
      name: "crossRegionPresignedUrlMiddleware",
      override: true
    };
    var getCrossRegionPresignedUrlPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(crossRegionPresignedUrlMiddleware(config), exports.crossRegionPresignedUrlMiddlewareOptions);
      }
    });
    exports.getCrossRegionPresignedUrlPlugin = getCrossRegionPresignedUrlPlugin;
    function isARN(id) {
      if (!id)
        return false;
      return regARN.test(id);
    }
    function getEndpointFromARN(arn) {
      const arnArr = arn.split(":");
      if (arnArr.length < 4) {
        throw new Error(`Cannot infer endpoint from '${arn}'`);
      }
      return arnArr[3];
    }
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBClusterSnapshotCommand.js
var require_CopyDBClusterSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBClusterSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CopyDBClusterSnapshotCommand = void 0;
    var middleware_sdk_rds_1 = require_dist_cjs12();
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CopyDBClusterSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_sdk_rds_1.getCrossRegionPresignedUrlPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CopyDBClusterSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CopyDBClusterSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CopyDBClusterSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCopyDBClusterSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCopyDBClusterSnapshotCommand)(output, context);
      }
    };
    exports.CopyDBClusterSnapshotCommand = CopyDBClusterSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBParameterGroupCommand.js
var require_CopyDBParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CopyDBParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CopyDBParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CopyDBParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CopyDBParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CopyDBParameterGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCopyDBParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCopyDBParameterGroupCommand)(output, context);
      }
    };
    exports.CopyDBParameterGroupCommand = CopyDBParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBSnapshotCommand.js
var require_CopyDBSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyDBSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CopyDBSnapshotCommand = void 0;
    var middleware_sdk_rds_1 = require_dist_cjs12();
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CopyDBSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_sdk_rds_1.getCrossRegionPresignedUrlPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CopyDBSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CopyDBSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CopyDBSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCopyDBSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCopyDBSnapshotCommand)(output, context);
      }
    };
    exports.CopyDBSnapshotCommand = CopyDBSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyOptionGroupCommand.js
var require_CopyOptionGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CopyOptionGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CopyOptionGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CopyOptionGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CopyOptionGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CopyOptionGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CopyOptionGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCopyOptionGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCopyOptionGroupCommand)(output, context);
      }
    };
    exports.CopyOptionGroupCommand = CopyOptionGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateCustomDBEngineVersionCommand.js
var require_CreateCustomDBEngineVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateCustomDBEngineVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateCustomDBEngineVersionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateCustomDBEngineVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateCustomDBEngineVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateCustomDBEngineVersionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBEngineVersion.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateCustomDBEngineVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateCustomDBEngineVersionCommand)(output, context);
      }
    };
    exports.CreateCustomDBEngineVersionCommand = CreateCustomDBEngineVersionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterCommand.js
var require_CreateDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBClusterCommand = void 0;
    var middleware_sdk_rds_1 = require_dist_cjs12();
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_sdk_rds_1.getCrossRegionPresignedUrlPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBClusterCommand)(output, context);
      }
    };
    exports.CreateDBClusterCommand = CreateDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterEndpointCommand.js
var require_CreateDBClusterEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBClusterEndpointCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBClusterEndpointCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBClusterEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBClusterEndpointMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterEndpoint.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBClusterEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBClusterEndpointCommand)(output, context);
      }
    };
    exports.CreateDBClusterEndpointCommand = CreateDBClusterEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterParameterGroupCommand.js
var require_CreateDBClusterParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBClusterParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBClusterParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBClusterParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBClusterParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBClusterParameterGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBClusterParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBClusterParameterGroupCommand)(output, context);
      }
    };
    exports.CreateDBClusterParameterGroupCommand = CreateDBClusterParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterSnapshotCommand.js
var require_CreateDBClusterSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBClusterSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBClusterSnapshotCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBClusterSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBClusterSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBClusterSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBClusterSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBClusterSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBClusterSnapshotCommand)(output, context);
      }
    };
    exports.CreateDBClusterSnapshotCommand = CreateDBClusterSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBInstanceCommand.js
var require_CreateDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBInstanceCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBInstanceCommand)(output, context);
      }
    };
    exports.CreateDBInstanceCommand = CreateDBInstanceCommand2;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBInstanceReadReplicaCommand.js
var require_CreateDBInstanceReadReplicaCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBInstanceReadReplicaCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBInstanceReadReplicaCommand = void 0;
    var middleware_sdk_rds_1 = require_dist_cjs12();
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBInstanceReadReplicaCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_sdk_rds_1.getCrossRegionPresignedUrlPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBInstanceReadReplicaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBInstanceReadReplicaMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBInstanceReadReplicaResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBInstanceReadReplicaCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBInstanceReadReplicaCommand)(output, context);
      }
    };
    exports.CreateDBInstanceReadReplicaCommand = CreateDBInstanceReadReplicaCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBParameterGroupCommand.js
var require_CreateDBParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBParameterGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBParameterGroupCommand)(output, context);
      }
    };
    exports.CreateDBParameterGroupCommand = CreateDBParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBProxyCommand.js
var require_CreateDBProxyCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBProxyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBProxyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBProxyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBProxyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBProxyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBProxyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBProxyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBProxyCommand)(output, context);
      }
    };
    exports.CreateDBProxyCommand = CreateDBProxyCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBProxyEndpointCommand.js
var require_CreateDBProxyEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBProxyEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBProxyEndpointCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBProxyEndpointCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBProxyEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBProxyEndpointRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBProxyEndpointResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBProxyEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBProxyEndpointCommand)(output, context);
      }
    };
    exports.CreateDBProxyEndpointCommand = CreateDBProxyEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBSecurityGroupCommand.js
var require_CreateDBSecurityGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBSecurityGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBSecurityGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBSecurityGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBSecurityGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBSecurityGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBSecurityGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBSecurityGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBSecurityGroupCommand)(output, context);
      }
    };
    exports.CreateDBSecurityGroupCommand = CreateDBSecurityGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBSnapshotCommand.js
var require_CreateDBSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBSnapshotCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBSnapshotCommand)(output, context);
      }
    };
    exports.CreateDBSnapshotCommand = CreateDBSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBSubnetGroupCommand.js
var require_CreateDBSubnetGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateDBSubnetGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDBSubnetGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateDBSubnetGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateDBSubnetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDBSubnetGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDBSubnetGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateDBSubnetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateDBSubnetGroupCommand)(output, context);
      }
    };
    exports.CreateDBSubnetGroupCommand = CreateDBSubnetGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateEventSubscriptionCommand.js
var require_CreateEventSubscriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateEventSubscriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateEventSubscriptionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateEventSubscriptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateEventSubscriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateEventSubscriptionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateEventSubscriptionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateEventSubscriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateEventSubscriptionCommand)(output, context);
      }
    };
    exports.CreateEventSubscriptionCommand = CreateEventSubscriptionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateGlobalClusterCommand.js
var require_CreateGlobalClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateGlobalClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateGlobalClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateGlobalClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateGlobalClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateGlobalClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateGlobalClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateGlobalClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateGlobalClusterCommand)(output, context);
      }
    };
    exports.CreateGlobalClusterCommand = CreateGlobalClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateOptionGroupCommand.js
var require_CreateOptionGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/CreateOptionGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOptionGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateOptionGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "CreateOptionGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOptionGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOptionGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateOptionGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateOptionGroupCommand)(output, context);
      }
    };
    exports.CreateOptionGroupCommand = CreateOptionGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteCustomDBEngineVersionCommand.js
var require_DeleteCustomDBEngineVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteCustomDBEngineVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteCustomDBEngineVersionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteCustomDBEngineVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteCustomDBEngineVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteCustomDBEngineVersionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBEngineVersion.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteCustomDBEngineVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteCustomDBEngineVersionCommand)(output, context);
      }
    };
    exports.DeleteCustomDBEngineVersionCommand = DeleteCustomDBEngineVersionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterCommand.js
var require_DeleteDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBClusterCommand)(output, context);
      }
    };
    exports.DeleteDBClusterCommand = DeleteDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterEndpointCommand.js
var require_DeleteDBClusterEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBClusterEndpointCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBClusterEndpointCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBClusterEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBClusterEndpointMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterEndpoint.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBClusterEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBClusterEndpointCommand)(output, context);
      }
    };
    exports.DeleteDBClusterEndpointCommand = DeleteDBClusterEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterParameterGroupCommand.js
var require_DeleteDBClusterParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBClusterParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBClusterParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBClusterParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBClusterParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBClusterParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBClusterParameterGroupCommand)(output, context);
      }
    };
    exports.DeleteDBClusterParameterGroupCommand = DeleteDBClusterParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterSnapshotCommand.js
var require_DeleteDBClusterSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBClusterSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBClusterSnapshotCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBClusterSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBClusterSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBClusterSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDBClusterSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBClusterSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBClusterSnapshotCommand)(output, context);
      }
    };
    exports.DeleteDBClusterSnapshotCommand = DeleteDBClusterSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBInstanceAutomatedBackupCommand.js
var require_DeleteDBInstanceAutomatedBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBInstanceAutomatedBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBInstanceAutomatedBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBInstanceAutomatedBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBInstanceAutomatedBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBInstanceAutomatedBackupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDBInstanceAutomatedBackupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBInstanceAutomatedBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBInstanceAutomatedBackupCommand)(output, context);
      }
    };
    exports.DeleteDBInstanceAutomatedBackupCommand = DeleteDBInstanceAutomatedBackupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBInstanceCommand.js
var require_DeleteDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDBInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBInstanceCommand)(output, context);
      }
    };
    exports.DeleteDBInstanceCommand = DeleteDBInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBParameterGroupCommand.js
var require_DeleteDBParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBParameterGroupCommand)(output, context);
      }
    };
    exports.DeleteDBParameterGroupCommand = DeleteDBParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBProxyCommand.js
var require_DeleteDBProxyCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBProxyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBProxyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBProxyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBProxyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBProxyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDBProxyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBProxyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBProxyCommand)(output, context);
      }
    };
    exports.DeleteDBProxyCommand = DeleteDBProxyCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBProxyEndpointCommand.js
var require_DeleteDBProxyEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBProxyEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBProxyEndpointCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBProxyEndpointCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBProxyEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBProxyEndpointRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDBProxyEndpointResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBProxyEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBProxyEndpointCommand)(output, context);
      }
    };
    exports.DeleteDBProxyEndpointCommand = DeleteDBProxyEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBSecurityGroupCommand.js
var require_DeleteDBSecurityGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBSecurityGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBSecurityGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBSecurityGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBSecurityGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBSecurityGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBSecurityGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBSecurityGroupCommand)(output, context);
      }
    };
    exports.DeleteDBSecurityGroupCommand = DeleteDBSecurityGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBSnapshotCommand.js
var require_DeleteDBSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBSnapshotCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDBSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBSnapshotCommand)(output, context);
      }
    };
    exports.DeleteDBSnapshotCommand = DeleteDBSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBSubnetGroupCommand.js
var require_DeleteDBSubnetGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteDBSubnetGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDBSubnetGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteDBSubnetGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteDBSubnetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDBSubnetGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteDBSubnetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteDBSubnetGroupCommand)(output, context);
      }
    };
    exports.DeleteDBSubnetGroupCommand = DeleteDBSubnetGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteEventSubscriptionCommand.js
var require_DeleteEventSubscriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteEventSubscriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteEventSubscriptionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteEventSubscriptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteEventSubscriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteEventSubscriptionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteEventSubscriptionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteEventSubscriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteEventSubscriptionCommand)(output, context);
      }
    };
    exports.DeleteEventSubscriptionCommand = DeleteEventSubscriptionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteGlobalClusterCommand.js
var require_DeleteGlobalClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteGlobalClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteGlobalClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteGlobalClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteGlobalClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteGlobalClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteGlobalClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteGlobalClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteGlobalClusterCommand)(output, context);
      }
    };
    exports.DeleteGlobalClusterCommand = DeleteGlobalClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteOptionGroupCommand.js
var require_DeleteOptionGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeleteOptionGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteOptionGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteOptionGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeleteOptionGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteOptionGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteOptionGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteOptionGroupCommand)(output, context);
      }
    };
    exports.DeleteOptionGroupCommand = DeleteOptionGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeregisterDBProxyTargetsCommand.js
var require_DeregisterDBProxyTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DeregisterDBProxyTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterDBProxyTargetsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeregisterDBProxyTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DeregisterDBProxyTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterDBProxyTargetsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterDBProxyTargetsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeregisterDBProxyTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeregisterDBProxyTargetsCommand)(output, context);
      }
    };
    exports.DeregisterDBProxyTargetsCommand = DeregisterDBProxyTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeAccountAttributesCommand.js
var require_DescribeAccountAttributesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeAccountAttributesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAccountAttributesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeAccountAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeAccountAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAccountAttributesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AccountAttributesMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeAccountAttributesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeAccountAttributesCommand)(output, context);
      }
    };
    exports.DescribeAccountAttributesCommand = DescribeAccountAttributesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeCertificatesCommand.js
var require_DescribeCertificatesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeCertificatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeCertificatesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeCertificatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeCertificatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeCertificatesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CertificateMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeCertificatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeCertificatesCommand)(output, context);
      }
    };
    exports.DescribeCertificatesCommand = DescribeCertificatesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterBacktracksCommand.js
var require_DescribeDBClusterBacktracksCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterBacktracksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBClusterBacktracksCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBClusterBacktracksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBClusterBacktracksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBClusterBacktracksMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterBacktrackMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBClusterBacktracksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBClusterBacktracksCommand)(output, context);
      }
    };
    exports.DescribeDBClusterBacktracksCommand = DescribeDBClusterBacktracksCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterEndpointsCommand.js
var require_DescribeDBClusterEndpointsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterEndpointsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBClusterEndpointsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBClusterEndpointsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBClusterEndpointsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBClusterEndpointsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterEndpointMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBClusterEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBClusterEndpointsCommand)(output, context);
      }
    };
    exports.DescribeDBClusterEndpointsCommand = DescribeDBClusterEndpointsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterParameterGroupsCommand.js
var require_DescribeDBClusterParameterGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterParameterGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBClusterParameterGroupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBClusterParameterGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBClusterParameterGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBClusterParameterGroupsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterParameterGroupsMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBClusterParameterGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBClusterParameterGroupsCommand)(output, context);
      }
    };
    exports.DescribeDBClusterParameterGroupsCommand = DescribeDBClusterParameterGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterParametersCommand.js
var require_DescribeDBClusterParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBClusterParametersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBClusterParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBClusterParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBClusterParametersMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterParameterGroupDetails.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBClusterParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBClusterParametersCommand)(output, context);
      }
    };
    exports.DescribeDBClusterParametersCommand = DescribeDBClusterParametersCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClustersCommand.js
var require_DescribeDBClustersCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClustersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBClustersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBClustersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBClustersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBClustersMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBClustersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBClustersCommand)(output, context);
      }
    };
    exports.DescribeDBClustersCommand = DescribeDBClustersCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterSnapshotAttributesCommand.js
var require_DescribeDBClusterSnapshotAttributesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterSnapshotAttributesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBClusterSnapshotAttributesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBClusterSnapshotAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBClusterSnapshotAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBClusterSnapshotAttributesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDBClusterSnapshotAttributesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBClusterSnapshotAttributesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBClusterSnapshotAttributesCommand)(output, context);
      }
    };
    exports.DescribeDBClusterSnapshotAttributesCommand = DescribeDBClusterSnapshotAttributesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterSnapshotsCommand.js
var require_DescribeDBClusterSnapshotsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBClusterSnapshotsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBClusterSnapshotsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBClusterSnapshotsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBClusterSnapshotsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBClusterSnapshotsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterSnapshotMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBClusterSnapshotsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBClusterSnapshotsCommand)(output, context);
      }
    };
    exports.DescribeDBClusterSnapshotsCommand = DescribeDBClusterSnapshotsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBEngineVersionsCommand.js
var require_DescribeDBEngineVersionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBEngineVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBEngineVersionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBEngineVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBEngineVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBEngineVersionsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBEngineVersionMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBEngineVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBEngineVersionsCommand)(output, context);
      }
    };
    exports.DescribeDBEngineVersionsCommand = DescribeDBEngineVersionsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBInstanceAutomatedBackupsCommand.js
var require_DescribeDBInstanceAutomatedBackupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBInstanceAutomatedBackupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBInstanceAutomatedBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBInstanceAutomatedBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBInstanceAutomatedBackupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBInstanceAutomatedBackupsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBInstanceAutomatedBackupMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBInstanceAutomatedBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommand)(output, context);
      }
    };
    exports.DescribeDBInstanceAutomatedBackupsCommand = DescribeDBInstanceAutomatedBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBInstancesCommand.js
var require_DescribeDBInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBInstancesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBInstancesCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBInstancesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBInstanceMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBInstancesCommand)(output, context);
      }
    };
    exports.DescribeDBInstancesCommand = DescribeDBInstancesCommand2;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBLogFilesCommand.js
var require_DescribeDBLogFilesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBLogFilesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBLogFilesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBLogFilesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBLogFilesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBLogFilesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDBLogFilesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBLogFilesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBLogFilesCommand)(output, context);
      }
    };
    exports.DescribeDBLogFilesCommand = DescribeDBLogFilesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBParameterGroupsCommand.js
var require_DescribeDBParameterGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBParameterGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBParameterGroupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBParameterGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBParameterGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBParameterGroupsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBParameterGroupsMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBParameterGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBParameterGroupsCommand)(output, context);
      }
    };
    exports.DescribeDBParameterGroupsCommand = DescribeDBParameterGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBParametersCommand.js
var require_DescribeDBParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBParametersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBParametersMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBParameterGroupDetails.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBParametersCommand)(output, context);
      }
    };
    exports.DescribeDBParametersCommand = DescribeDBParametersCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxiesCommand.js
var require_DescribeDBProxiesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxiesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBProxiesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBProxiesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBProxiesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBProxiesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDBProxiesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBProxiesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBProxiesCommand)(output, context);
      }
    };
    exports.DescribeDBProxiesCommand = DescribeDBProxiesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxyEndpointsCommand.js
var require_DescribeDBProxyEndpointsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxyEndpointsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBProxyEndpointsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBProxyEndpointsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBProxyEndpointsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBProxyEndpointsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDBProxyEndpointsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBProxyEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBProxyEndpointsCommand)(output, context);
      }
    };
    exports.DescribeDBProxyEndpointsCommand = DescribeDBProxyEndpointsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxyTargetGroupsCommand.js
var require_DescribeDBProxyTargetGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxyTargetGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBProxyTargetGroupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBProxyTargetGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBProxyTargetGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBProxyTargetGroupsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDBProxyTargetGroupsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBProxyTargetGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBProxyTargetGroupsCommand)(output, context);
      }
    };
    exports.DescribeDBProxyTargetGroupsCommand = DescribeDBProxyTargetGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxyTargetsCommand.js
var require_DescribeDBProxyTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBProxyTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBProxyTargetsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBProxyTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBProxyTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBProxyTargetsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDBProxyTargetsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBProxyTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBProxyTargetsCommand)(output, context);
      }
    };
    exports.DescribeDBProxyTargetsCommand = DescribeDBProxyTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSecurityGroupsCommand.js
var require_DescribeDBSecurityGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSecurityGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBSecurityGroupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBSecurityGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBSecurityGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBSecurityGroupsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBSecurityGroupMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBSecurityGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBSecurityGroupsCommand)(output, context);
      }
    };
    exports.DescribeDBSecurityGroupsCommand = DescribeDBSecurityGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSnapshotAttributesCommand.js
var require_DescribeDBSnapshotAttributesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSnapshotAttributesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBSnapshotAttributesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBSnapshotAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBSnapshotAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDBSnapshotAttributesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeDBSnapshotAttributesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBSnapshotAttributesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBSnapshotAttributesCommand)(output, context);
      }
    };
    exports.DescribeDBSnapshotAttributesCommand = DescribeDBSnapshotAttributesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSnapshotsCommand.js
var require_DescribeDBSnapshotsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSnapshotsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBSnapshotsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBSnapshotsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBSnapshotsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeDBSnapshotsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DBSnapshotMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBSnapshotsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBSnapshotsCommand)(output, context);
      }
    };
    exports.DescribeDBSnapshotsCommand = DescribeDBSnapshotsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSubnetGroupsCommand.js
var require_DescribeDBSubnetGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeDBSubnetGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDBSubnetGroupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeDBSubnetGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeDBSubnetGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeDBSubnetGroupsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DBSubnetGroupMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeDBSubnetGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeDBSubnetGroupsCommand)(output, context);
      }
    };
    exports.DescribeDBSubnetGroupsCommand = DescribeDBSubnetGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEngineDefaultClusterParametersCommand.js
var require_DescribeEngineDefaultClusterParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEngineDefaultClusterParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEngineDefaultClusterParametersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeEngineDefaultClusterParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeEngineDefaultClusterParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeEngineDefaultClusterParametersMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeEngineDefaultClusterParametersResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeEngineDefaultClusterParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeEngineDefaultClusterParametersCommand)(output, context);
      }
    };
    exports.DescribeEngineDefaultClusterParametersCommand = DescribeEngineDefaultClusterParametersCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEngineDefaultParametersCommand.js
var require_DescribeEngineDefaultParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEngineDefaultParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEngineDefaultParametersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeEngineDefaultParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeEngineDefaultParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeEngineDefaultParametersMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeEngineDefaultParametersResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeEngineDefaultParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeEngineDefaultParametersCommand)(output, context);
      }
    };
    exports.DescribeEngineDefaultParametersCommand = DescribeEngineDefaultParametersCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEventCategoriesCommand.js
var require_DescribeEventCategoriesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEventCategoriesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEventCategoriesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeEventCategoriesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeEventCategoriesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeEventCategoriesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.EventCategoriesMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeEventCategoriesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeEventCategoriesCommand)(output, context);
      }
    };
    exports.DescribeEventCategoriesCommand = DescribeEventCategoriesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEventsCommand.js
var require_DescribeEventsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEventsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEventsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeEventsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeEventsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeEventsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.EventsMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeEventsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeEventsCommand)(output, context);
      }
    };
    exports.DescribeEventsCommand = DescribeEventsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEventSubscriptionsCommand.js
var require_DescribeEventSubscriptionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeEventSubscriptionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEventSubscriptionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeEventSubscriptionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeEventSubscriptionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeEventSubscriptionsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.EventSubscriptionsMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeEventSubscriptionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeEventSubscriptionsCommand)(output, context);
      }
    };
    exports.DescribeEventSubscriptionsCommand = DescribeEventSubscriptionsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeExportTasksCommand.js
var require_DescribeExportTasksCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeExportTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeExportTasksCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeExportTasksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeExportTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeExportTasksMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ExportTasksMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeExportTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeExportTasksCommand)(output, context);
      }
    };
    exports.DescribeExportTasksCommand = DescribeExportTasksCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeGlobalClustersCommand.js
var require_DescribeGlobalClustersCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeGlobalClustersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeGlobalClustersCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeGlobalClustersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeGlobalClustersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeGlobalClustersMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GlobalClustersMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeGlobalClustersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeGlobalClustersCommand)(output, context);
      }
    };
    exports.DescribeGlobalClustersCommand = DescribeGlobalClustersCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeOptionGroupOptionsCommand.js
var require_DescribeOptionGroupOptionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeOptionGroupOptionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeOptionGroupOptionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeOptionGroupOptionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeOptionGroupOptionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeOptionGroupOptionsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.OptionGroupOptionsMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeOptionGroupOptionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeOptionGroupOptionsCommand)(output, context);
      }
    };
    exports.DescribeOptionGroupOptionsCommand = DescribeOptionGroupOptionsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeOptionGroupsCommand.js
var require_DescribeOptionGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeOptionGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeOptionGroupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeOptionGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeOptionGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeOptionGroupsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.OptionGroups.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeOptionGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeOptionGroupsCommand)(output, context);
      }
    };
    exports.DescribeOptionGroupsCommand = DescribeOptionGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeOrderableDBInstanceOptionsCommand.js
var require_DescribeOrderableDBInstanceOptionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeOrderableDBInstanceOptionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeOrderableDBInstanceOptionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeOrderableDBInstanceOptionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeOrderableDBInstanceOptionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeOrderableDBInstanceOptionsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.OrderableDBInstanceOptionsMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeOrderableDBInstanceOptionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeOrderableDBInstanceOptionsCommand)(output, context);
      }
    };
    exports.DescribeOrderableDBInstanceOptionsCommand = DescribeOrderableDBInstanceOptionsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribePendingMaintenanceActionsCommand.js
var require_DescribePendingMaintenanceActionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribePendingMaintenanceActionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePendingMaintenanceActionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribePendingMaintenanceActionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribePendingMaintenanceActionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePendingMaintenanceActionsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PendingMaintenanceActionsMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribePendingMaintenanceActionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribePendingMaintenanceActionsCommand)(output, context);
      }
    };
    exports.DescribePendingMaintenanceActionsCommand = DescribePendingMaintenanceActionsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeReservedDBInstancesCommand.js
var require_DescribeReservedDBInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeReservedDBInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeReservedDBInstancesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeReservedDBInstancesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeReservedDBInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeReservedDBInstancesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ReservedDBInstanceMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeReservedDBInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeReservedDBInstancesCommand)(output, context);
      }
    };
    exports.DescribeReservedDBInstancesCommand = DescribeReservedDBInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeReservedDBInstancesOfferingsCommand.js
var require_DescribeReservedDBInstancesOfferingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeReservedDBInstancesOfferingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeReservedDBInstancesOfferingsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeReservedDBInstancesOfferingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeReservedDBInstancesOfferingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeReservedDBInstancesOfferingsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ReservedDBInstancesOfferingMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeReservedDBInstancesOfferingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeReservedDBInstancesOfferingsCommand)(output, context);
      }
    };
    exports.DescribeReservedDBInstancesOfferingsCommand = DescribeReservedDBInstancesOfferingsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeSourceRegionsCommand.js
var require_DescribeSourceRegionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeSourceRegionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeSourceRegionsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeSourceRegionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeSourceRegionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeSourceRegionsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SourceRegionMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeSourceRegionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeSourceRegionsCommand)(output, context);
      }
    };
    exports.DescribeSourceRegionsCommand = DescribeSourceRegionsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeValidDBInstanceModificationsCommand.js
var require_DescribeValidDBInstanceModificationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DescribeValidDBInstanceModificationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeValidDBInstanceModificationsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DescribeValidDBInstanceModificationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DescribeValidDBInstanceModificationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeValidDBInstanceModificationsMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeValidDBInstanceModificationsResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeValidDBInstanceModificationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeValidDBInstanceModificationsCommand)(output, context);
      }
    };
    exports.DescribeValidDBInstanceModificationsCommand = DescribeValidDBInstanceModificationsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/DownloadDBLogFilePortionCommand.js
var require_DownloadDBLogFilePortionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/DownloadDBLogFilePortionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DownloadDBLogFilePortionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var DownloadDBLogFilePortionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "DownloadDBLogFilePortionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DownloadDBLogFilePortionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DownloadDBLogFilePortionDetails.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDownloadDBLogFilePortionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDownloadDBLogFilePortionCommand)(output, context);
      }
    };
    exports.DownloadDBLogFilePortionCommand = DownloadDBLogFilePortionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/FailoverDBClusterCommand.js
var require_FailoverDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/FailoverDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FailoverDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var FailoverDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "FailoverDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.FailoverDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.FailoverDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryFailoverDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryFailoverDBClusterCommand)(output, context);
      }
    };
    exports.FailoverDBClusterCommand = FailoverDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/FailoverGlobalClusterCommand.js
var require_FailoverGlobalClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/FailoverGlobalClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FailoverGlobalClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var FailoverGlobalClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "FailoverGlobalClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.FailoverGlobalClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.FailoverGlobalClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryFailoverGlobalClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryFailoverGlobalClusterCommand)(output, context);
      }
    };
    exports.FailoverGlobalClusterCommand = FailoverGlobalClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ListTagsForResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListTagsForResourceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.TagListMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListTagsForResourceCommand)(output, context);
      }
    };
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyCertificatesCommand.js
var require_ModifyCertificatesCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyCertificatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyCertificatesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyCertificatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyCertificatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyCertificatesMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyCertificatesResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyCertificatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyCertificatesCommand)(output, context);
      }
    };
    exports.ModifyCertificatesCommand = ModifyCertificatesCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyCurrentDBClusterCapacityCommand.js
var require_ModifyCurrentDBClusterCapacityCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyCurrentDBClusterCapacityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyCurrentDBClusterCapacityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyCurrentDBClusterCapacityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyCurrentDBClusterCapacityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyCurrentDBClusterCapacityMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DBClusterCapacityInfo.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyCurrentDBClusterCapacityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyCurrentDBClusterCapacityCommand)(output, context);
      }
    };
    exports.ModifyCurrentDBClusterCapacityCommand = ModifyCurrentDBClusterCapacityCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyCustomDBEngineVersionCommand.js
var require_ModifyCustomDBEngineVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyCustomDBEngineVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyCustomDBEngineVersionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyCustomDBEngineVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyCustomDBEngineVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyCustomDBEngineVersionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBEngineVersion.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyCustomDBEngineVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyCustomDBEngineVersionCommand)(output, context);
      }
    };
    exports.ModifyCustomDBEngineVersionCommand = ModifyCustomDBEngineVersionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterCommand.js
var require_ModifyDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBClusterCommand)(output, context);
      }
    };
    exports.ModifyDBClusterCommand = ModifyDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterEndpointCommand.js
var require_ModifyDBClusterEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBClusterEndpointCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBClusterEndpointCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBClusterEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBClusterEndpointMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DBClusterEndpoint.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBClusterEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBClusterEndpointCommand)(output, context);
      }
    };
    exports.ModifyDBClusterEndpointCommand = ModifyDBClusterEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterParameterGroupCommand.js
var require_ModifyDBClusterParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBClusterParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBClusterParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBClusterParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBClusterParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DBClusterParameterGroupNameMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBClusterParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBClusterParameterGroupCommand)(output, context);
      }
    };
    exports.ModifyDBClusterParameterGroupCommand = ModifyDBClusterParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterSnapshotAttributeCommand.js
var require_ModifyDBClusterSnapshotAttributeCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBClusterSnapshotAttributeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBClusterSnapshotAttributeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBClusterSnapshotAttributeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBClusterSnapshotAttributeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBClusterSnapshotAttributeMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBClusterSnapshotAttributeResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBClusterSnapshotAttributeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBClusterSnapshotAttributeCommand)(output, context);
      }
    };
    exports.ModifyDBClusterSnapshotAttributeCommand = ModifyDBClusterSnapshotAttributeCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBInstanceCommand.js
var require_ModifyDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBInstanceCommand)(output, context);
      }
    };
    exports.ModifyDBInstanceCommand = ModifyDBInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBParameterGroupCommand.js
var require_ModifyDBParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DBParameterGroupNameMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBParameterGroupCommand)(output, context);
      }
    };
    exports.ModifyDBParameterGroupCommand = ModifyDBParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBProxyCommand.js
var require_ModifyDBProxyCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBProxyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBProxyCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBProxyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBProxyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBProxyRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBProxyResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBProxyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBProxyCommand)(output, context);
      }
    };
    exports.ModifyDBProxyCommand = ModifyDBProxyCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBProxyEndpointCommand.js
var require_ModifyDBProxyEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBProxyEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBProxyEndpointCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBProxyEndpointCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBProxyEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBProxyEndpointRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBProxyEndpointResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBProxyEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBProxyEndpointCommand)(output, context);
      }
    };
    exports.ModifyDBProxyEndpointCommand = ModifyDBProxyEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBProxyTargetGroupCommand.js
var require_ModifyDBProxyTargetGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBProxyTargetGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBProxyTargetGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBProxyTargetGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBProxyTargetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBProxyTargetGroupRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBProxyTargetGroupResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBProxyTargetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBProxyTargetGroupCommand)(output, context);
      }
    };
    exports.ModifyDBProxyTargetGroupCommand = ModifyDBProxyTargetGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBSnapshotAttributeCommand.js
var require_ModifyDBSnapshotAttributeCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBSnapshotAttributeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBSnapshotAttributeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBSnapshotAttributeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBSnapshotAttributeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBSnapshotAttributeMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBSnapshotAttributeResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBSnapshotAttributeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBSnapshotAttributeCommand)(output, context);
      }
    };
    exports.ModifyDBSnapshotAttributeCommand = ModifyDBSnapshotAttributeCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBSnapshotCommand.js
var require_ModifyDBSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBSnapshotCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBSnapshotCommand)(output, context);
      }
    };
    exports.ModifyDBSnapshotCommand = ModifyDBSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBSubnetGroupCommand.js
var require_ModifyDBSubnetGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyDBSubnetGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDBSubnetGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyDBSubnetGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyDBSubnetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDBSubnetGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDBSubnetGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyDBSubnetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyDBSubnetGroupCommand)(output, context);
      }
    };
    exports.ModifyDBSubnetGroupCommand = ModifyDBSubnetGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyEventSubscriptionCommand.js
var require_ModifyEventSubscriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyEventSubscriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyEventSubscriptionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyEventSubscriptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyEventSubscriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyEventSubscriptionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyEventSubscriptionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyEventSubscriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyEventSubscriptionCommand)(output, context);
      }
    };
    exports.ModifyEventSubscriptionCommand = ModifyEventSubscriptionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyGlobalClusterCommand.js
var require_ModifyGlobalClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyGlobalClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyGlobalClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyGlobalClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyGlobalClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyGlobalClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyGlobalClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyGlobalClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyGlobalClusterCommand)(output, context);
      }
    };
    exports.ModifyGlobalClusterCommand = ModifyGlobalClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyOptionGroupCommand.js
var require_ModifyOptionGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ModifyOptionGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyOptionGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ModifyOptionGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ModifyOptionGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyOptionGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyOptionGroupResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryModifyOptionGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryModifyOptionGroupCommand)(output, context);
      }
    };
    exports.ModifyOptionGroupCommand = ModifyOptionGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/PromoteReadReplicaCommand.js
var require_PromoteReadReplicaCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/PromoteReadReplicaCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PromoteReadReplicaCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var PromoteReadReplicaCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "PromoteReadReplicaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PromoteReadReplicaMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PromoteReadReplicaResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPromoteReadReplicaCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPromoteReadReplicaCommand)(output, context);
      }
    };
    exports.PromoteReadReplicaCommand = PromoteReadReplicaCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/PromoteReadReplicaDBClusterCommand.js
var require_PromoteReadReplicaDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/PromoteReadReplicaDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PromoteReadReplicaDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var PromoteReadReplicaDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "PromoteReadReplicaDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PromoteReadReplicaDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PromoteReadReplicaDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPromoteReadReplicaDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPromoteReadReplicaDBClusterCommand)(output, context);
      }
    };
    exports.PromoteReadReplicaDBClusterCommand = PromoteReadReplicaDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/PurchaseReservedDBInstancesOfferingCommand.js
var require_PurchaseReservedDBInstancesOfferingCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/PurchaseReservedDBInstancesOfferingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PurchaseReservedDBInstancesOfferingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var PurchaseReservedDBInstancesOfferingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "PurchaseReservedDBInstancesOfferingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PurchaseReservedDBInstancesOfferingMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PurchaseReservedDBInstancesOfferingResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPurchaseReservedDBInstancesOfferingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPurchaseReservedDBInstancesOfferingCommand)(output, context);
      }
    };
    exports.PurchaseReservedDBInstancesOfferingCommand = PurchaseReservedDBInstancesOfferingCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RebootDBClusterCommand.js
var require_RebootDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RebootDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RebootDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RebootDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RebootDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RebootDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RebootDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRebootDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRebootDBClusterCommand)(output, context);
      }
    };
    exports.RebootDBClusterCommand = RebootDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RebootDBInstanceCommand.js
var require_RebootDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RebootDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RebootDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RebootDBInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RebootDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RebootDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RebootDBInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRebootDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRebootDBInstanceCommand)(output, context);
      }
    };
    exports.RebootDBInstanceCommand = RebootDBInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RegisterDBProxyTargetsCommand.js
var require_RegisterDBProxyTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RegisterDBProxyTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterDBProxyTargetsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RegisterDBProxyTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RegisterDBProxyTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterDBProxyTargetsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterDBProxyTargetsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRegisterDBProxyTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRegisterDBProxyTargetsCommand)(output, context);
      }
    };
    exports.RegisterDBProxyTargetsCommand = RegisterDBProxyTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveFromGlobalClusterCommand.js
var require_RemoveFromGlobalClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveFromGlobalClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveFromGlobalClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RemoveFromGlobalClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RemoveFromGlobalClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveFromGlobalClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RemoveFromGlobalClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveFromGlobalClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveFromGlobalClusterCommand)(output, context);
      }
    };
    exports.RemoveFromGlobalClusterCommand = RemoveFromGlobalClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveRoleFromDBClusterCommand.js
var require_RemoveRoleFromDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveRoleFromDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveRoleFromDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RemoveRoleFromDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RemoveRoleFromDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveRoleFromDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveRoleFromDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveRoleFromDBClusterCommand)(output, context);
      }
    };
    exports.RemoveRoleFromDBClusterCommand = RemoveRoleFromDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveRoleFromDBInstanceCommand.js
var require_RemoveRoleFromDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveRoleFromDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveRoleFromDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RemoveRoleFromDBInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RemoveRoleFromDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveRoleFromDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveRoleFromDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveRoleFromDBInstanceCommand)(output, context);
      }
    };
    exports.RemoveRoleFromDBInstanceCommand = RemoveRoleFromDBInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveSourceIdentifierFromSubscriptionCommand.js
var require_RemoveSourceIdentifierFromSubscriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveSourceIdentifierFromSubscriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveSourceIdentifierFromSubscriptionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RemoveSourceIdentifierFromSubscriptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RemoveSourceIdentifierFromSubscriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveSourceIdentifierFromSubscriptionMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RemoveSourceIdentifierFromSubscriptionResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand)(output, context);
      }
    };
    exports.RemoveSourceIdentifierFromSubscriptionCommand = RemoveSourceIdentifierFromSubscriptionCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveTagsFromResourceCommand.js
var require_RemoveTagsFromResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RemoveTagsFromResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveTagsFromResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RemoveTagsFromResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RemoveTagsFromResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveTagsFromResourceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveTagsFromResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveTagsFromResourceCommand)(output, context);
      }
    };
    exports.RemoveTagsFromResourceCommand = RemoveTagsFromResourceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ResetDBClusterParameterGroupCommand.js
var require_ResetDBClusterParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ResetDBClusterParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetDBClusterParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ResetDBClusterParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ResetDBClusterParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResetDBClusterParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DBClusterParameterGroupNameMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryResetDBClusterParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryResetDBClusterParameterGroupCommand)(output, context);
      }
    };
    exports.ResetDBClusterParameterGroupCommand = ResetDBClusterParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/ResetDBParameterGroupCommand.js
var require_ResetDBParameterGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/ResetDBParameterGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetDBParameterGroupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var ResetDBParameterGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "ResetDBParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResetDBParameterGroupMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DBParameterGroupNameMessage.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryResetDBParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryResetDBParameterGroupCommand)(output, context);
      }
    };
    exports.ResetDBParameterGroupCommand = ResetDBParameterGroupCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBClusterFromS3Command.js
var require_RestoreDBClusterFromS3Command = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBClusterFromS3Command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreDBClusterFromS3Command = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RestoreDBClusterFromS3Command = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RestoreDBClusterFromS3Command";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreDBClusterFromS3Message.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RestoreDBClusterFromS3Result.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRestoreDBClusterFromS3Command)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRestoreDBClusterFromS3Command)(output, context);
      }
    };
    exports.RestoreDBClusterFromS3Command = RestoreDBClusterFromS3Command;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBClusterFromSnapshotCommand.js
var require_RestoreDBClusterFromSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBClusterFromSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreDBClusterFromSnapshotCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RestoreDBClusterFromSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RestoreDBClusterFromSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreDBClusterFromSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RestoreDBClusterFromSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRestoreDBClusterFromSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRestoreDBClusterFromSnapshotCommand)(output, context);
      }
    };
    exports.RestoreDBClusterFromSnapshotCommand = RestoreDBClusterFromSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBClusterToPointInTimeCommand.js
var require_RestoreDBClusterToPointInTimeCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBClusterToPointInTimeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreDBClusterToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RestoreDBClusterToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RestoreDBClusterToPointInTimeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreDBClusterToPointInTimeMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RestoreDBClusterToPointInTimeResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRestoreDBClusterToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRestoreDBClusterToPointInTimeCommand)(output, context);
      }
    };
    exports.RestoreDBClusterToPointInTimeCommand = RestoreDBClusterToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBInstanceFromDBSnapshotCommand.js
var require_RestoreDBInstanceFromDBSnapshotCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBInstanceFromDBSnapshotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreDBInstanceFromDBSnapshotCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RestoreDBInstanceFromDBSnapshotCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RestoreDBInstanceFromDBSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreDBInstanceFromDBSnapshotMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RestoreDBInstanceFromDBSnapshotResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRestoreDBInstanceFromDBSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommand)(output, context);
      }
    };
    exports.RestoreDBInstanceFromDBSnapshotCommand = RestoreDBInstanceFromDBSnapshotCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBInstanceFromS3Command.js
var require_RestoreDBInstanceFromS3Command = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBInstanceFromS3Command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreDBInstanceFromS3Command = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RestoreDBInstanceFromS3Command = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RestoreDBInstanceFromS3Command";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreDBInstanceFromS3Message.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RestoreDBInstanceFromS3Result.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRestoreDBInstanceFromS3Command)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRestoreDBInstanceFromS3Command)(output, context);
      }
    };
    exports.RestoreDBInstanceFromS3Command = RestoreDBInstanceFromS3Command;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBInstanceToPointInTimeCommand.js
var require_RestoreDBInstanceToPointInTimeCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RestoreDBInstanceToPointInTimeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreDBInstanceToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RestoreDBInstanceToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RestoreDBInstanceToPointInTimeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreDBInstanceToPointInTimeMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RestoreDBInstanceToPointInTimeResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRestoreDBInstanceToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRestoreDBInstanceToPointInTimeCommand)(output, context);
      }
    };
    exports.RestoreDBInstanceToPointInTimeCommand = RestoreDBInstanceToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/RevokeDBSecurityGroupIngressCommand.js
var require_RevokeDBSecurityGroupIngressCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/RevokeDBSecurityGroupIngressCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RevokeDBSecurityGroupIngressCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var RevokeDBSecurityGroupIngressCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "RevokeDBSecurityGroupIngressCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RevokeDBSecurityGroupIngressMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RevokeDBSecurityGroupIngressResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRevokeDBSecurityGroupIngressCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRevokeDBSecurityGroupIngressCommand)(output, context);
      }
    };
    exports.RevokeDBSecurityGroupIngressCommand = RevokeDBSecurityGroupIngressCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartActivityStreamCommand.js
var require_StartActivityStreamCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartActivityStreamCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartActivityStreamCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StartActivityStreamCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StartActivityStreamCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartActivityStreamRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartActivityStreamResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStartActivityStreamCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStartActivityStreamCommand)(output, context);
      }
    };
    exports.StartActivityStreamCommand = StartActivityStreamCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartDBClusterCommand.js
var require_StartDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StartDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StartDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStartDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStartDBClusterCommand)(output, context);
      }
    };
    exports.StartDBClusterCommand = StartDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartDBInstanceAutomatedBackupsReplicationCommand.js
var require_StartDBInstanceAutomatedBackupsReplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartDBInstanceAutomatedBackupsReplicationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDBInstanceAutomatedBackupsReplicationCommand = void 0;
    var middleware_sdk_rds_1 = require_dist_cjs12();
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StartDBInstanceAutomatedBackupsReplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_sdk_rds_1.getCrossRegionPresignedUrlPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StartDBInstanceAutomatedBackupsReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartDBInstanceAutomatedBackupsReplicationMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartDBInstanceAutomatedBackupsReplicationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand)(output, context);
      }
    };
    exports.StartDBInstanceAutomatedBackupsReplicationCommand = StartDBInstanceAutomatedBackupsReplicationCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartDBInstanceCommand.js
var require_StartDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StartDBInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StartDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartDBInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStartDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStartDBInstanceCommand)(output, context);
      }
    };
    exports.StartDBInstanceCommand = StartDBInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartExportTaskCommand.js
var require_StartExportTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StartExportTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartExportTaskCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StartExportTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StartExportTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartExportTaskMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExportTask.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStartExportTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStartExportTaskCommand)(output, context);
      }
    };
    exports.StartExportTaskCommand = StartExportTaskCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopActivityStreamCommand.js
var require_StopActivityStreamCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopActivityStreamCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopActivityStreamCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StopActivityStreamCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StopActivityStreamCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StopActivityStreamRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StopActivityStreamResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStopActivityStreamCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStopActivityStreamCommand)(output, context);
      }
    };
    exports.StopActivityStreamCommand = StopActivityStreamCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopDBClusterCommand.js
var require_StopDBClusterCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopDBClusterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopDBClusterCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StopDBClusterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StopDBClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StopDBClusterMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StopDBClusterResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStopDBClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStopDBClusterCommand)(output, context);
      }
    };
    exports.StopDBClusterCommand = StopDBClusterCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopDBInstanceAutomatedBackupsReplicationCommand.js
var require_StopDBInstanceAutomatedBackupsReplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopDBInstanceAutomatedBackupsReplicationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopDBInstanceAutomatedBackupsReplicationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StopDBInstanceAutomatedBackupsReplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StopDBInstanceAutomatedBackupsReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StopDBInstanceAutomatedBackupsReplicationMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StopDBInstanceAutomatedBackupsReplicationResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand)(output, context);
      }
    };
    exports.StopDBInstanceAutomatedBackupsReplicationCommand = StopDBInstanceAutomatedBackupsReplicationCommand;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopDBInstanceCommand.js
var require_StopDBInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/StopDBInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopDBInstanceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var StopDBInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "RDSClient";
        const commandName = "StopDBInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StopDBInstanceMessage.filterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StopDBInstanceResult.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStopDBInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStopDBInstanceCommand)(output, context);
      }
    };
    exports.StopDBInstanceCommand = StopDBInstanceCommand;
  }
});

// node_modules/@aws-sdk/config-resolver/node_modules/tslib/tslib.js
var require_tslib9 = __commonJS({
  "node_modules/@aws-sdk/config-resolver/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-config-provider/node_modules/tslib/tslib.js
var require_tslib10 = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib10();
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs13();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs13();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return __spreadProps(__spreadValues({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint)
      });
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return __spreadProps(__spreadValues({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)(__spreadProps(__spreadValues({}, input), { useDualstackEndpoint, useFipsEndpoint })),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint
      });
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports.getRealRegion = getRealRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return __spreadProps(__spreadValues({}, input), {
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        }
      });
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return __spreadValues(__spreadValues({
        partition,
        signingService,
        hostname
      }, signingRegion && { signingRegion }), ((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
        signingService: regionHash[resolvedRegion].signingService
      });
    };
    exports.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = __spreadProps(__spreadValues({}, request.headers), {
                [CONTENT_LENGTH_HEADER]: String(length)
              });
            } catch (error) {
            }
          }
        }
        return next(__spreadProps(__spreadValues({}, args), {
          request
        }));
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs4();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        request.headers["host"] = request.hostname;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/node_modules/tslib/tslib.js
var require_tslib11 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === "function") {
        const _a = response.output, { $metadata } = _a, outputWithoutMetadata = __objRest(_a, ["$metadata"]);
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib11();
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next(__spreadProps(__spreadValues({}, args), {
        request
      }));
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/node_modules/tslib/tslib.js
var require_tslib12 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants3();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs19();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    var _default = md5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  "node_modules/uuid/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants4();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : constants_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var constants_1 = require_constants4();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs19();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs19();
    var uuid_1 = require_dist();
    var config_1 = require_config2();
    var constants_1 = require_constants4();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const _a = options !== null && options !== void 0 ? options : {}, { rateLimiter } = _a, superOptions = __objRest(_a, ["rateLimiter"]);
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy();
    var config_1 = require_config2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS);
      return __spreadProps(__spreadValues({}, input), {
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        }
      });
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants4();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports.retryMiddleware = retryMiddleware;
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    });
    exports.getRetryPlugin = getRetryPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// node_modules/@aws-sdk/middleware-signing/node_modules/tslib/tslib.js
var require_tslib13 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/property-provider/node_modules/tslib/tslib.js
var require_tslib14 = __commonJS({
  "node_modules/@aws-sdk/property-provider/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib14();
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs21();
    var signature_v4_1 = require_dist_cjs9();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () => normalizeProvider(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = __spreadProps(__spreadValues({}, input), {
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          });
          const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new signerConstructor(params);
        });
      }
      return __spreadProps(__spreadValues({}, input), {
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      });
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return __spreadProps(__spreadValues({}, input), {
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      });
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === "object") {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return normalizeProvider(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const signer = await options.signer();
      const output = await next(__spreadProps(__spreadValues({}, args), {
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: context["signing_region"],
          signingService: context["signing_service"]
        })
      })).catch((error) => {
        var _a;
        const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/node_modules/tslib/tslib.js
var require_tslib15 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return __spreadProps(__spreadValues({}, input), {
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      });
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next(__spreadProps(__spreadValues({}, args), {
        request
      }));
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib15();
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// node_modules/@aws-sdk/client-rds/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-rds/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-rds",
      description: "AWS SDK for JavaScript Rds Client for Node.js, Browser and React Native",
      version: "3.128.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.128.0",
        "@aws-sdk/config-resolver": "3.128.0",
        "@aws-sdk/credential-provider-node": "3.128.0",
        "@aws-sdk/fetch-http-handler": "3.127.0",
        "@aws-sdk/hash-node": "3.127.0",
        "@aws-sdk/invalid-dependency": "3.127.0",
        "@aws-sdk/middleware-content-length": "3.127.0",
        "@aws-sdk/middleware-host-header": "3.127.0",
        "@aws-sdk/middleware-logger": "3.127.0",
        "@aws-sdk/middleware-recursion-detection": "3.127.0",
        "@aws-sdk/middleware-retry": "3.127.0",
        "@aws-sdk/middleware-sdk-rds": "3.128.0",
        "@aws-sdk/middleware-serde": "3.127.0",
        "@aws-sdk/middleware-signing": "3.128.0",
        "@aws-sdk/middleware-stack": "3.127.0",
        "@aws-sdk/middleware-user-agent": "3.127.0",
        "@aws-sdk/node-config-provider": "3.127.0",
        "@aws-sdk/node-http-handler": "3.127.0",
        "@aws-sdk/protocol-http": "3.127.0",
        "@aws-sdk/smithy-client": "3.127.0",
        "@aws-sdk/types": "3.127.0",
        "@aws-sdk/url-parser": "3.127.0",
        "@aws-sdk/util-base64-browser": "3.109.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.127.0",
        "@aws-sdk/util-defaults-mode-node": "3.128.0",
        "@aws-sdk/util-user-agent-browser": "3.127.0",
        "@aws-sdk/util-user-agent-node": "3.127.0",
        "@aws-sdk/util-utf8-browser": "3.109.0",
        "@aws-sdk/util-utf8-node": "3.109.0",
        "@aws-sdk/util-waiter": "3.127.0",
        entities: "2.2.0",
        "fast-xml-parser": "3.19.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-rds",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-rds"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/node_modules/tslib/tslib.js
var require_tslib16 = __commonJS({
  "node_modules/@aws-sdk/client-sts/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponse = exports.GetSessionTokenRequest = exports.GetFederationTokenResponse = exports.FederatedUser = exports.GetFederationTokenRequest = exports.GetCallerIdentityResponse = exports.GetCallerIdentityRequest = exports.GetAccessKeyInfoResponse = exports.GetAccessKeyInfoRequest = exports.InvalidAuthorizationMessageException = exports.DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageRequest = exports.IDPCommunicationErrorException = exports.AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityRequest = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLRequest = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = exports.AssumeRoleResponse = exports.Credentials = exports.AssumeRoleRequest = exports.Tag = exports.PolicyDescriptorType = exports.AssumedRoleUser = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var AssumedRoleUser;
    (function(AssumedRoleUser2) {
      AssumedRoleUser2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumedRoleUser = exports.AssumedRoleUser || (exports.AssumedRoleUser = {}));
    var PolicyDescriptorType;
    (function(PolicyDescriptorType2) {
      PolicyDescriptorType2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PolicyDescriptorType = exports.PolicyDescriptorType || (exports.PolicyDescriptorType = {}));
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Tag = exports.Tag || (exports.Tag = {}));
    var AssumeRoleRequest;
    (function(AssumeRoleRequest2) {
      AssumeRoleRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleRequest = exports.AssumeRoleRequest || (exports.AssumeRoleRequest = {}));
    var Credentials;
    (function(Credentials2) {
      Credentials2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Credentials = exports.Credentials || (exports.Credentials = {}));
    var AssumeRoleResponse;
    (function(AssumeRoleResponse2) {
      AssumeRoleResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleResponse = exports.AssumeRoleResponse || (exports.AssumeRoleResponse = {}));
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExpiredTokenException",
          $fault: "client"
        }, opts));
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "MalformedPolicyDocumentException",
          $fault: "client"
        }, opts));
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "PackedPolicyTooLargeException",
          $fault: "client"
        }, opts));
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "RegionDisabledException",
          $fault: "client"
        }, opts));
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var AssumeRoleWithSAMLRequest;
    (function(AssumeRoleWithSAMLRequest2) {
      AssumeRoleWithSAMLRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithSAMLRequest = exports.AssumeRoleWithSAMLRequest || (exports.AssumeRoleWithSAMLRequest = {}));
    var AssumeRoleWithSAMLResponse;
    (function(AssumeRoleWithSAMLResponse2) {
      AssumeRoleWithSAMLResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLResponse || (exports.AssumeRoleWithSAMLResponse = {}));
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPRejectedClaimException",
          $fault: "client"
        }, opts));
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidIdentityTokenException",
          $fault: "client"
        }, opts));
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var AssumeRoleWithWebIdentityRequest;
    (function(AssumeRoleWithWebIdentityRequest2) {
      AssumeRoleWithWebIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithWebIdentityRequest = exports.AssumeRoleWithWebIdentityRequest || (exports.AssumeRoleWithWebIdentityRequest = {}));
    var AssumeRoleWithWebIdentityResponse;
    (function(AssumeRoleWithWebIdentityResponse2) {
      AssumeRoleWithWebIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityResponse || (exports.AssumeRoleWithWebIdentityResponse = {}));
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPCommunicationErrorException",
          $fault: "client"
        }, opts));
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var DecodeAuthorizationMessageRequest;
    (function(DecodeAuthorizationMessageRequest2) {
      DecodeAuthorizationMessageRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DecodeAuthorizationMessageRequest = exports.DecodeAuthorizationMessageRequest || (exports.DecodeAuthorizationMessageRequest = {}));
    var DecodeAuthorizationMessageResponse;
    (function(DecodeAuthorizationMessageResponse2) {
      DecodeAuthorizationMessageResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageResponse || (exports.DecodeAuthorizationMessageResponse = {}));
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidAuthorizationMessageException",
          $fault: "client"
        }, opts));
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var GetAccessKeyInfoRequest;
    (function(GetAccessKeyInfoRequest2) {
      GetAccessKeyInfoRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetAccessKeyInfoRequest = exports.GetAccessKeyInfoRequest || (exports.GetAccessKeyInfoRequest = {}));
    var GetAccessKeyInfoResponse;
    (function(GetAccessKeyInfoResponse2) {
      GetAccessKeyInfoResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetAccessKeyInfoResponse = exports.GetAccessKeyInfoResponse || (exports.GetAccessKeyInfoResponse = {}));
    var GetCallerIdentityRequest;
    (function(GetCallerIdentityRequest2) {
      GetCallerIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCallerIdentityRequest = exports.GetCallerIdentityRequest || (exports.GetCallerIdentityRequest = {}));
    var GetCallerIdentityResponse;
    (function(GetCallerIdentityResponse2) {
      GetCallerIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCallerIdentityResponse = exports.GetCallerIdentityResponse || (exports.GetCallerIdentityResponse = {}));
    var GetFederationTokenRequest;
    (function(GetFederationTokenRequest2) {
      GetFederationTokenRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetFederationTokenRequest = exports.GetFederationTokenRequest || (exports.GetFederationTokenRequest = {}));
    var FederatedUser;
    (function(FederatedUser2) {
      FederatedUser2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FederatedUser = exports.FederatedUser || (exports.FederatedUser = {}));
    var GetFederationTokenResponse;
    (function(GetFederationTokenResponse2) {
      GetFederationTokenResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetFederationTokenResponse = exports.GetFederationTokenResponse || (exports.GetFederationTokenResponse = {}));
    var GetSessionTokenRequest;
    (function(GetSessionTokenRequest2) {
      GetSessionTokenRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSessionTokenRequest = exports.GetSessionTokenRequest || (exports.GetSessionTokenRequest = {}));
    var GetSessionTokenResponse;
    (function(GetSessionTokenResponse2) {
      GetSessionTokenResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSessionTokenResponse = exports.GetSessionTokenResponse || (exports.GetSessionTokenResponse = {}));
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleRequest(input, context)), {
        Action: "AssumeRole",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleWithSAMLRequest(input, context)), {
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context)), {
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDecodeAuthorizationMessageRequest(input, context)), {
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetAccessKeyInfoRequest(input, context)), {
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetCallerIdentityRequest(input, context)), {
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetFederationTokenRequest(input, context)), {
        Action: "GetFederationToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetSessionTokenRequest(input, context)), {
        Action: "GetSessionToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationErrorException":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys !== void 0 && input.TransitiveTagKeys !== null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId !== void 0 && input.ExternalId !== null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity !== void 0 && input.SourceIdentity !== null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn !== void 0 && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion !== void 0 && input.SAMLAssertion !== null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken !== void 0 && input.WebIdentityToken !== null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId !== void 0 && input.ProviderId !== null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage !== void 0 && input.EncodedMessage !== null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId !== void 0 && input.AccessKeyId !== null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn !== void 0 && input.arn !== null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key !== void 0 && input.Key !== null) {
        entries["Key"] = input.Key;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
          attributeNamePrefix: "",
          ignoreAttributes: false,
          parseNodeValue: false,
          trimValues: false,
          tagValueProcessor: (val) => val.trim() === "" && val.includes("\n") ? "" : (0, entities_1.decodeHTML)(val)
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query2();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs22();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)(__spreadProps(__spreadValues({}, input), {
      stsClientCtor
    }));
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.128.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.128.0",
        "@aws-sdk/credential-provider-node": "3.128.0",
        "@aws-sdk/fetch-http-handler": "3.127.0",
        "@aws-sdk/hash-node": "3.127.0",
        "@aws-sdk/invalid-dependency": "3.127.0",
        "@aws-sdk/middleware-content-length": "3.127.0",
        "@aws-sdk/middleware-host-header": "3.127.0",
        "@aws-sdk/middleware-logger": "3.127.0",
        "@aws-sdk/middleware-recursion-detection": "3.127.0",
        "@aws-sdk/middleware-retry": "3.127.0",
        "@aws-sdk/middleware-sdk-sts": "3.128.0",
        "@aws-sdk/middleware-serde": "3.127.0",
        "@aws-sdk/middleware-signing": "3.128.0",
        "@aws-sdk/middleware-stack": "3.127.0",
        "@aws-sdk/middleware-user-agent": "3.127.0",
        "@aws-sdk/node-config-provider": "3.127.0",
        "@aws-sdk/node-http-handler": "3.127.0",
        "@aws-sdk/protocol-http": "3.127.0",
        "@aws-sdk/smithy-client": "3.127.0",
        "@aws-sdk/types": "3.127.0",
        "@aws-sdk/url-parser": "3.127.0",
        "@aws-sdk/util-base64-browser": "3.109.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.127.0",
        "@aws-sdk/util-defaults-mode-node": "3.128.0",
        "@aws-sdk/util-user-agent-browser": "3.127.0",
        "@aws-sdk/util-user-agent-node": "3.127.0",
        "@aws-sdk/util-utf8-browser": "3.109.0",
        "@aws-sdk/util-utf8-node": "3.109.0",
        entities: "2.2.0",
        "fast-xml-parser": "3.19.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider(__spreadValues({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor)
    }, input));
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/node_modules/tslib/tslib.js
var require_tslib17 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-env/node_modules/tslib/tslib.js
var require_tslib18 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs21();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return __spreadValues(__spreadValues({
          accessKeyId,
          secretAccessKey
        }, sessionToken && { sessionToken }), expiry && { expiration: new Date(expiry) });
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib18();
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/node_modules/tslib/tslib.js
var require_tslib19 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/node_modules/tslib/tslib.js
var require_tslib20 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(ssoStartUrl).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), { [profileKeyRegex.exec(key)[2]]: value }), __spreadValues({}, data.default && { default: data.default }));
    exports.getProfileData = getProfileData;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return __spreadValues(__spreadValues({}, parsedFiles.configFile), parsedFiles.credentialsFile);
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types2 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib20();
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-imds/node_modules/tslib/tslib.js
var require_tslib21 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs21();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)(__spreadProps(__spreadValues({
          method: "GET"
        }, options), {
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        }));
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs21();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = __spreadProps(__spreadValues({}, options.headers), {
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        });
      }
      const buffer = await (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), {
        timeout
      }));
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return __spreadProps(__spreadValues({}, parsed), {
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        });
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// node_modules/@aws-sdk/node-config-provider/node_modules/tslib/tslib.js
var require_tslib22 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs21();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs21();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var fromSharedConfigFiles = (configSelector, _a = {}) => {
      var _b = _a, { preferredFile = "config" } = _b, init = __objRest(_b, ["preferredFile"]);
      return async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile = preferredFile === "config" ? __spreadValues(__spreadValues({}, profileFromCredentials), profileFromConfig) : __spreadValues(__spreadValues({}, profileFromConfig), profileFromCredentials);
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
        }
      };
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs21();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs21();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib22();
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs28();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs27();
    var url_parser_1 = require_dist_cjs29();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return __spreadProps(__spreadValues(__spreadValues({}, credentials), originalExpiration ? { originalExpiration } : {}), {
        expiration: newExpiration
      });
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs21();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
        } else {
          let token;
          try {
            token = (await getMetadataToken(__spreadProps(__spreadValues({}, endpoint), { timeout }))).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
          }
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), {
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          }));
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), {
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }));
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), { path: IMDS_PATH }))).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), {
        path: IMDS_PATH + profile
      }))).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types3 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = require_tslib21();
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types3(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs25();
    var credential_provider_imds_1 = require_dist_cjs30();
    var property_provider_1 = require_dist_cjs21();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs21();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, __spreadProps(__spreadValues({}, visitedProfiles), {
        [source_profile]: true
      })) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/tslib/tslib.js
var require_tslib23 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/node_modules/tslib/tslib.js
var require_tslib24 = __commonJS({
  "node_modules/@aws-sdk/client-sso/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequest = exports.ListAccountsResponse = exports.ListAccountsRequest = exports.ListAccountRolesResponse = exports.RoleInfo = exports.ListAccountRolesRequest = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = exports.GetRoleCredentialsResponse = exports.RoleCredentials = exports.GetRoleCredentialsRequest = exports.AccountInfo = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException_1 = require_SSOServiceException();
    var AccountInfo;
    (function(AccountInfo2) {
      AccountInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AccountInfo = exports.AccountInfo || (exports.AccountInfo = {}));
    var GetRoleCredentialsRequest;
    (function(GetRoleCredentialsRequest2) {
      GetRoleCredentialsRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(GetRoleCredentialsRequest = exports.GetRoleCredentialsRequest || (exports.GetRoleCredentialsRequest = {}));
    var RoleCredentials;
    (function(RoleCredentials2) {
      RoleCredentials2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING }), obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING });
    })(RoleCredentials = exports.RoleCredentials || (exports.RoleCredentials = {}));
    var GetRoleCredentialsResponse;
    (function(GetRoleCredentialsResponse2) {
      GetRoleCredentialsResponse2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.roleCredentials && { roleCredentials: RoleCredentials.filterSensitiveLog(obj.roleCredentials) });
    })(GetRoleCredentialsResponse = exports.GetRoleCredentialsResponse || (exports.GetRoleCredentialsResponse = {}));
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRequestException",
          $fault: "client"
        }, opts));
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ResourceNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TooManyRequestsException",
          $fault: "client"
        }, opts));
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "UnauthorizedException",
          $fault: "client"
        }, opts));
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var ListAccountRolesRequest;
    (function(ListAccountRolesRequest2) {
      ListAccountRolesRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(ListAccountRolesRequest = exports.ListAccountRolesRequest || (exports.ListAccountRolesRequest = {}));
    var RoleInfo;
    (function(RoleInfo2) {
      RoleInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RoleInfo = exports.RoleInfo || (exports.RoleInfo = {}));
    var ListAccountRolesResponse;
    (function(ListAccountRolesResponse2) {
      ListAccountRolesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListAccountRolesResponse = exports.ListAccountRolesResponse || (exports.ListAccountRolesResponse = {}));
    var ListAccountsRequest;
    (function(ListAccountsRequest2) {
      ListAccountsRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(ListAccountsRequest = exports.ListAccountsRequest || (exports.ListAccountsRequest = {}));
    var ListAccountsResponse;
    (function(ListAccountsResponse2) {
      ListAccountsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListAccountsResponse = exports.ListAccountsResponse || (exports.ListAccountsResponse = {}));
    var LogoutRequest;
    (function(LogoutRequest2) {
      LogoutRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(LogoutRequest = exports.LogoutRequest || (exports.LogoutRequest = {}));
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = __spreadValues(__spreadValues({}, input.roleName !== void 0 && { role_name: input.roleName }), input.accountId !== void 0 && { account_id: input.accountId });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = __spreadValues(__spreadValues(__spreadValues({}, input.nextToken !== void 0 && { next_token: input.nextToken }), input.maxResults !== void 0 && { max_result: input.maxResults.toString() }), input.accountId !== void 0 && { account_id: input.accountId });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = __spreadValues(__spreadValues({}, input.nextToken !== void 0 && { next_token: input.nextToken }), input.maxResults !== void 0 && { max_result: input.maxResults.toString() });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        roleCredentials: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials !== void 0 && data.roleCredentials !== null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        nextToken: void 0,
        roleList: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList !== void 0 && data.roleList !== null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        accountList: void 0,
        nextToken: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList !== void 0 && data.accountList !== null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output)
      };
      await collectBody(output.body, context);
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
            $fault: "client",
            $metadata
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.128.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.128.0",
        "@aws-sdk/fetch-http-handler": "3.127.0",
        "@aws-sdk/hash-node": "3.127.0",
        "@aws-sdk/invalid-dependency": "3.127.0",
        "@aws-sdk/middleware-content-length": "3.127.0",
        "@aws-sdk/middleware-host-header": "3.127.0",
        "@aws-sdk/middleware-logger": "3.127.0",
        "@aws-sdk/middleware-recursion-detection": "3.127.0",
        "@aws-sdk/middleware-retry": "3.127.0",
        "@aws-sdk/middleware-serde": "3.127.0",
        "@aws-sdk/middleware-stack": "3.127.0",
        "@aws-sdk/middleware-user-agent": "3.127.0",
        "@aws-sdk/node-config-provider": "3.127.0",
        "@aws-sdk/node-http-handler": "3.127.0",
        "@aws-sdk/protocol-http": "3.127.0",
        "@aws-sdk/smithy-client": "3.127.0",
        "@aws-sdk/types": "3.127.0",
        "@aws-sdk/url-parser": "3.127.0",
        "@aws-sdk/util-base64-browser": "3.109.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.127.0",
        "@aws-sdk/util-defaults-mode-node": "3.128.0",
        "@aws-sdk/util-user-agent-browser": "3.127.0",
        "@aws-sdk/util-user-agent-node": "3.127.0",
        "@aws-sdk/util-utf8-browser": "3.109.0",
        "@aws-sdk/util-utf8-node": "3.109.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs8();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs31();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret)) : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/node_modules/tslib/tslib.js
var require_tslib25 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs10();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs10();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request(__spreadProps(__spreadValues({}, request.headers), {
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          }));
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib25();
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs31();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports.fromBase64 = fromBase64;
    function toBase64(input) {
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    }
    exports.toBase64 = toBase64;
  }
});

// node_modules/@aws-sdk/util-body-length-node/node_modules/tslib/tslib.js
var require_tslib26 = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib26();
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && module2.require && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs27();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs31();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs14();
    var regionHash = {
      "ap-east-1": {
        variants: [
          {
            hostname: "portal.sso.ap-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-east-1"
      },
      "ap-northeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-1"
      },
      "ap-northeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-2"
      },
      "ap-northeast-3": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-3.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-3"
      },
      "ap-south-1": {
        variants: [
          {
            hostname: "portal.sso.ap-south-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-south-1"
      },
      "ap-southeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-1"
      },
      "ap-southeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-2"
      },
      "ca-central-1": {
        variants: [
          {
            hostname: "portal.sso.ca-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ca-central-1"
      },
      "eu-central-1": {
        variants: [
          {
            hostname: "portal.sso.eu-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-central-1"
      },
      "eu-north-1": {
        variants: [
          {
            hostname: "portal.sso.eu-north-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-north-1"
      },
      "eu-south-1": {
        variants: [
          {
            hostname: "portal.sso.eu-south-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-south-1"
      },
      "eu-west-1": {
        variants: [
          {
            hostname: "portal.sso.eu-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-1"
      },
      "eu-west-2": {
        variants: [
          {
            hostname: "portal.sso.eu-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-2"
      },
      "eu-west-3": {
        variants: [
          {
            hostname: "portal.sso.eu-west-3.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-3"
      },
      "me-south-1": {
        variants: [
          {
            hostname: "portal.sso.me-south-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "me-south-1"
      },
      "sa-east-1": {
        variants: [
          {
            hostname: "portal.sso.sa-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "sa-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-2": {
        variants: [
          {
            hostname: "portal.sso.us-east-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-2"
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-east-1"
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-west-1"
      },
      "us-west-2": {
        variants: [
          {
            hostname: "portal.sso.us-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-west-2"
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-west-1"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, __spreadProps(__spreadValues({}, options), {
      signingService: "awsssoportal",
      regionHash,
      partitionHash
    }));
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs29();
    var endpoints_1 = require_endpoints();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2019-06-10",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SSO",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/tslib/tslib.js
var require_tslib27 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs14();
    var credential_provider_imds_1 = require_dist_cjs30();
    var node_config_provider_1 = require_dist_cjs27();
    var property_provider_1 = require_dist_cjs21();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)(__spreadProps(__spreadValues({}, endpoint), { path: constants_1.IMDS_REGION_PATH }))).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib27();
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib24();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs14();
    var hash_node_1 = require_dist_cjs32();
    var middleware_retry_1 = require_dist_cjs20();
    var node_config_provider_1 = require_dist_cjs27();
    var node_http_handler_1 = require_dist_cjs33();
    var util_base64_node_1 = require_dist_cjs34();
    var util_body_length_node_1 = require_dist_cjs35();
    var util_user_agent_node_1 = require_dist_cjs36();
    var util_utf8_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs38();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_d = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _d !== void 0 ? _d : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_e = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _e !== void 0 ? _e : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_f = config === null || config === void 0 ? void 0 : config.region) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_g = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _g !== void 0 ? _g : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_h = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _h !== void 0 ? _h : (0, node_config_provider_1.loadConfig)(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_j = config === null || config === void 0 ? void 0 : config.sha256) !== null && _j !== void 0 ? _j : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_k = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _k !== void 0 ? _k : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_l = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _l !== void 0 ? _l : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_o = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _o !== void 0 ? _o : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.toUtf8
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs14();
    var middleware_content_length_1 = require_dist_cjs15();
    var middleware_host_header_1 = require_dist_cjs16();
    var middleware_logger_1 = require_dist_cjs17();
    var middleware_recursion_detection_1 = require_dist_cjs18();
    var middleware_retry_1 = require_dist_cjs20();
    var middleware_user_agent_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_4);
        super(_config_5);
        this.config = _config_5;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSO = SSO;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib24();
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib24();
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib24();
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = require_tslib24();
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs39();
    var property_provider_1 = require_dist_cjs21();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      try {
        token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs21();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs21();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName];
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types4 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib23();
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs40();
    var credential_provider_sso_2 = require_dist_cjs40();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/tslib/tslib.js
var require_tslib28 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs21();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs21();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)(__spreadProps(__spreadValues({}, init), {
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      }))();
    };
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib28();
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs41();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs21();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib19();
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-process/node_modules/tslib/tslib.js
var require_tslib29 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return __spreadValues(__spreadValues({
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey
      }, data.SessionToken && { sessionToken: data.SessionToken }), data.Expiration && { expiration: new Date(data.Expiration) });
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs21();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib29();
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs30();
    var property_provider_1 = require_dist_cjs21();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs25();
    var credential_provider_ini_1 = require_dist_cjs42();
    var credential_provider_process_1 = require_dist_cjs43();
    var credential_provider_sso_1 = require_dist_cjs40();
    var credential_provider_web_identity_1 = require_dist_cjs41();
    var property_provider_1 = require_dist_cjs21();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib17();
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js
var require_endpoints2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs14();
    var regionHash = {
      "aws-global": {
        variants: [
          {
            hostname: "sts.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "sts-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "sts-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "sts.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "sts.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "sts-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "sts-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "aws-global",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-1-fips",
          "us-east-2",
          "us-east-2-fips",
          "us-west-1",
          "us-west-1-fips",
          "us-west-2",
          "us-west-2-fips"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-east-1-fips", "us-gov-west-1", "us-gov-west-1-fips"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, __spreadProps(__spreadValues({}, options), {
      signingService: "sts",
      regionHash,
      partitionHash
    }));
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs29();
    var endpoints_1 = require_endpoints2();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2011-06-15",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "STS",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib16();
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs14();
    var credential_provider_node_1 = require_dist_cjs44();
    var hash_node_1 = require_dist_cjs32();
    var middleware_retry_1 = require_dist_cjs20();
    var node_config_provider_1 = require_dist_cjs27();
    var node_http_handler_1 = require_dist_cjs33();
    var util_base64_node_1 = require_dist_cjs34();
    var util_body_length_node_1 = require_dist_cjs35();
    var util_user_agent_node_1 = require_dist_cjs36();
    var util_utf8_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs38();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs14();
    var middleware_content_length_1 = require_dist_cjs15();
    var middleware_host_header_1 = require_dist_cjs16();
    var middleware_logger_1 = require_dist_cjs17();
    var middleware_recursion_detection_1 = require_dist_cjs18();
    var middleware_retry_1 = require_dist_cjs20();
    var middleware_sdk_sts_1 = require_dist_cjs24();
    var middleware_user_agent_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig2();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_4, { stsClientCtor: STSClient });
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.STS = STS;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib16();
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getDefaultRoleAssumer = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider(__spreadValues({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input)
    }, input));
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib16();
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = require_tslib16();
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/endpoints.js
var require_endpoints3 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs14();
    var regionHash = {
      "ca-central-1": {
        variants: [
          {
            hostname: "rds-fips.ca-central-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-1": {
        variants: [
          {
            hostname: "rds-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "rds-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "rds.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "rds.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "rds-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "rds-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "ca-central-1-fips",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "rds-fips.ca-central-1",
          "rds-fips.us-east-1",
          "rds-fips.us-east-2",
          "rds-fips.us-west-1",
          "rds-fips.us-west-2",
          "rds.ca-central-1",
          "rds.us-east-1",
          "rds.us-east-2",
          "rds.us-west-1",
          "rds.us-west-2",
          "sa-east-1",
          "us-east-1",
          "us-east-1-fips",
          "us-east-2",
          "us-east-2-fips",
          "us-west-1",
          "us-west-1-fips",
          "us-west-2",
          "us-west-2-fips"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "rds.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "rds-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "rds-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "rds.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "rds.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "rds-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "rds-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "rds.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "rds.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "rds-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "rds.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "rds-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: [
          "rds.us-gov-east-1",
          "rds.us-gov-west-1",
          "us-gov-east-1",
          "us-gov-east-1-fips",
          "us-gov-west-1",
          "us-gov-west-1-fips"
        ],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "rds.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "rds.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "rds-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "rds.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, __spreadProps(__spreadValues({}, options), {
      signingService: "rds",
      regionHash,
      partitionHash
    }));
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs29();
    var endpoints_1 = require_endpoints3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2014-10-31",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "RDS",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs45();
    var config_resolver_1 = require_dist_cjs14();
    var credential_provider_node_1 = require_dist_cjs44();
    var hash_node_1 = require_dist_cjs32();
    var middleware_retry_1 = require_dist_cjs20();
    var node_config_provider_1 = require_dist_cjs27();
    var node_http_handler_1 = require_dist_cjs33();
    var util_base64_node_1 = require_dist_cjs34();
    var util_body_length_node_1 = require_dist_cjs35();
    var util_user_agent_node_1 = require_dist_cjs36();
    var util_utf8_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs38();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/RDSClient.js
var require_RDSClient = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/RDSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RDSClient = void 0;
    var config_resolver_1 = require_dist_cjs14();
    var middleware_content_length_1 = require_dist_cjs15();
    var middleware_host_header_1 = require_dist_cjs16();
    var middleware_logger_1 = require_dist_cjs17();
    var middleware_recursion_detection_1 = require_dist_cjs18();
    var middleware_retry_1 = require_dist_cjs20();
    var middleware_signing_1 = require_dist_cjs22();
    var middleware_user_agent_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig3();
    var RDSClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.RDSClient = RDSClient2;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/RDS.js
var require_RDS = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/RDS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RDS = void 0;
    var AddRoleToDBClusterCommand_1 = require_AddRoleToDBClusterCommand();
    var AddRoleToDBInstanceCommand_1 = require_AddRoleToDBInstanceCommand();
    var AddSourceIdentifierToSubscriptionCommand_1 = require_AddSourceIdentifierToSubscriptionCommand();
    var AddTagsToResourceCommand_1 = require_AddTagsToResourceCommand();
    var ApplyPendingMaintenanceActionCommand_1 = require_ApplyPendingMaintenanceActionCommand();
    var AuthorizeDBSecurityGroupIngressCommand_1 = require_AuthorizeDBSecurityGroupIngressCommand();
    var BacktrackDBClusterCommand_1 = require_BacktrackDBClusterCommand();
    var CancelExportTaskCommand_1 = require_CancelExportTaskCommand();
    var CopyDBClusterParameterGroupCommand_1 = require_CopyDBClusterParameterGroupCommand();
    var CopyDBClusterSnapshotCommand_1 = require_CopyDBClusterSnapshotCommand();
    var CopyDBParameterGroupCommand_1 = require_CopyDBParameterGroupCommand();
    var CopyDBSnapshotCommand_1 = require_CopyDBSnapshotCommand();
    var CopyOptionGroupCommand_1 = require_CopyOptionGroupCommand();
    var CreateCustomDBEngineVersionCommand_1 = require_CreateCustomDBEngineVersionCommand();
    var CreateDBClusterCommand_1 = require_CreateDBClusterCommand();
    var CreateDBClusterEndpointCommand_1 = require_CreateDBClusterEndpointCommand();
    var CreateDBClusterParameterGroupCommand_1 = require_CreateDBClusterParameterGroupCommand();
    var CreateDBClusterSnapshotCommand_1 = require_CreateDBClusterSnapshotCommand();
    var CreateDBInstanceCommand_1 = require_CreateDBInstanceCommand();
    var CreateDBInstanceReadReplicaCommand_1 = require_CreateDBInstanceReadReplicaCommand();
    var CreateDBParameterGroupCommand_1 = require_CreateDBParameterGroupCommand();
    var CreateDBProxyCommand_1 = require_CreateDBProxyCommand();
    var CreateDBProxyEndpointCommand_1 = require_CreateDBProxyEndpointCommand();
    var CreateDBSecurityGroupCommand_1 = require_CreateDBSecurityGroupCommand();
    var CreateDBSnapshotCommand_1 = require_CreateDBSnapshotCommand();
    var CreateDBSubnetGroupCommand_1 = require_CreateDBSubnetGroupCommand();
    var CreateEventSubscriptionCommand_1 = require_CreateEventSubscriptionCommand();
    var CreateGlobalClusterCommand_1 = require_CreateGlobalClusterCommand();
    var CreateOptionGroupCommand_1 = require_CreateOptionGroupCommand();
    var DeleteCustomDBEngineVersionCommand_1 = require_DeleteCustomDBEngineVersionCommand();
    var DeleteDBClusterCommand_1 = require_DeleteDBClusterCommand();
    var DeleteDBClusterEndpointCommand_1 = require_DeleteDBClusterEndpointCommand();
    var DeleteDBClusterParameterGroupCommand_1 = require_DeleteDBClusterParameterGroupCommand();
    var DeleteDBClusterSnapshotCommand_1 = require_DeleteDBClusterSnapshotCommand();
    var DeleteDBInstanceAutomatedBackupCommand_1 = require_DeleteDBInstanceAutomatedBackupCommand();
    var DeleteDBInstanceCommand_1 = require_DeleteDBInstanceCommand();
    var DeleteDBParameterGroupCommand_1 = require_DeleteDBParameterGroupCommand();
    var DeleteDBProxyCommand_1 = require_DeleteDBProxyCommand();
    var DeleteDBProxyEndpointCommand_1 = require_DeleteDBProxyEndpointCommand();
    var DeleteDBSecurityGroupCommand_1 = require_DeleteDBSecurityGroupCommand();
    var DeleteDBSnapshotCommand_1 = require_DeleteDBSnapshotCommand();
    var DeleteDBSubnetGroupCommand_1 = require_DeleteDBSubnetGroupCommand();
    var DeleteEventSubscriptionCommand_1 = require_DeleteEventSubscriptionCommand();
    var DeleteGlobalClusterCommand_1 = require_DeleteGlobalClusterCommand();
    var DeleteOptionGroupCommand_1 = require_DeleteOptionGroupCommand();
    var DeregisterDBProxyTargetsCommand_1 = require_DeregisterDBProxyTargetsCommand();
    var DescribeAccountAttributesCommand_1 = require_DescribeAccountAttributesCommand();
    var DescribeCertificatesCommand_1 = require_DescribeCertificatesCommand();
    var DescribeDBClusterBacktracksCommand_1 = require_DescribeDBClusterBacktracksCommand();
    var DescribeDBClusterEndpointsCommand_1 = require_DescribeDBClusterEndpointsCommand();
    var DescribeDBClusterParameterGroupsCommand_1 = require_DescribeDBClusterParameterGroupsCommand();
    var DescribeDBClusterParametersCommand_1 = require_DescribeDBClusterParametersCommand();
    var DescribeDBClustersCommand_1 = require_DescribeDBClustersCommand();
    var DescribeDBClusterSnapshotAttributesCommand_1 = require_DescribeDBClusterSnapshotAttributesCommand();
    var DescribeDBClusterSnapshotsCommand_1 = require_DescribeDBClusterSnapshotsCommand();
    var DescribeDBEngineVersionsCommand_1 = require_DescribeDBEngineVersionsCommand();
    var DescribeDBInstanceAutomatedBackupsCommand_1 = require_DescribeDBInstanceAutomatedBackupsCommand();
    var DescribeDBInstancesCommand_1 = require_DescribeDBInstancesCommand();
    var DescribeDBLogFilesCommand_1 = require_DescribeDBLogFilesCommand();
    var DescribeDBParameterGroupsCommand_1 = require_DescribeDBParameterGroupsCommand();
    var DescribeDBParametersCommand_1 = require_DescribeDBParametersCommand();
    var DescribeDBProxiesCommand_1 = require_DescribeDBProxiesCommand();
    var DescribeDBProxyEndpointsCommand_1 = require_DescribeDBProxyEndpointsCommand();
    var DescribeDBProxyTargetGroupsCommand_1 = require_DescribeDBProxyTargetGroupsCommand();
    var DescribeDBProxyTargetsCommand_1 = require_DescribeDBProxyTargetsCommand();
    var DescribeDBSecurityGroupsCommand_1 = require_DescribeDBSecurityGroupsCommand();
    var DescribeDBSnapshotAttributesCommand_1 = require_DescribeDBSnapshotAttributesCommand();
    var DescribeDBSnapshotsCommand_1 = require_DescribeDBSnapshotsCommand();
    var DescribeDBSubnetGroupsCommand_1 = require_DescribeDBSubnetGroupsCommand();
    var DescribeEngineDefaultClusterParametersCommand_1 = require_DescribeEngineDefaultClusterParametersCommand();
    var DescribeEngineDefaultParametersCommand_1 = require_DescribeEngineDefaultParametersCommand();
    var DescribeEventCategoriesCommand_1 = require_DescribeEventCategoriesCommand();
    var DescribeEventsCommand_1 = require_DescribeEventsCommand();
    var DescribeEventSubscriptionsCommand_1 = require_DescribeEventSubscriptionsCommand();
    var DescribeExportTasksCommand_1 = require_DescribeExportTasksCommand();
    var DescribeGlobalClustersCommand_1 = require_DescribeGlobalClustersCommand();
    var DescribeOptionGroupOptionsCommand_1 = require_DescribeOptionGroupOptionsCommand();
    var DescribeOptionGroupsCommand_1 = require_DescribeOptionGroupsCommand();
    var DescribeOrderableDBInstanceOptionsCommand_1 = require_DescribeOrderableDBInstanceOptionsCommand();
    var DescribePendingMaintenanceActionsCommand_1 = require_DescribePendingMaintenanceActionsCommand();
    var DescribeReservedDBInstancesCommand_1 = require_DescribeReservedDBInstancesCommand();
    var DescribeReservedDBInstancesOfferingsCommand_1 = require_DescribeReservedDBInstancesOfferingsCommand();
    var DescribeSourceRegionsCommand_1 = require_DescribeSourceRegionsCommand();
    var DescribeValidDBInstanceModificationsCommand_1 = require_DescribeValidDBInstanceModificationsCommand();
    var DownloadDBLogFilePortionCommand_1 = require_DownloadDBLogFilePortionCommand();
    var FailoverDBClusterCommand_1 = require_FailoverDBClusterCommand();
    var FailoverGlobalClusterCommand_1 = require_FailoverGlobalClusterCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand();
    var ModifyCertificatesCommand_1 = require_ModifyCertificatesCommand();
    var ModifyCurrentDBClusterCapacityCommand_1 = require_ModifyCurrentDBClusterCapacityCommand();
    var ModifyCustomDBEngineVersionCommand_1 = require_ModifyCustomDBEngineVersionCommand();
    var ModifyDBClusterCommand_1 = require_ModifyDBClusterCommand();
    var ModifyDBClusterEndpointCommand_1 = require_ModifyDBClusterEndpointCommand();
    var ModifyDBClusterParameterGroupCommand_1 = require_ModifyDBClusterParameterGroupCommand();
    var ModifyDBClusterSnapshotAttributeCommand_1 = require_ModifyDBClusterSnapshotAttributeCommand();
    var ModifyDBInstanceCommand_1 = require_ModifyDBInstanceCommand();
    var ModifyDBParameterGroupCommand_1 = require_ModifyDBParameterGroupCommand();
    var ModifyDBProxyCommand_1 = require_ModifyDBProxyCommand();
    var ModifyDBProxyEndpointCommand_1 = require_ModifyDBProxyEndpointCommand();
    var ModifyDBProxyTargetGroupCommand_1 = require_ModifyDBProxyTargetGroupCommand();
    var ModifyDBSnapshotAttributeCommand_1 = require_ModifyDBSnapshotAttributeCommand();
    var ModifyDBSnapshotCommand_1 = require_ModifyDBSnapshotCommand();
    var ModifyDBSubnetGroupCommand_1 = require_ModifyDBSubnetGroupCommand();
    var ModifyEventSubscriptionCommand_1 = require_ModifyEventSubscriptionCommand();
    var ModifyGlobalClusterCommand_1 = require_ModifyGlobalClusterCommand();
    var ModifyOptionGroupCommand_1 = require_ModifyOptionGroupCommand();
    var PromoteReadReplicaCommand_1 = require_PromoteReadReplicaCommand();
    var PromoteReadReplicaDBClusterCommand_1 = require_PromoteReadReplicaDBClusterCommand();
    var PurchaseReservedDBInstancesOfferingCommand_1 = require_PurchaseReservedDBInstancesOfferingCommand();
    var RebootDBClusterCommand_1 = require_RebootDBClusterCommand();
    var RebootDBInstanceCommand_1 = require_RebootDBInstanceCommand();
    var RegisterDBProxyTargetsCommand_1 = require_RegisterDBProxyTargetsCommand();
    var RemoveFromGlobalClusterCommand_1 = require_RemoveFromGlobalClusterCommand();
    var RemoveRoleFromDBClusterCommand_1 = require_RemoveRoleFromDBClusterCommand();
    var RemoveRoleFromDBInstanceCommand_1 = require_RemoveRoleFromDBInstanceCommand();
    var RemoveSourceIdentifierFromSubscriptionCommand_1 = require_RemoveSourceIdentifierFromSubscriptionCommand();
    var RemoveTagsFromResourceCommand_1 = require_RemoveTagsFromResourceCommand();
    var ResetDBClusterParameterGroupCommand_1 = require_ResetDBClusterParameterGroupCommand();
    var ResetDBParameterGroupCommand_1 = require_ResetDBParameterGroupCommand();
    var RestoreDBClusterFromS3Command_1 = require_RestoreDBClusterFromS3Command();
    var RestoreDBClusterFromSnapshotCommand_1 = require_RestoreDBClusterFromSnapshotCommand();
    var RestoreDBClusterToPointInTimeCommand_1 = require_RestoreDBClusterToPointInTimeCommand();
    var RestoreDBInstanceFromDBSnapshotCommand_1 = require_RestoreDBInstanceFromDBSnapshotCommand();
    var RestoreDBInstanceFromS3Command_1 = require_RestoreDBInstanceFromS3Command();
    var RestoreDBInstanceToPointInTimeCommand_1 = require_RestoreDBInstanceToPointInTimeCommand();
    var RevokeDBSecurityGroupIngressCommand_1 = require_RevokeDBSecurityGroupIngressCommand();
    var StartActivityStreamCommand_1 = require_StartActivityStreamCommand();
    var StartDBClusterCommand_1 = require_StartDBClusterCommand();
    var StartDBInstanceAutomatedBackupsReplicationCommand_1 = require_StartDBInstanceAutomatedBackupsReplicationCommand();
    var StartDBInstanceCommand_1 = require_StartDBInstanceCommand();
    var StartExportTaskCommand_1 = require_StartExportTaskCommand();
    var StopActivityStreamCommand_1 = require_StopActivityStreamCommand();
    var StopDBClusterCommand_1 = require_StopDBClusterCommand();
    var StopDBInstanceAutomatedBackupsReplicationCommand_1 = require_StopDBInstanceAutomatedBackupsReplicationCommand();
    var StopDBInstanceCommand_1 = require_StopDBInstanceCommand();
    var RDSClient_1 = require_RDSClient();
    var RDS = class extends RDSClient_1.RDSClient {
      addRoleToDBCluster(args, optionsOrCb, cb) {
        const command = new AddRoleToDBClusterCommand_1.AddRoleToDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      addRoleToDBInstance(args, optionsOrCb, cb) {
        const command = new AddRoleToDBInstanceCommand_1.AddRoleToDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      addSourceIdentifierToSubscription(args, optionsOrCb, cb) {
        const command = new AddSourceIdentifierToSubscriptionCommand_1.AddSourceIdentifierToSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      addTagsToResource(args, optionsOrCb, cb) {
        const command = new AddTagsToResourceCommand_1.AddTagsToResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      applyPendingMaintenanceAction(args, optionsOrCb, cb) {
        const command = new ApplyPendingMaintenanceActionCommand_1.ApplyPendingMaintenanceActionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      authorizeDBSecurityGroupIngress(args, optionsOrCb, cb) {
        const command = new AuthorizeDBSecurityGroupIngressCommand_1.AuthorizeDBSecurityGroupIngressCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      backtrackDBCluster(args, optionsOrCb, cb) {
        const command = new BacktrackDBClusterCommand_1.BacktrackDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelExportTask(args, optionsOrCb, cb) {
        const command = new CancelExportTaskCommand_1.CancelExportTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      copyDBClusterParameterGroup(args, optionsOrCb, cb) {
        const command = new CopyDBClusterParameterGroupCommand_1.CopyDBClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      copyDBClusterSnapshot(args, optionsOrCb, cb) {
        const command = new CopyDBClusterSnapshotCommand_1.CopyDBClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      copyDBParameterGroup(args, optionsOrCb, cb) {
        const command = new CopyDBParameterGroupCommand_1.CopyDBParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      copyDBSnapshot(args, optionsOrCb, cb) {
        const command = new CopyDBSnapshotCommand_1.CopyDBSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      copyOptionGroup(args, optionsOrCb, cb) {
        const command = new CopyOptionGroupCommand_1.CopyOptionGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createCustomDBEngineVersion(args, optionsOrCb, cb) {
        const command = new CreateCustomDBEngineVersionCommand_1.CreateCustomDBEngineVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBCluster(args, optionsOrCb, cb) {
        const command = new CreateDBClusterCommand_1.CreateDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBClusterEndpoint(args, optionsOrCb, cb) {
        const command = new CreateDBClusterEndpointCommand_1.CreateDBClusterEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBClusterParameterGroup(args, optionsOrCb, cb) {
        const command = new CreateDBClusterParameterGroupCommand_1.CreateDBClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBClusterSnapshot(args, optionsOrCb, cb) {
        const command = new CreateDBClusterSnapshotCommand_1.CreateDBClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBInstance(args, optionsOrCb, cb) {
        const command = new CreateDBInstanceCommand_1.CreateDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBInstanceReadReplica(args, optionsOrCb, cb) {
        const command = new CreateDBInstanceReadReplicaCommand_1.CreateDBInstanceReadReplicaCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBParameterGroup(args, optionsOrCb, cb) {
        const command = new CreateDBParameterGroupCommand_1.CreateDBParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBProxy(args, optionsOrCb, cb) {
        const command = new CreateDBProxyCommand_1.CreateDBProxyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBProxyEndpoint(args, optionsOrCb, cb) {
        const command = new CreateDBProxyEndpointCommand_1.CreateDBProxyEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBSecurityGroup(args, optionsOrCb, cb) {
        const command = new CreateDBSecurityGroupCommand_1.CreateDBSecurityGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBSnapshot(args, optionsOrCb, cb) {
        const command = new CreateDBSnapshotCommand_1.CreateDBSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDBSubnetGroup(args, optionsOrCb, cb) {
        const command = new CreateDBSubnetGroupCommand_1.CreateDBSubnetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createEventSubscription(args, optionsOrCb, cb) {
        const command = new CreateEventSubscriptionCommand_1.CreateEventSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createGlobalCluster(args, optionsOrCb, cb) {
        const command = new CreateGlobalClusterCommand_1.CreateGlobalClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOptionGroup(args, optionsOrCb, cb) {
        const command = new CreateOptionGroupCommand_1.CreateOptionGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteCustomDBEngineVersion(args, optionsOrCb, cb) {
        const command = new DeleteCustomDBEngineVersionCommand_1.DeleteCustomDBEngineVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBCluster(args, optionsOrCb, cb) {
        const command = new DeleteDBClusterCommand_1.DeleteDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBClusterEndpoint(args, optionsOrCb, cb) {
        const command = new DeleteDBClusterEndpointCommand_1.DeleteDBClusterEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBClusterParameterGroup(args, optionsOrCb, cb) {
        const command = new DeleteDBClusterParameterGroupCommand_1.DeleteDBClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBClusterSnapshot(args, optionsOrCb, cb) {
        const command = new DeleteDBClusterSnapshotCommand_1.DeleteDBClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBInstance(args, optionsOrCb, cb) {
        const command = new DeleteDBInstanceCommand_1.DeleteDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBInstanceAutomatedBackup(args, optionsOrCb, cb) {
        const command = new DeleteDBInstanceAutomatedBackupCommand_1.DeleteDBInstanceAutomatedBackupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBParameterGroup(args, optionsOrCb, cb) {
        const command = new DeleteDBParameterGroupCommand_1.DeleteDBParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBProxy(args, optionsOrCb, cb) {
        const command = new DeleteDBProxyCommand_1.DeleteDBProxyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBProxyEndpoint(args, optionsOrCb, cb) {
        const command = new DeleteDBProxyEndpointCommand_1.DeleteDBProxyEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBSecurityGroup(args, optionsOrCb, cb) {
        const command = new DeleteDBSecurityGroupCommand_1.DeleteDBSecurityGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBSnapshot(args, optionsOrCb, cb) {
        const command = new DeleteDBSnapshotCommand_1.DeleteDBSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDBSubnetGroup(args, optionsOrCb, cb) {
        const command = new DeleteDBSubnetGroupCommand_1.DeleteDBSubnetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteEventSubscription(args, optionsOrCb, cb) {
        const command = new DeleteEventSubscriptionCommand_1.DeleteEventSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteGlobalCluster(args, optionsOrCb, cb) {
        const command = new DeleteGlobalClusterCommand_1.DeleteGlobalClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteOptionGroup(args, optionsOrCb, cb) {
        const command = new DeleteOptionGroupCommand_1.DeleteOptionGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterDBProxyTargets(args, optionsOrCb, cb) {
        const command = new DeregisterDBProxyTargetsCommand_1.DeregisterDBProxyTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAccountAttributes(args, optionsOrCb, cb) {
        const command = new DescribeAccountAttributesCommand_1.DescribeAccountAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeCertificates(args, optionsOrCb, cb) {
        const command = new DescribeCertificatesCommand_1.DescribeCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBClusterBacktracks(args, optionsOrCb, cb) {
        const command = new DescribeDBClusterBacktracksCommand_1.DescribeDBClusterBacktracksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBClusterEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeDBClusterEndpointsCommand_1.DescribeDBClusterEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBClusterParameterGroups(args, optionsOrCb, cb) {
        const command = new DescribeDBClusterParameterGroupsCommand_1.DescribeDBClusterParameterGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBClusterParameters(args, optionsOrCb, cb) {
        const command = new DescribeDBClusterParametersCommand_1.DescribeDBClusterParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBClusters(args, optionsOrCb, cb) {
        const command = new DescribeDBClustersCommand_1.DescribeDBClustersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBClusterSnapshotAttributes(args, optionsOrCb, cb) {
        const command = new DescribeDBClusterSnapshotAttributesCommand_1.DescribeDBClusterSnapshotAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBClusterSnapshots(args, optionsOrCb, cb) {
        const command = new DescribeDBClusterSnapshotsCommand_1.DescribeDBClusterSnapshotsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBEngineVersions(args, optionsOrCb, cb) {
        const command = new DescribeDBEngineVersionsCommand_1.DescribeDBEngineVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBInstanceAutomatedBackups(args, optionsOrCb, cb) {
        const command = new DescribeDBInstanceAutomatedBackupsCommand_1.DescribeDBInstanceAutomatedBackupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBInstances(args, optionsOrCb, cb) {
        const command = new DescribeDBInstancesCommand_1.DescribeDBInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBLogFiles(args, optionsOrCb, cb) {
        const command = new DescribeDBLogFilesCommand_1.DescribeDBLogFilesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBParameterGroups(args, optionsOrCb, cb) {
        const command = new DescribeDBParameterGroupsCommand_1.DescribeDBParameterGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBParameters(args, optionsOrCb, cb) {
        const command = new DescribeDBParametersCommand_1.DescribeDBParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBProxies(args, optionsOrCb, cb) {
        const command = new DescribeDBProxiesCommand_1.DescribeDBProxiesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBProxyEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeDBProxyEndpointsCommand_1.DescribeDBProxyEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBProxyTargetGroups(args, optionsOrCb, cb) {
        const command = new DescribeDBProxyTargetGroupsCommand_1.DescribeDBProxyTargetGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBProxyTargets(args, optionsOrCb, cb) {
        const command = new DescribeDBProxyTargetsCommand_1.DescribeDBProxyTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBSecurityGroups(args, optionsOrCb, cb) {
        const command = new DescribeDBSecurityGroupsCommand_1.DescribeDBSecurityGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBSnapshotAttributes(args, optionsOrCb, cb) {
        const command = new DescribeDBSnapshotAttributesCommand_1.DescribeDBSnapshotAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBSnapshots(args, optionsOrCb, cb) {
        const command = new DescribeDBSnapshotsCommand_1.DescribeDBSnapshotsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDBSubnetGroups(args, optionsOrCb, cb) {
        const command = new DescribeDBSubnetGroupsCommand_1.DescribeDBSubnetGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEngineDefaultClusterParameters(args, optionsOrCb, cb) {
        const command = new DescribeEngineDefaultClusterParametersCommand_1.DescribeEngineDefaultClusterParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEngineDefaultParameters(args, optionsOrCb, cb) {
        const command = new DescribeEngineDefaultParametersCommand_1.DescribeEngineDefaultParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEventCategories(args, optionsOrCb, cb) {
        const command = new DescribeEventCategoriesCommand_1.DescribeEventCategoriesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEvents(args, optionsOrCb, cb) {
        const command = new DescribeEventsCommand_1.DescribeEventsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEventSubscriptions(args, optionsOrCb, cb) {
        const command = new DescribeEventSubscriptionsCommand_1.DescribeEventSubscriptionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeExportTasks(args, optionsOrCb, cb) {
        const command = new DescribeExportTasksCommand_1.DescribeExportTasksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeGlobalClusters(args, optionsOrCb, cb) {
        const command = new DescribeGlobalClustersCommand_1.DescribeGlobalClustersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeOptionGroupOptions(args, optionsOrCb, cb) {
        const command = new DescribeOptionGroupOptionsCommand_1.DescribeOptionGroupOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeOptionGroups(args, optionsOrCb, cb) {
        const command = new DescribeOptionGroupsCommand_1.DescribeOptionGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeOrderableDBInstanceOptions(args, optionsOrCb, cb) {
        const command = new DescribeOrderableDBInstanceOptionsCommand_1.DescribeOrderableDBInstanceOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePendingMaintenanceActions(args, optionsOrCb, cb) {
        const command = new DescribePendingMaintenanceActionsCommand_1.DescribePendingMaintenanceActionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeReservedDBInstances(args, optionsOrCb, cb) {
        const command = new DescribeReservedDBInstancesCommand_1.DescribeReservedDBInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeReservedDBInstancesOfferings(args, optionsOrCb, cb) {
        const command = new DescribeReservedDBInstancesOfferingsCommand_1.DescribeReservedDBInstancesOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeSourceRegions(args, optionsOrCb, cb) {
        const command = new DescribeSourceRegionsCommand_1.DescribeSourceRegionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeValidDBInstanceModifications(args, optionsOrCb, cb) {
        const command = new DescribeValidDBInstanceModificationsCommand_1.DescribeValidDBInstanceModificationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      downloadDBLogFilePortion(args, optionsOrCb, cb) {
        const command = new DownloadDBLogFilePortionCommand_1.DownloadDBLogFilePortionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      failoverDBCluster(args, optionsOrCb, cb) {
        const command = new FailoverDBClusterCommand_1.FailoverDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      failoverGlobalCluster(args, optionsOrCb, cb) {
        const command = new FailoverGlobalClusterCommand_1.FailoverGlobalClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsForResource(args, optionsOrCb, cb) {
        const command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyCertificates(args, optionsOrCb, cb) {
        const command = new ModifyCertificatesCommand_1.ModifyCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyCurrentDBClusterCapacity(args, optionsOrCb, cb) {
        const command = new ModifyCurrentDBClusterCapacityCommand_1.ModifyCurrentDBClusterCapacityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyCustomDBEngineVersion(args, optionsOrCb, cb) {
        const command = new ModifyCustomDBEngineVersionCommand_1.ModifyCustomDBEngineVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBCluster(args, optionsOrCb, cb) {
        const command = new ModifyDBClusterCommand_1.ModifyDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBClusterEndpoint(args, optionsOrCb, cb) {
        const command = new ModifyDBClusterEndpointCommand_1.ModifyDBClusterEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBClusterParameterGroup(args, optionsOrCb, cb) {
        const command = new ModifyDBClusterParameterGroupCommand_1.ModifyDBClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBClusterSnapshotAttribute(args, optionsOrCb, cb) {
        const command = new ModifyDBClusterSnapshotAttributeCommand_1.ModifyDBClusterSnapshotAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBInstance(args, optionsOrCb, cb) {
        const command = new ModifyDBInstanceCommand_1.ModifyDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBParameterGroup(args, optionsOrCb, cb) {
        const command = new ModifyDBParameterGroupCommand_1.ModifyDBParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBProxy(args, optionsOrCb, cb) {
        const command = new ModifyDBProxyCommand_1.ModifyDBProxyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBProxyEndpoint(args, optionsOrCb, cb) {
        const command = new ModifyDBProxyEndpointCommand_1.ModifyDBProxyEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBProxyTargetGroup(args, optionsOrCb, cb) {
        const command = new ModifyDBProxyTargetGroupCommand_1.ModifyDBProxyTargetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBSnapshot(args, optionsOrCb, cb) {
        const command = new ModifyDBSnapshotCommand_1.ModifyDBSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBSnapshotAttribute(args, optionsOrCb, cb) {
        const command = new ModifyDBSnapshotAttributeCommand_1.ModifyDBSnapshotAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDBSubnetGroup(args, optionsOrCb, cb) {
        const command = new ModifyDBSubnetGroupCommand_1.ModifyDBSubnetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyEventSubscription(args, optionsOrCb, cb) {
        const command = new ModifyEventSubscriptionCommand_1.ModifyEventSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyGlobalCluster(args, optionsOrCb, cb) {
        const command = new ModifyGlobalClusterCommand_1.ModifyGlobalClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyOptionGroup(args, optionsOrCb, cb) {
        const command = new ModifyOptionGroupCommand_1.ModifyOptionGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      promoteReadReplica(args, optionsOrCb, cb) {
        const command = new PromoteReadReplicaCommand_1.PromoteReadReplicaCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      promoteReadReplicaDBCluster(args, optionsOrCb, cb) {
        const command = new PromoteReadReplicaDBClusterCommand_1.PromoteReadReplicaDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      purchaseReservedDBInstancesOffering(args, optionsOrCb, cb) {
        const command = new PurchaseReservedDBInstancesOfferingCommand_1.PurchaseReservedDBInstancesOfferingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      rebootDBCluster(args, optionsOrCb, cb) {
        const command = new RebootDBClusterCommand_1.RebootDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      rebootDBInstance(args, optionsOrCb, cb) {
        const command = new RebootDBInstanceCommand_1.RebootDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerDBProxyTargets(args, optionsOrCb, cb) {
        const command = new RegisterDBProxyTargetsCommand_1.RegisterDBProxyTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeFromGlobalCluster(args, optionsOrCb, cb) {
        const command = new RemoveFromGlobalClusterCommand_1.RemoveFromGlobalClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeRoleFromDBCluster(args, optionsOrCb, cb) {
        const command = new RemoveRoleFromDBClusterCommand_1.RemoveRoleFromDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeRoleFromDBInstance(args, optionsOrCb, cb) {
        const command = new RemoveRoleFromDBInstanceCommand_1.RemoveRoleFromDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeSourceIdentifierFromSubscription(args, optionsOrCb, cb) {
        const command = new RemoveSourceIdentifierFromSubscriptionCommand_1.RemoveSourceIdentifierFromSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeTagsFromResource(args, optionsOrCb, cb) {
        const command = new RemoveTagsFromResourceCommand_1.RemoveTagsFromResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resetDBClusterParameterGroup(args, optionsOrCb, cb) {
        const command = new ResetDBClusterParameterGroupCommand_1.ResetDBClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resetDBParameterGroup(args, optionsOrCb, cb) {
        const command = new ResetDBParameterGroupCommand_1.ResetDBParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreDBClusterFromS3(args, optionsOrCb, cb) {
        const command = new RestoreDBClusterFromS3Command_1.RestoreDBClusterFromS3Command(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreDBClusterFromSnapshot(args, optionsOrCb, cb) {
        const command = new RestoreDBClusterFromSnapshotCommand_1.RestoreDBClusterFromSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreDBClusterToPointInTime(args, optionsOrCb, cb) {
        const command = new RestoreDBClusterToPointInTimeCommand_1.RestoreDBClusterToPointInTimeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreDBInstanceFromDBSnapshot(args, optionsOrCb, cb) {
        const command = new RestoreDBInstanceFromDBSnapshotCommand_1.RestoreDBInstanceFromDBSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreDBInstanceFromS3(args, optionsOrCb, cb) {
        const command = new RestoreDBInstanceFromS3Command_1.RestoreDBInstanceFromS3Command(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreDBInstanceToPointInTime(args, optionsOrCb, cb) {
        const command = new RestoreDBInstanceToPointInTimeCommand_1.RestoreDBInstanceToPointInTimeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      revokeDBSecurityGroupIngress(args, optionsOrCb, cb) {
        const command = new RevokeDBSecurityGroupIngressCommand_1.RevokeDBSecurityGroupIngressCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startActivityStream(args, optionsOrCb, cb) {
        const command = new StartActivityStreamCommand_1.StartActivityStreamCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDBCluster(args, optionsOrCb, cb) {
        const command = new StartDBClusterCommand_1.StartDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDBInstance(args, optionsOrCb, cb) {
        const command = new StartDBInstanceCommand_1.StartDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDBInstanceAutomatedBackupsReplication(args, optionsOrCb, cb) {
        const command = new StartDBInstanceAutomatedBackupsReplicationCommand_1.StartDBInstanceAutomatedBackupsReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startExportTask(args, optionsOrCb, cb) {
        const command = new StartExportTaskCommand_1.StartExportTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopActivityStream(args, optionsOrCb, cb) {
        const command = new StopActivityStreamCommand_1.StopActivityStreamCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopDBCluster(args, optionsOrCb, cb) {
        const command = new StopDBClusterCommand_1.StopDBClusterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopDBInstance(args, optionsOrCb, cb) {
        const command = new StopDBInstanceCommand_1.StopDBInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopDBInstanceAutomatedBackupsReplication(args, optionsOrCb, cb) {
        const command = new StopDBInstanceAutomatedBackupsReplicationCommand_1.StopDBInstanceAutomatedBackupsReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.RDS = RDS;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AddRoleToDBClusterCommand(), exports);
    tslib_1.__exportStar(require_AddRoleToDBInstanceCommand(), exports);
    tslib_1.__exportStar(require_AddSourceIdentifierToSubscriptionCommand(), exports);
    tslib_1.__exportStar(require_AddTagsToResourceCommand(), exports);
    tslib_1.__exportStar(require_ApplyPendingMaintenanceActionCommand(), exports);
    tslib_1.__exportStar(require_AuthorizeDBSecurityGroupIngressCommand(), exports);
    tslib_1.__exportStar(require_BacktrackDBClusterCommand(), exports);
    tslib_1.__exportStar(require_CancelExportTaskCommand(), exports);
    tslib_1.__exportStar(require_CopyDBClusterParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_CopyDBClusterSnapshotCommand(), exports);
    tslib_1.__exportStar(require_CopyDBParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_CopyDBSnapshotCommand(), exports);
    tslib_1.__exportStar(require_CopyOptionGroupCommand(), exports);
    tslib_1.__exportStar(require_CreateCustomDBEngineVersionCommand(), exports);
    tslib_1.__exportStar(require_CreateDBClusterCommand(), exports);
    tslib_1.__exportStar(require_CreateDBClusterEndpointCommand(), exports);
    tslib_1.__exportStar(require_CreateDBClusterParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_CreateDBClusterSnapshotCommand(), exports);
    tslib_1.__exportStar(require_CreateDBInstanceCommand(), exports);
    tslib_1.__exportStar(require_CreateDBInstanceReadReplicaCommand(), exports);
    tslib_1.__exportStar(require_CreateDBParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_CreateDBProxyCommand(), exports);
    tslib_1.__exportStar(require_CreateDBProxyEndpointCommand(), exports);
    tslib_1.__exportStar(require_CreateDBSecurityGroupCommand(), exports);
    tslib_1.__exportStar(require_CreateDBSnapshotCommand(), exports);
    tslib_1.__exportStar(require_CreateDBSubnetGroupCommand(), exports);
    tslib_1.__exportStar(require_CreateEventSubscriptionCommand(), exports);
    tslib_1.__exportStar(require_CreateGlobalClusterCommand(), exports);
    tslib_1.__exportStar(require_CreateOptionGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteCustomDBEngineVersionCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBClusterCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBClusterEndpointCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBClusterParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBClusterSnapshotCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBInstanceAutomatedBackupCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBInstanceCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBProxyCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBProxyEndpointCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBSecurityGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBSnapshotCommand(), exports);
    tslib_1.__exportStar(require_DeleteDBSubnetGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteEventSubscriptionCommand(), exports);
    tslib_1.__exportStar(require_DeleteGlobalClusterCommand(), exports);
    tslib_1.__exportStar(require_DeleteOptionGroupCommand(), exports);
    tslib_1.__exportStar(require_DeregisterDBProxyTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAccountAttributesCommand(), exports);
    tslib_1.__exportStar(require_DescribeCertificatesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterBacktracksCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterEndpointsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterParameterGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterSnapshotAttributesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterSnapshotsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBClustersCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBEngineVersionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBInstanceAutomatedBackupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBInstancesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBLogFilesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBParameterGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBProxiesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBProxyEndpointsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBProxyTargetGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBProxyTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBSecurityGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBSnapshotAttributesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBSnapshotsCommand(), exports);
    tslib_1.__exportStar(require_DescribeDBSubnetGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEngineDefaultClusterParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribeEngineDefaultParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribeEventCategoriesCommand(), exports);
    tslib_1.__exportStar(require_DescribeEventSubscriptionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEventsCommand(), exports);
    tslib_1.__exportStar(require_DescribeExportTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalClustersCommand(), exports);
    tslib_1.__exportStar(require_DescribeOptionGroupOptionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeOptionGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeOrderableDBInstanceOptionsCommand(), exports);
    tslib_1.__exportStar(require_DescribePendingMaintenanceActionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeReservedDBInstancesCommand(), exports);
    tslib_1.__exportStar(require_DescribeReservedDBInstancesOfferingsCommand(), exports);
    tslib_1.__exportStar(require_DescribeSourceRegionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeValidDBInstanceModificationsCommand(), exports);
    tslib_1.__exportStar(require_DownloadDBLogFilePortionCommand(), exports);
    tslib_1.__exportStar(require_FailoverDBClusterCommand(), exports);
    tslib_1.__exportStar(require_FailoverGlobalClusterCommand(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand(), exports);
    tslib_1.__exportStar(require_ModifyCertificatesCommand(), exports);
    tslib_1.__exportStar(require_ModifyCurrentDBClusterCapacityCommand(), exports);
    tslib_1.__exportStar(require_ModifyCustomDBEngineVersionCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBClusterCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBClusterEndpointCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBClusterParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBClusterSnapshotAttributeCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBInstanceCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBProxyCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBProxyEndpointCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBProxyTargetGroupCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBSnapshotAttributeCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBSnapshotCommand(), exports);
    tslib_1.__exportStar(require_ModifyDBSubnetGroupCommand(), exports);
    tslib_1.__exportStar(require_ModifyEventSubscriptionCommand(), exports);
    tslib_1.__exportStar(require_ModifyGlobalClusterCommand(), exports);
    tslib_1.__exportStar(require_ModifyOptionGroupCommand(), exports);
    tslib_1.__exportStar(require_PromoteReadReplicaCommand(), exports);
    tslib_1.__exportStar(require_PromoteReadReplicaDBClusterCommand(), exports);
    tslib_1.__exportStar(require_PurchaseReservedDBInstancesOfferingCommand(), exports);
    tslib_1.__exportStar(require_RebootDBClusterCommand(), exports);
    tslib_1.__exportStar(require_RebootDBInstanceCommand(), exports);
    tslib_1.__exportStar(require_RegisterDBProxyTargetsCommand(), exports);
    tslib_1.__exportStar(require_RemoveFromGlobalClusterCommand(), exports);
    tslib_1.__exportStar(require_RemoveRoleFromDBClusterCommand(), exports);
    tslib_1.__exportStar(require_RemoveRoleFromDBInstanceCommand(), exports);
    tslib_1.__exportStar(require_RemoveSourceIdentifierFromSubscriptionCommand(), exports);
    tslib_1.__exportStar(require_RemoveTagsFromResourceCommand(), exports);
    tslib_1.__exportStar(require_ResetDBClusterParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_ResetDBParameterGroupCommand(), exports);
    tslib_1.__exportStar(require_RestoreDBClusterFromS3Command(), exports);
    tslib_1.__exportStar(require_RestoreDBClusterFromSnapshotCommand(), exports);
    tslib_1.__exportStar(require_RestoreDBClusterToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_RestoreDBInstanceFromDBSnapshotCommand(), exports);
    tslib_1.__exportStar(require_RestoreDBInstanceFromS3Command(), exports);
    tslib_1.__exportStar(require_RestoreDBInstanceToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_RevokeDBSecurityGroupIngressCommand(), exports);
    tslib_1.__exportStar(require_StartActivityStreamCommand(), exports);
    tslib_1.__exportStar(require_StartDBClusterCommand(), exports);
    tslib_1.__exportStar(require_StartDBInstanceAutomatedBackupsReplicationCommand(), exports);
    tslib_1.__exportStar(require_StartDBInstanceCommand(), exports);
    tslib_1.__exportStar(require_StartExportTaskCommand(), exports);
    tslib_1.__exportStar(require_StopActivityStreamCommand(), exports);
    tslib_1.__exportStar(require_StopDBClusterCommand(), exports);
    tslib_1.__exportStar(require_StopDBInstanceAutomatedBackupsReplicationCommand(), exports);
    tslib_1.__exportStar(require_StopDBInstanceCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_0(), exports);
    tslib_1.__exportStar(require_models_1(), exports);
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeCertificatesPaginator.js
var require_DescribeCertificatesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeCertificatesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeCertificates = void 0;
    var DescribeCertificatesCommand_1 = require_DescribeCertificatesCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeCertificatesCommand_1.DescribeCertificatesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeCertificates(input, ...args);
    };
    async function* paginateDescribeCertificates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeCertificates = paginateDescribeCertificates;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterBacktracksPaginator.js
var require_DescribeDBClusterBacktracksPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterBacktracksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBClusterBacktracks = void 0;
    var DescribeDBClusterBacktracksCommand_1 = require_DescribeDBClusterBacktracksCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBClusterBacktracksCommand_1.DescribeDBClusterBacktracksCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBClusterBacktracks(input, ...args);
    };
    async function* paginateDescribeDBClusterBacktracks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBClusterBacktracks = paginateDescribeDBClusterBacktracks;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterEndpointsPaginator.js
var require_DescribeDBClusterEndpointsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterEndpointsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBClusterEndpoints = void 0;
    var DescribeDBClusterEndpointsCommand_1 = require_DescribeDBClusterEndpointsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBClusterEndpointsCommand_1.DescribeDBClusterEndpointsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBClusterEndpoints(input, ...args);
    };
    async function* paginateDescribeDBClusterEndpoints(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBClusterEndpoints = paginateDescribeDBClusterEndpoints;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterParameterGroupsPaginator.js
var require_DescribeDBClusterParameterGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterParameterGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBClusterParameterGroups = void 0;
    var DescribeDBClusterParameterGroupsCommand_1 = require_DescribeDBClusterParameterGroupsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBClusterParameterGroupsCommand_1.DescribeDBClusterParameterGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBClusterParameterGroups(input, ...args);
    };
    async function* paginateDescribeDBClusterParameterGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBClusterParameterGroups = paginateDescribeDBClusterParameterGroups;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterParametersPaginator.js
var require_DescribeDBClusterParametersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterParametersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBClusterParameters = void 0;
    var DescribeDBClusterParametersCommand_1 = require_DescribeDBClusterParametersCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBClusterParametersCommand_1.DescribeDBClusterParametersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBClusterParameters(input, ...args);
    };
    async function* paginateDescribeDBClusterParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBClusterParameters = paginateDescribeDBClusterParameters;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterSnapshotsPaginator.js
var require_DescribeDBClusterSnapshotsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClusterSnapshotsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBClusterSnapshots = void 0;
    var DescribeDBClusterSnapshotsCommand_1 = require_DescribeDBClusterSnapshotsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBClusterSnapshotsCommand_1.DescribeDBClusterSnapshotsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBClusterSnapshots(input, ...args);
    };
    async function* paginateDescribeDBClusterSnapshots(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBClusterSnapshots = paginateDescribeDBClusterSnapshots;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClustersPaginator.js
var require_DescribeDBClustersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBClustersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBClusters = void 0;
    var DescribeDBClustersCommand_1 = require_DescribeDBClustersCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBClustersCommand_1.DescribeDBClustersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBClusters(input, ...args);
    };
    async function* paginateDescribeDBClusters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBClusters = paginateDescribeDBClusters;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBEngineVersionsPaginator.js
var require_DescribeDBEngineVersionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBEngineVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBEngineVersions = void 0;
    var DescribeDBEngineVersionsCommand_1 = require_DescribeDBEngineVersionsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBEngineVersionsCommand_1.DescribeDBEngineVersionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBEngineVersions(input, ...args);
    };
    async function* paginateDescribeDBEngineVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBEngineVersions = paginateDescribeDBEngineVersions;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBInstanceAutomatedBackupsPaginator.js
var require_DescribeDBInstanceAutomatedBackupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBInstanceAutomatedBackupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBInstanceAutomatedBackups = void 0;
    var DescribeDBInstanceAutomatedBackupsCommand_1 = require_DescribeDBInstanceAutomatedBackupsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBInstanceAutomatedBackupsCommand_1.DescribeDBInstanceAutomatedBackupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBInstanceAutomatedBackups(input, ...args);
    };
    async function* paginateDescribeDBInstanceAutomatedBackups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBInstanceAutomatedBackups = paginateDescribeDBInstanceAutomatedBackups;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBInstancesPaginator.js
var require_DescribeDBInstancesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBInstancesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBInstances = void 0;
    var DescribeDBInstancesCommand_1 = require_DescribeDBInstancesCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBInstancesCommand_1.DescribeDBInstancesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBInstances(input, ...args);
    };
    async function* paginateDescribeDBInstances(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBInstances = paginateDescribeDBInstances;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBLogFilesPaginator.js
var require_DescribeDBLogFilesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBLogFilesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBLogFiles = void 0;
    var DescribeDBLogFilesCommand_1 = require_DescribeDBLogFilesCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBLogFilesCommand_1.DescribeDBLogFilesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBLogFiles(input, ...args);
    };
    async function* paginateDescribeDBLogFiles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBLogFiles = paginateDescribeDBLogFiles;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBParameterGroupsPaginator.js
var require_DescribeDBParameterGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBParameterGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBParameterGroups = void 0;
    var DescribeDBParameterGroupsCommand_1 = require_DescribeDBParameterGroupsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBParameterGroupsCommand_1.DescribeDBParameterGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBParameterGroups(input, ...args);
    };
    async function* paginateDescribeDBParameterGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBParameterGroups = paginateDescribeDBParameterGroups;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBParametersPaginator.js
var require_DescribeDBParametersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBParametersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBParameters = void 0;
    var DescribeDBParametersCommand_1 = require_DescribeDBParametersCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBParametersCommand_1.DescribeDBParametersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBParameters(input, ...args);
    };
    async function* paginateDescribeDBParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBParameters = paginateDescribeDBParameters;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxiesPaginator.js
var require_DescribeDBProxiesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxiesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBProxies = void 0;
    var DescribeDBProxiesCommand_1 = require_DescribeDBProxiesCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBProxiesCommand_1.DescribeDBProxiesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBProxies(input, ...args);
    };
    async function* paginateDescribeDBProxies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBProxies = paginateDescribeDBProxies;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxyEndpointsPaginator.js
var require_DescribeDBProxyEndpointsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxyEndpointsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBProxyEndpoints = void 0;
    var DescribeDBProxyEndpointsCommand_1 = require_DescribeDBProxyEndpointsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBProxyEndpointsCommand_1.DescribeDBProxyEndpointsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBProxyEndpoints(input, ...args);
    };
    async function* paginateDescribeDBProxyEndpoints(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBProxyEndpoints = paginateDescribeDBProxyEndpoints;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxyTargetGroupsPaginator.js
var require_DescribeDBProxyTargetGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxyTargetGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBProxyTargetGroups = void 0;
    var DescribeDBProxyTargetGroupsCommand_1 = require_DescribeDBProxyTargetGroupsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBProxyTargetGroupsCommand_1.DescribeDBProxyTargetGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBProxyTargetGroups(input, ...args);
    };
    async function* paginateDescribeDBProxyTargetGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBProxyTargetGroups = paginateDescribeDBProxyTargetGroups;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxyTargetsPaginator.js
var require_DescribeDBProxyTargetsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBProxyTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBProxyTargets = void 0;
    var DescribeDBProxyTargetsCommand_1 = require_DescribeDBProxyTargetsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBProxyTargetsCommand_1.DescribeDBProxyTargetsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBProxyTargets(input, ...args);
    };
    async function* paginateDescribeDBProxyTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBProxyTargets = paginateDescribeDBProxyTargets;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBSecurityGroupsPaginator.js
var require_DescribeDBSecurityGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBSecurityGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBSecurityGroups = void 0;
    var DescribeDBSecurityGroupsCommand_1 = require_DescribeDBSecurityGroupsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBSecurityGroupsCommand_1.DescribeDBSecurityGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBSecurityGroups(input, ...args);
    };
    async function* paginateDescribeDBSecurityGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBSecurityGroups = paginateDescribeDBSecurityGroups;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBSnapshotsPaginator.js
var require_DescribeDBSnapshotsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBSnapshotsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBSnapshots = void 0;
    var DescribeDBSnapshotsCommand_1 = require_DescribeDBSnapshotsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBSnapshotsCommand_1.DescribeDBSnapshotsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBSnapshots(input, ...args);
    };
    async function* paginateDescribeDBSnapshots(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBSnapshots = paginateDescribeDBSnapshots;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBSubnetGroupsPaginator.js
var require_DescribeDBSubnetGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeDBSubnetGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeDBSubnetGroups = void 0;
    var DescribeDBSubnetGroupsCommand_1 = require_DescribeDBSubnetGroupsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeDBSubnetGroupsCommand_1.DescribeDBSubnetGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeDBSubnetGroups(input, ...args);
    };
    async function* paginateDescribeDBSubnetGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeDBSubnetGroups = paginateDescribeDBSubnetGroups;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeEngineDefaultParametersPaginator.js
var require_DescribeEngineDefaultParametersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeEngineDefaultParametersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEngineDefaultParameters = void 0;
    var DescribeEngineDefaultParametersCommand_1 = require_DescribeEngineDefaultParametersCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEngineDefaultParametersCommand_1.DescribeEngineDefaultParametersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeEngineDefaultParameters(input, ...args);
    };
    async function* paginateDescribeEngineDefaultParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.EngineDefaults.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEngineDefaultParameters = paginateDescribeEngineDefaultParameters;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeEventSubscriptionsPaginator.js
var require_DescribeEventSubscriptionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeEventSubscriptionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEventSubscriptions = void 0;
    var DescribeEventSubscriptionsCommand_1 = require_DescribeEventSubscriptionsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEventSubscriptionsCommand_1.DescribeEventSubscriptionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeEventSubscriptions(input, ...args);
    };
    async function* paginateDescribeEventSubscriptions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEventSubscriptions = paginateDescribeEventSubscriptions;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeEventsPaginator.js
var require_DescribeEventsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeEventsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEvents = void 0;
    var DescribeEventsCommand_1 = require_DescribeEventsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEventsCommand_1.DescribeEventsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeEvents(input, ...args);
    };
    async function* paginateDescribeEvents(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEvents = paginateDescribeEvents;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeExportTasksPaginator.js
var require_DescribeExportTasksPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeExportTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeExportTasks = void 0;
    var DescribeExportTasksCommand_1 = require_DescribeExportTasksCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeExportTasksCommand_1.DescribeExportTasksCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeExportTasks(input, ...args);
    };
    async function* paginateDescribeExportTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeExportTasks = paginateDescribeExportTasks;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeGlobalClustersPaginator.js
var require_DescribeGlobalClustersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeGlobalClustersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeGlobalClusters = void 0;
    var DescribeGlobalClustersCommand_1 = require_DescribeGlobalClustersCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeGlobalClustersCommand_1.DescribeGlobalClustersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeGlobalClusters(input, ...args);
    };
    async function* paginateDescribeGlobalClusters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeGlobalClusters = paginateDescribeGlobalClusters;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeOptionGroupOptionsPaginator.js
var require_DescribeOptionGroupOptionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeOptionGroupOptionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeOptionGroupOptions = void 0;
    var DescribeOptionGroupOptionsCommand_1 = require_DescribeOptionGroupOptionsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeOptionGroupOptionsCommand_1.DescribeOptionGroupOptionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeOptionGroupOptions(input, ...args);
    };
    async function* paginateDescribeOptionGroupOptions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeOptionGroupOptions = paginateDescribeOptionGroupOptions;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeOptionGroupsPaginator.js
var require_DescribeOptionGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeOptionGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeOptionGroups = void 0;
    var DescribeOptionGroupsCommand_1 = require_DescribeOptionGroupsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeOptionGroupsCommand_1.DescribeOptionGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeOptionGroups(input, ...args);
    };
    async function* paginateDescribeOptionGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeOptionGroups = paginateDescribeOptionGroups;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeOrderableDBInstanceOptionsPaginator.js
var require_DescribeOrderableDBInstanceOptionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeOrderableDBInstanceOptionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeOrderableDBInstanceOptions = void 0;
    var DescribeOrderableDBInstanceOptionsCommand_1 = require_DescribeOrderableDBInstanceOptionsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeOrderableDBInstanceOptionsCommand_1.DescribeOrderableDBInstanceOptionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeOrderableDBInstanceOptions(input, ...args);
    };
    async function* paginateDescribeOrderableDBInstanceOptions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeOrderableDBInstanceOptions = paginateDescribeOrderableDBInstanceOptions;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribePendingMaintenanceActionsPaginator.js
var require_DescribePendingMaintenanceActionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribePendingMaintenanceActionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePendingMaintenanceActions = void 0;
    var DescribePendingMaintenanceActionsCommand_1 = require_DescribePendingMaintenanceActionsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePendingMaintenanceActionsCommand_1.DescribePendingMaintenanceActionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describePendingMaintenanceActions(input, ...args);
    };
    async function* paginateDescribePendingMaintenanceActions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePendingMaintenanceActions = paginateDescribePendingMaintenanceActions;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeReservedDBInstancesOfferingsPaginator.js
var require_DescribeReservedDBInstancesOfferingsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeReservedDBInstancesOfferingsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeReservedDBInstancesOfferings = void 0;
    var DescribeReservedDBInstancesOfferingsCommand_1 = require_DescribeReservedDBInstancesOfferingsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeReservedDBInstancesOfferingsCommand_1.DescribeReservedDBInstancesOfferingsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeReservedDBInstancesOfferings(input, ...args);
    };
    async function* paginateDescribeReservedDBInstancesOfferings(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeReservedDBInstancesOfferings = paginateDescribeReservedDBInstancesOfferings;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeReservedDBInstancesPaginator.js
var require_DescribeReservedDBInstancesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeReservedDBInstancesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeReservedDBInstances = void 0;
    var DescribeReservedDBInstancesCommand_1 = require_DescribeReservedDBInstancesCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeReservedDBInstancesCommand_1.DescribeReservedDBInstancesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeReservedDBInstances(input, ...args);
    };
    async function* paginateDescribeReservedDBInstances(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeReservedDBInstances = paginateDescribeReservedDBInstances;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeSourceRegionsPaginator.js
var require_DescribeSourceRegionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DescribeSourceRegionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeSourceRegions = void 0;
    var DescribeSourceRegionsCommand_1 = require_DescribeSourceRegionsCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeSourceRegionsCommand_1.DescribeSourceRegionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeSourceRegions(input, ...args);
    };
    async function* paginateDescribeSourceRegions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeSourceRegions = paginateDescribeSourceRegions;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DownloadDBLogFilePortionPaginator.js
var require_DownloadDBLogFilePortionPaginator = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/DownloadDBLogFilePortionPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDownloadDBLogFilePortion = void 0;
    var DownloadDBLogFilePortionCommand_1 = require_DownloadDBLogFilePortionCommand();
    var RDS_1 = require_RDS();
    var RDSClient_1 = require_RDSClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DownloadDBLogFilePortionCommand_1.DownloadDBLogFilePortionCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.downloadDBLogFilePortion(input, ...args);
    };
    async function* paginateDownloadDBLogFilePortion(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["NumberOfLines"] = config.pageSize;
        if (config.client instanceof RDS_1.RDS) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof RDSClient_1.RDSClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected RDS | RDSClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDownloadDBLogFilePortion = paginateDownloadDBLogFilePortion;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_DescribeCertificatesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterBacktracksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterEndpointsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterParameterGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterParametersPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBClusterSnapshotsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBClustersPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBEngineVersionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBInstanceAutomatedBackupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBInstancesPaginator(), exports);
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_DescribeDBLogFilesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBParameterGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBParametersPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBProxiesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBProxyEndpointsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBProxyTargetGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBProxyTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBSecurityGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBSnapshotsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeDBSubnetGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEngineDefaultParametersPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEventSubscriptionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEventsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeExportTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeGlobalClustersPaginator(), exports);
    tslib_1.__exportStar(require_DescribeOptionGroupOptionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeOptionGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeOrderableDBInstanceOptionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribePendingMaintenanceActionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeReservedDBInstancesOfferingsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeReservedDBInstancesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeSourceRegionsPaginator(), exports);
    tslib_1.__exportStar(require_DownloadDBLogFilePortionPaginator(), exports);
  }
});

// node_modules/@aws-sdk/util-waiter/node_modules/tslib/tslib.js
var require_tslib30 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Request was aborted"
        }))}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Waiter has timed out"
        }))}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate2 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib30();
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate2(), exports);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils();
    var waiter_1 = require_waiter();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = __spreadValues(__spreadValues({}, waiter_1.waiterServiceDefaults), options);
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib30();
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterAvailable.js
var require_waitForDBClusterAvailable = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterAvailable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBClusterAvailable = exports.waitForDBClusterAvailable = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBClustersCommand_1 = require_DescribeDBClustersCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBClustersCommand_1.DescribeDBClustersCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "available";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleted") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "failed") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-restore") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-parameters") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBClusterAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBClusterAvailable = waitForDBClusterAvailable;
    var waitUntilDBClusterAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBClusterAvailable = waitUntilDBClusterAvailable;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterDeleted.js
var require_waitForDBClusterDeleted = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterDeleted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBClusterDeleted = exports.waitForDBClusterDeleted = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBClustersCommand_1 = require_DescribeDBClustersCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBClustersCommand_1.DescribeDBClustersCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.DBClusters.length == 0;
          };
          if (returnComparator() == true) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "creating") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "modifying") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "rebooting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "resetting-master-credentials") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "DBClusterNotFoundFault") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBClusterDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBClusterDeleted = waitForDBClusterDeleted;
    var waitUntilDBClusterDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBClusterDeleted = waitUntilDBClusterDeleted;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterSnapshotAvailable.js
var require_waitForDBClusterSnapshotAvailable = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterSnapshotAvailable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBClusterSnapshotAvailable = exports.waitForDBClusterSnapshotAvailable = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBClusterSnapshotsCommand_1 = require_DescribeDBClusterSnapshotsCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBClusterSnapshotsCommand_1.DescribeDBClusterSnapshotsCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "available";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleted") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "failed") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-restore") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-parameters") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBClusterSnapshotAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBClusterSnapshotAvailable = waitForDBClusterSnapshotAvailable;
    var waitUntilDBClusterSnapshotAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBClusterSnapshotAvailable = waitUntilDBClusterSnapshotAvailable;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterSnapshotDeleted.js
var require_waitForDBClusterSnapshotDeleted = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBClusterSnapshotDeleted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBClusterSnapshotDeleted = exports.waitForDBClusterSnapshotDeleted = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBClusterSnapshotsCommand_1 = require_DescribeDBClusterSnapshotsCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBClusterSnapshotsCommand_1.DescribeDBClusterSnapshotsCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.DBClusterSnapshots.length == 0;
          };
          if (returnComparator() == true) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "creating") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "modifying") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "rebooting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBClusterSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "resetting-master-credentials") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "DBClusterSnapshotNotFoundFault") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBClusterSnapshotDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBClusterSnapshotDeleted = waitForDBClusterSnapshotDeleted;
    var waitUntilDBClusterSnapshotDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBClusterSnapshotDeleted = waitUntilDBClusterSnapshotDeleted;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBInstanceAvailable.js
var require_waitForDBInstanceAvailable = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBInstanceAvailable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBInstanceAvailable = exports.waitForDBInstanceAvailable = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBInstancesCommand_1 = require_DescribeDBInstancesCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBInstancesCommand_1.DescribeDBInstancesCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "available";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleted") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "failed") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-restore") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-parameters") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBInstanceAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBInstanceAvailable = waitForDBInstanceAvailable;
    var waitUntilDBInstanceAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBInstanceAvailable = waitUntilDBInstanceAvailable;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBInstanceDeleted.js
var require_waitForDBInstanceDeleted = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBInstanceDeleted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBInstanceDeleted = exports.waitForDBInstanceDeleted = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBInstancesCommand_1 = require_DescribeDBInstancesCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBInstancesCommand_1.DescribeDBInstancesCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.DBInstances.length == 0;
          };
          if (returnComparator() == true) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "creating") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "modifying") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "rebooting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBInstances);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.DBInstanceStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "resetting-master-credentials") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "DBInstanceNotFound") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBInstanceDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBInstanceDeleted = waitForDBInstanceDeleted;
    var waitUntilDBInstanceDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBInstanceDeleted = waitUntilDBInstanceDeleted;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBSnapshotAvailable.js
var require_waitForDBSnapshotAvailable = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBSnapshotAvailable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBSnapshotAvailable = exports.waitForDBSnapshotAvailable = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBSnapshotsCommand_1 = require_DescribeDBSnapshotsCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBSnapshotsCommand_1.DescribeDBSnapshotsCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "available";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleted") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "failed") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-restore") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-parameters") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBSnapshotAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBSnapshotAvailable = waitForDBSnapshotAvailable;
    var waitUntilDBSnapshotAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBSnapshotAvailable = waitUntilDBSnapshotAvailable;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBSnapshotDeleted.js
var require_waitForDBSnapshotDeleted = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/waitForDBSnapshotDeleted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilDBSnapshotDeleted = exports.waitForDBSnapshotDeleted = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeDBSnapshotsCommand_1 = require_DescribeDBSnapshotsCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeDBSnapshotsCommand_1.DescribeDBSnapshotsCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.DBSnapshots.length == 0;
          };
          if (returnComparator() == true) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "creating") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "modifying") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "rebooting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.DBSnapshots);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "resetting-master-credentials") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "DBSnapshotNotFound") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDBSnapshotDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForDBSnapshotDeleted = waitForDBSnapshotDeleted;
    var waitUntilDBSnapshotDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilDBSnapshotDeleted = waitUntilDBSnapshotDeleted;
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_waitForDBClusterAvailable(), exports);
    tslib_1.__exportStar(require_waitForDBClusterDeleted(), exports);
    tslib_1.__exportStar(require_waitForDBClusterSnapshotAvailable(), exports);
    tslib_1.__exportStar(require_waitForDBClusterSnapshotDeleted(), exports);
    tslib_1.__exportStar(require_waitForDBInstanceAvailable(), exports);
    tslib_1.__exportStar(require_waitForDBInstanceDeleted(), exports);
    tslib_1.__exportStar(require_waitForDBSnapshotAvailable(), exports);
    tslib_1.__exportStar(require_waitForDBSnapshotDeleted(), exports);
  }
});

// node_modules/@aws-sdk/client-rds/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "node_modules/@aws-sdk/client-rds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RDSServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_RDS(), exports);
    tslib_1.__exportStar(require_RDSClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var RDSServiceException_1 = require_RDSServiceException();
    Object.defineProperty(exports, "RDSServiceException", { enumerable: true, get: function() {
      return RDSServiceException_1.RDSServiceException;
    } });
  }
});

// src/lambda/index.ts
var lambda_exports = {};
__export(lambda_exports, {
  main: () => main
});
module.exports = __toCommonJS(lambda_exports);

// lib/stackConfiguration.ts
var appName = "aws-sdk-app";
var BASE_PATH = "/../src/lambda";
var PUBLIC_LAMBDA_PATH = `${BASE_PATH}/index.ts`;
var RDS_INSTANCE_ID = `${appName}-public-db`;
var RDS_INSTANCE_NAME = `${appName}-public-db-rds`;
var RDS_VPC_ID = `${appName}-public-rds-vpc`;
var RDS_SUBNET_NAME = `${appName}-public-subnet`;
var RDS_SECURITY_GROUP_ID = `${appName}-public-rds-sg`;
var RDS_SECURITY_GROUP_NAME = `${appName}PublicRdsSG`;
var S3_BUCKET_ID = `${appName}-sdk-bucket-create`;

// src/lambda/index.ts
var import_client_rds = __toESM(require_dist_cjs47());
async function main(event, context) {
  console.log(event);
  console.log(context);
  console.log("process.env>", process.env);
  const sqlConfig = {
    user: process.env.userName,
    password: process.env.password,
    database: process.env.databaseName,
    host: process.env.endpoint
  };
  let response = {};
  try {
    const rdsClient = new import_client_rds.RDSClient({});
    const newRdsInstanceId = `${RDS_INSTANCE_ID}-${Date.now()}`;
    const rdsCreateResponse = await rdsClient.send(new import_client_rds.CreateDBInstanceCommand({
      Engine: "mysql",
      EngineVersion: "8.0.28",
      PubliclyAccessible: true,
      DBInstanceClass: "db.t2.micro",
      DBName: process.env.databaseName,
      DBInstanceIdentifier: newRdsInstanceId,
      MasterUsername: process.env.userName,
      MasterUserPassword: process.env.password,
      VpcSecurityGroupIds: [`${process.env.securityGroupId}`]
    }));
    console.log("rdsCreateResponse>", rdsCreateResponse);
    response = {
      body: JSON.stringify({
        newRdsInstance: `Database instance(${newRdsInstanceId}) creation is triggered. Please check after 5-10 mins.`,
        metadata: {
          rdsCreateResponse
        }
      }),
      statusCode: 200
    };
  } catch (err) {
    console.log("ERR>", err);
    response = {
      body: JSON.stringify({
        err
      }),
      statusCode: 500
    };
  }
  console.log(response);
  return response;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  main
});
